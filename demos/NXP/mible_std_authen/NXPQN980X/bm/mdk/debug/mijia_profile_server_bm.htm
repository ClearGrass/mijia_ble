<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\debug\mijia_profile_server_bm.out]</title></head>
<body><HR>
<H1>Static Call Graph for image .\debug\mijia_profile_server_bm.out</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Wed Apr 04 20:36:47 2018
<BR><P>
<H3>Maximum Stack Usage =        876 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main_task &rArr; App_Thread &rArr; App_HandleHostMessageInput &rArr; BleApp_GenericCallback &rArr; BleApp_Config &rArr; mible_server_miservice_init &rArr; Log_Printf &rArr; Serial_AsyncWrite &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[12e]">APP_PlfReset</a>
 <LI><a href="#[1cc]">AddBigHexModP256</a>
 <LI><a href="#[177]">AddPdiv2_256</a>
 <LI><a href="#[179]">AttServer_SendErrorResponse</a>
 <LI><a href="#[17b]">AttServer_SendExchangeMtuResponse</a>
 <LI><a href="#[17c]">AttServer_SendFindByTypeValueResponse</a>
 <LI><a href="#[17d]">AttServer_SendFindInformationResponse</a>
 <LI><a href="#[17e]">AttServer_SendHandleValueIndication</a>
 <LI><a href="#[17f]">AttServer_SendHandleValueNotification</a>
 <LI><a href="#[180]">AttServer_SendReadBlobResponse</a>
 <LI><a href="#[181]">AttServer_SendReadByGroupTypeResponse</a>
 <LI><a href="#[182]">AttServer_SendReadByTypeResponse</a>
 <LI><a href="#[183]">AttServer_SendReadMultipleResponse</a>
 <LI><a href="#[184]">AttServer_SendReadResponse</a>
 <LI><a href="#[185]">AttServer_SendWriteResponse</a>
 <LI><a href="#[186]">Att_GetMtu</a>
 <LI><a href="#[188]">Att_Init</a>
 <LI><a href="#[18a]">Att_NotifyConnection</a>
 <LI><a href="#[18c]">Att_NotifyDisconnection</a>
 <LI><a href="#[274]">Att_RegisterOpcodeCallback</a>
 <LI><a href="#[276]">Att_RegisterTimeoutCallback</a>
 <LI><a href="#[275]">Att_RegisterUnsupportedOpcodeCallback</a>
 <LI><a href="#[18e]">Att_SetMtu</a>
 <LI><a href="#[20]">BLE_IRQHandler</a>
 <LI><a href="#[198]">BLE_Init</a>
 <LI><a href="#[a6]">Ble_HciRecv</a>
 <LI><a href="#[1a1]">Ble_HostInitialize</a>
 <LI><a href="#[437]">Controller_Init</a>
 <LI><a href="#[268]">Controller_SendSingleAdvertisement</a>
 <LI><a href="#[1a3]">Controller_TaskHandler</a>
 <LI><a href="#[1aa]">DevDb_AddConnection</a>
 <LI><a href="#[1ac]">DevDb_CheckIfBondedDeviceAddressIsStatic</a>
 <LI><a href="#[1af]">DevDb_CheckIfBondedDeviceHasDistributedIrk</a>
 <LI><a href="#[1b0]">DevDb_CheckIfBondedDeviceIsActive</a>
 <LI><a href="#[1b1]">DevDb_GetBondedDeviceAddress</a>
 <LI><a href="#[1b2]">DevDb_GetBondedDeviceCsrk</a>
 <LI><a href="#[1b4]">DevDb_GetBondedDeviceIrk</a>
 <LI><a href="#[1b5]">DevDb_GetBondedDeviceSignCounter</a>
 <LI><a href="#[253]">DevDb_GetCccd</a>
 <LI><a href="#[281]">DevDb_GetDeviceId</a>
 <LI><a href="#[2fd]">DevDb_GetNbBondedDevices</a>
 <LI><a href="#[1b6]">DevDb_Init</a>
 <LI><a href="#[1b7]">DevDb_LoadBondingInformation</a>
 <LI><a href="#[1ab]">DevDb_LoadMostRecentlyUsedDeviceAddressAndType</a>
 <LI><a href="#[262]">DevDb_LoadPublicDeviceAddress</a>
 <LI><a href="#[1b8]">DevDb_MarkDeviceAsBonded</a>
 <LI><a href="#[1b9]">DevDb_ReleaseConnection</a>
 <LI><a href="#[1ba]">DevDb_SaveCccd</a>
 <LI><a href="#[1bc]">DevDb_SaveKeys</a>
 <LI><a href="#[31c]">DevDb_SaveLocalPublicAddress</a>
 <LI><a href="#[252]">DevDb_SaveMostRecentlyUsedAddressType</a>
 <LI><a href="#[269]">DevDb_SaveMostRecentlyUsedRandomAddress</a>
 <LI><a href="#[1bd]">DevDb_SetPeerSignCounter</a>
 <LI><a href="#[1be]">DevDb_SignalDevicePaired</a>
 <LI><a href="#[1bf]">DevDb_SignalDevicePairedAndBonded</a>
 <LI><a href="#[132]">EIF_FlowOff</a>
 <LI><a href="#[131]">EIF_FlowOn</a>
 <LI><a href="#[12f]">EIF_Read</a>
 <LI><a href="#[1a4]">EIF_RxCallback</a>
 <LI><a href="#[130]">EIF_Write</a>
 <LI><a href="#[1c7]">GF_Jacobian_Point_Addition256</a>
 <LI><a href="#[1c9]">GF_Jacobian_Point_Double256</a>
 <LI><a href="#[1cd]">Gap_CheckIndicationStatus</a>
 <LI><a href="#[1cf]">Gap_CheckNotificationStatus</a>
 <LI><a href="#[1d1]">Gap_Disconnect</a>
 <LI><a href="#[1d4]">Gap_EnableUpdateConnectionParameters</a>
 <LI><a href="#[1d5]">Gap_LeSetPhy</a>
 <LI><a href="#[1d6]">Gap_ReadPublicDeviceAddress</a>
 <LI><a href="#[1d7]">Gap_RejectPairing</a>
 <LI><a href="#[1d8]">Gap_SetAdvertisingData</a>
 <LI><a href="#[1d9]">Gap_SetAdvertisingParameters</a>
 <LI><a href="#[1da]">Gap_StartAdvertising</a>
 <LI><a href="#[1db]">Gap_UpdateConnectionParameters</a>
 <LI><a href="#[1dc]">GattDb_AttFindByTypeValue</a>
 <LI><a href="#[1de]">GattDb_AttFindInformation</a>
 <LI><a href="#[1e0]">GattDb_AttPrepareNotificationIndication</a>
 <LI><a href="#[1e4]">GattDb_AttRead</a>
 <LI><a href="#[1e5]">GattDb_AttReadBlob</a>
 <LI><a href="#[1e6]">GattDb_AttReadByGroupType</a>
 <LI><a href="#[1e8]">GattDb_AttReadByType</a>
 <LI><a href="#[1ea]">GattDb_AttReadMultiple</a>
 <LI><a href="#[1eb]">GattDb_AttSignedWriteCommand</a>
 <LI><a href="#[1ed]">GattDb_AttWrite</a>
 <LI><a href="#[1ee]">GattDb_AttWriteCommand</a>
 <LI><a href="#[1ef]">GattDb_FindCccdHandleForCharValueHandle</a>
 <LI><a href="#[1f1]">GattDb_FindCharValueHandleInService</a>
 <LI><a href="#[1f2]">GattDb_FindServiceHandle</a>
 <LI><a href="#[2fe]">GattDb_GetServiceHandleForAttributeIndex</a>
 <LI><a href="#[1f3]">GattDb_WriteAttribute</a>
 <LI><a href="#[1f4]">GattServer_RegisterCallback</a>
 <LI><a href="#[1f6]">GattServer_RegisterHandlesForWriteNotifications</a>
 <LI><a href="#[1f8]">GattServer_SendAttributeWrittenStatus</a>
 <LI><a href="#[1f9]">GattServer_SendInstantValueIndication</a>
 <LI><a href="#[1fa]">GattServer_SendInstantValueNotification</a>
 <LI><a href="#[1fb]">Gatt_Init</a>
 <LI><a href="#[1fd]">Hci2Host_MsgHandler</a>
 <LI><a href="#[257]">Hci_Disconnect</a>
 <LI><a href="#[208]">Hci_Init</a>
 <LI><a href="#[317]">Hci_LeAddDeviceToResolvingList</a>
 <LI><a href="#[209]">Hci_LeAddDeviceToWhiteList</a>
 <LI><a href="#[258]">Hci_LeClearResolvingList</a>
 <LI><a href="#[254]">Hci_LeClearWhiteList</a>
 <LI><a href="#[285]">Hci_LeConnectionUpdate</a>
 <LI><a href="#[20a]">Hci_LeCreateConnection</a>
 <LI><a href="#[256]">Hci_LeCreateConnectionCancel</a>
 <LI><a href="#[2d3]">Hci_LeLongTermKeyRequestNegativeReply</a>
 <LI><a href="#[2cf]">Hci_LeLongTermKeyRequestReply</a>
 <LI><a href="#[263]">Hci_LeReadAdvertisingChannelTxPower</a>
 <LI><a href="#[314]">Hci_LeReadBufferSize</a>
 <LI><a href="#[319]">Hci_LeReadLocalSupportedFeatures</a>
 <LI><a href="#[31f]">Hci_LeReadPeerResolvableAddress</a>
 <LI><a href="#[25d]">Hci_LeReadPhy</a>
 <LI><a href="#[31e]">Hci_LeReadSuggestedDefaultDataLength</a>
 <LI><a href="#[266]">Hci_LeReadWhiteListSize</a>
 <LI><a href="#[294]">Hci_LeRemoteConnectionParameterRequestNegativeReply</a>
 <LI><a href="#[295]">Hci_LeRemoteConnectionParameterRequestReply</a>
 <LI><a href="#[20b]">Hci_LeRemoveDeviceFromWhiteList</a>
 <LI><a href="#[259]">Hci_LeSetAddressResolutionEnable</a>
 <LI><a href="#[20c]">Hci_LeSetAdvertisingData</a>
 <LI><a href="#[26d]">Hci_LeSetAdvertisingDisable</a>
 <LI><a href="#[26a]">Hci_LeSetAdvertisingEnable</a>
 <LI><a href="#[20d]">Hci_LeSetAdvertisingParameters</a>
 <LI><a href="#[271]">Hci_LeSetDataLength</a>
 <LI><a href="#[25e]">Hci_LeSetDefaultPhy</a>
 <LI><a href="#[31a]">Hci_LeSetEventMask</a>
 <LI><a href="#[25f]">Hci_LeSetPhy</a>
 <LI><a href="#[20e]">Hci_LeSetRandomAddress</a>
 <LI><a href="#[316]">Hci_LeSetResolvablePrivateAddressTimeout</a>
 <LI><a href="#[26f]">Hci_LeSetScanEnable</a>
 <LI><a href="#[20f]">Hci_LeSetScanResponseData</a>
 <LI><a href="#[2d2]">Hci_LeStartEncryption</a>
 <LI><a href="#[31d]">Hci_LeWriteSuggestedDefaultDataLength</a>
 <LI><a href="#[31b]">Hci_ReadBdAddr</a>
 <LI><a href="#[264]">Hci_ReadRssi</a>
 <LI><a href="#[265]">Hci_ReadTransmitPowerLevel</a>
 <LI><a href="#[247]">Hci_RegisterCommandCompleteEventCallback</a>
 <LI><a href="#[248]">Hci_RegisterCommandStatusEventCallback</a>
 <LI><a href="#[249]">Hci_RegisterGenericEventCallback</a>
 <LI><a href="#[298]">Hci_RegisterL2caCallback</a>
 <LI><a href="#[246]">Hci_RegisterLeEventCallback</a>
 <LI><a href="#[2e0]">Hci_RegisterSmCallback</a>
 <LI><a href="#[24d]">Hci_Reset</a>
 <LI><a href="#[210]">Hci_SendAclData</a>
 <LI><a href="#[211]">Hci_SendAclDataWithSegmentation</a>
 <LI><a href="#[a7]">Hci_SendPacketToController</a>
 <LI><a href="#[318]">Hci_SetEventMask</a>
 <LI><a href="#[212]">Host_MsgHandler</a>
 <LI><a href="#[244]">Host_TaskHandler</a>
 <LI><a href="#[1a2]">InternalBle_Initialize</a>
 <LI><a href="#[226]">InternalGap_AcceptPairingRequest</a>
 <LI><a href="#[230]">InternalGap_AddDeviceToWhiteList</a>
 <LI><a href="#[251]">InternalGap_AutoConnectWithPra</a>
 <LI><a href="#[1ce]">InternalGap_CheckIndicationStatus</a>
 <LI><a href="#[1d0]">InternalGap_CheckNotificationStatus</a>
 <LI><a href="#[22f]">InternalGap_ClearWhiteList</a>
 <LI><a href="#[255]">InternalGap_Connect</a>
 <LI><a href="#[232]">InternalGap_CreateRandomAddress</a>
 <LI><a href="#[224]">InternalGap_DefaultPair</a>
 <LI><a href="#[22c]">InternalGap_DenyLongTermKey</a>
 <LI><a href="#[22d]">InternalGap_Disconnect</a>
 <LI><a href="#[23a]">InternalGap_EnableControllerPrivacy</a>
 <LI><a href="#[238]">InternalGap_EnableHostPrivacy</a>
 <LI><a href="#[25a]">InternalGap_EnterPasskey</a>
 <LI><a href="#[237]">InternalGap_HandleSmCheckResult</a>
 <LI><a href="#[240]">InternalGap_LeReadPhy</a>
 <LI><a href="#[23d]">InternalGap_LeScGetLocalOobData</a>
 <LI><a href="#[23b]">InternalGap_LeScRegeneratePublicKey</a>
 <LI><a href="#[23f]">InternalGap_LeScSendKeypressNotification</a>
 <LI><a href="#[23e]">InternalGap_LeScSetPeerOobData</a>
 <LI><a href="#[23c]">InternalGap_LeScValidateNumericValue</a>
 <LI><a href="#[241]">InternalGap_LeSetPhy</a>
 <LI><a href="#[260]">InternalGap_PostSmCheckResult</a>
 <LI><a href="#[1c3]">InternalGap_PrivacyCallbackHandler</a>
 <LI><a href="#[22b]">InternalGap_ProvideLongTermKey</a>
 <LI><a href="#[228]">InternalGap_ProvideOob</a>
 <LI><a href="#[233]">InternalGap_ReadPublicAddress</a>
 <LI><a href="#[234]">InternalGap_ReadRadioPowerLevel</a>
 <LI><a href="#[22e]">InternalGap_ReadWhiteListSize</a>
 <LI><a href="#[22a]">InternalGap_RejectKeyExchangeRequest</a>
 <LI><a href="#[227]">InternalGap_RejectPairingRequest</a>
 <LI><a href="#[231]">InternalGap_RemoveDeviceFromWhiteList</a>
 <LI><a href="#[243]">InternalGap_SendSingleAdvertisement</a>
 <LI><a href="#[225]">InternalGap_SendSlaveSecurityRequest</a>
 <LI><a href="#[229]">InternalGap_SendSmpKeys</a>
 <LI><a href="#[221]">InternalGap_SetAdvertisingData</a>
 <LI><a href="#[220]">InternalGap_SetAdvertisingParameters</a>
 <LI><a href="#[236]">InternalGap_SetRandomAddress</a>
 <LI><a href="#[222]">InternalGap_StartAdvertising</a>
 <LI><a href="#[223]">InternalGap_StopAdvertising</a>
 <LI><a href="#[26e]">InternalGap_StopScanning</a>
 <LI><a href="#[239]">InternalGap_UpdateLeDataLength</a>
 <LI><a href="#[235]">InternalGap_VerifyPrivateResolvableAddress</a>
 <LI><a href="#[273]">InternalGattServer_Init</a>
 <LI><a href="#[1f5]">InternalGattServer_RegisterCallback</a>
 <LI><a href="#[1f7]">InternalGattServer_RegisterHandlesForWriteNotifications</a>
 <LI><a href="#[21b]">InternalGattServer_SendAttributeReadStatus</a>
 <LI><a href="#[21a]">InternalGattServer_SendAttributeWrittenStatus</a>
 <LI><a href="#[21d]">InternalGattServer_SendIndication</a>
 <LI><a href="#[21f]">InternalGattServer_SendInstantIndication</a>
 <LI><a href="#[21e]">InternalGattServer_SendInstantNotification</a>
 <LI><a href="#[21c]">InternalGattServer_SendNotification</a>
 <LI><a href="#[1df]">InternalGatt_GetMtu</a>
 <LI><a href="#[1fc]">InternalGatt_Init</a>
 <LI><a href="#[1ae]">IsNonZeroAddress</a>
 <LI><a href="#[215]">L2caRm_CancelConnection</a>
 <LI><a href="#[213]">L2caRm_ConnectLePsm</a>
 <LI><a href="#[27b]">L2caRm_DisconnectChannel</a>
 <LI><a href="#[214]">L2caRm_DisconnectLePsm</a>
 <LI><a href="#[28d]">L2caRm_GetCbChannelByCids</a>
 <LI><a href="#[289]">L2caRm_GetCbChannelByDstCid</a>
 <LI><a href="#[27f]">L2caRm_GetCbChannelBySrcCid</a>
 <LI><a href="#[27c]">L2caRm_GetLePsmIndex</a>
 <LI><a href="#[279]">L2caRm_GetPendingCbChannel</a>
 <LI><a href="#[205]">L2caRm_HandleRecvData</a>
 <LI><a href="#[206]">L2caRm_HandleRecvLeCbData</a>
 <LI><a href="#[283]">L2caRm_HandleSendData</a>
 <LI><a href="#[216]">L2caRm_HandleSendLeCbData</a>
 <LI><a href="#[27d]">L2caRm_ReserveNextAvailableChannel</a>
 <LI><a href="#[287]">L2caRm_ResumeChannelsOnConn</a>
 <LI><a href="#[284]">L2caRm_SendLeCbData</a>
 <LI><a href="#[286]">L2caRm_SuspendChannelsOnConn</a>
 <LI><a href="#[315]">L2ca_Config</a>
 <LI><a href="#[217]">L2ca_ConnectionParameterUpdateRequest</a>
 <LI><a href="#[218]">L2ca_ConnectionParameterUpdateResponse</a>
 <LI><a href="#[288]">L2ca_HandleCommandReject</a>
 <LI><a href="#[28a]">L2ca_HandleConnectionParameterUpdateRequest</a>
 <LI><a href="#[28b]">L2ca_HandleConnectionParameterUpdateResponse</a>
 <LI><a href="#[28c]">L2ca_HandleDisconnectRequest</a>
 <LI><a href="#[28f]">L2ca_HandleDisconnectResponse</a>
 <LI><a href="#[290]">L2ca_HandleLeCbConnectionRequest</a>
 <LI><a href="#[292]">L2ca_HandleLeCbConnectionResponse</a>
 <LI><a href="#[1fe]">L2ca_HandleLeConnectionUpdateComplete</a>
 <LI><a href="#[293]">L2ca_HandleLeFlowControlCredit</a>
 <LI><a href="#[207]">L2ca_HandleLeRemoteConnectionParameterRequest</a>
 <LI><a href="#[204]">L2ca_HandleRecvSignaling</a>
 <LI><a href="#[7c]">L2ca_HciEventCallback</a>
 <LI><a href="#[24a]">L2ca_Init</a>
 <LI><a href="#[296]">L2ca_InitRm</a>
 <LI><a href="#[297]">L2ca_InitSignaling</a>
 <LI><a href="#[299]">L2ca_NotifyConnection</a>
 <LI><a href="#[29a]">L2ca_NotifyDisconnection</a>
 <LI><a href="#[7b]">L2ca_RecvDataCallback</a>
 <LI><a href="#[2e2]">L2ca_RegisterAttCallback</a>
 <LI><a href="#[2df]">L2ca_RegisterSmpCallback</a>
 <LI><a href="#[29b]">L2ca_SendAttData</a>
 <LI><a href="#[282]">L2ca_SendCommandReject</a>
 <LI><a href="#[280]">L2ca_SendDisconnectRequest</a>
 <LI><a href="#[28e]">L2ca_SendDisconnectResponse</a>
 <LI><a href="#[27e]">L2ca_SendLeCbConnectionRequest</a>
 <LI><a href="#[27a]">L2ca_SendLeCbConnectionResponse</a>
 <LI><a href="#[219]">L2ca_SendLeFlowControlCredit</a>
 <LI><a href="#[29c]">L2ca_SendSmpData</a>
 <LI><a href="#[1c8]">MultiplyBigHexModP256</a>
 <LI><a href="#[c]">OSC_IRQHandler</a>
 <LI><a href="#[29d]">SmBuildPacket_SmpKeyDistEncryptionInformation</a>
 <LI><a href="#[29f]">SmBuildPacket_SmpKeyDistIdentityAddressInformation</a>
 <LI><a href="#[2a0]">SmBuildPacket_SmpKeyDistIdentityInformation</a>
 <LI><a href="#[2a1]">SmBuildPacket_SmpKeyDistMasterIdentification</a>
 <LI><a href="#[2a2]">SmBuildPacket_SmpKeyDistSigningInformation</a>
 <LI><a href="#[2a3]">SmBuildPacket_SmpKeypressNotification</a>
 <LI><a href="#[2a4]">SmBuildPacket_SmpPairingConfirm</a>
 <LI><a href="#[2a5]">SmBuildPacket_SmpPairingDHKeyCheck</a>
 <LI><a href="#[2a6]">SmBuildPacket_SmpPairingFailed</a>
 <LI><a href="#[2a7]">SmBuildPacket_SmpPairingPublicKey</a>
 <LI><a href="#[2a8]">SmBuildPacket_SmpPairingRandom</a>
 <LI><a href="#[2a9]">SmBuildPacket_SmpPairingRequestRespose</a>
 <LI><a href="#[2aa]">SmBuildPacket_SmpSecurityRequest</a>
 <LI><a href="#[2ab]">SmCrypto_AES128</a>
 <LI><a href="#[2ac]">SmCrypto_ComputeDataSignature</a>
 <LI><a href="#[2ae]">SmCrypto_SmpAh</a>
 <LI><a href="#[2af]">SmCrypto_SmpC1</a>
 <LI><a href="#[2b0]">SmCrypto_SmpF4</a>
 <LI><a href="#[2b2]">SmCrypto_SmpF5</a>
 <LI><a href="#[2b3]">SmCrypto_SmpF6</a>
 <LI><a href="#[2b4]">SmCrypto_SmpG2</a>
 <LI><a href="#[2b5]">SmCrypto_SmpS1</a>
 <LI><a href="#[29e]">SmDebug_LogFnc</a>
 <LI><a href="#[2d1]">SmStates_CallLlStateMachine</a>
 <LI><a href="#[2d7]">SmStates_CallTbStateMachine</a>
 <LI><a href="#[2d8]">SmStates_CmdRequiresDeviceHandle</a>
 <LI><a href="#[2dc]">SmStates_RunStateMachine</a>
 <LI><a href="#[2c3]">SmUnpack_SmpKeyDistEncryptionInformation</a>
 <LI><a href="#[2c6]">SmUnpack_SmpKeyDistIdentityAddressInformation</a>
 <LI><a href="#[2c5]">SmUnpack_SmpKeyDistIdentityInformation</a>
 <LI><a href="#[2c4]">SmUnpack_SmpKeyDistMasterIdentification</a>
 <LI><a href="#[2c7]">SmUnpack_SmpKeyDistSigningInformation</a>
 <LI><a href="#[2ce]">SmUnpack_SmpPairingConfirm</a>
 <LI><a href="#[2cc]">SmUnpack_SmpPairingDHKeyCheck</a>
 <LI><a href="#[2da]">SmUnpack_SmpPairingFailed</a>
 <LI><a href="#[2c8]">SmUnpack_SmpPairingPublicKey</a>
 <LI><a href="#[2cb]">SmUnpack_SmpPairingRandom</a>
 <LI><a href="#[2b9]">SmUnpack_SmpPairingRequestResponse</a>
 <LI><a href="#[2bd]">SmUnpack_SmpSecurityRequest</a>
 <LI><a href="#[2d4]">Sm_GetActivePeerDeviceSecProperties</a>
 <LI><a href="#[200]">Sm_HciCbEventHandler</a>
 <LI><a href="#[7f]">Sm_HciEventCallback</a>
 <LI><a href="#[24b]">Sm_Init</a>
 <LI><a href="#[7e]">Sm_L2caCbMsgHandler</a>
 <LI><a href="#[24f]">Sm_SendCmd</a>
 <LI><a href="#[2bb]">Sm_SendEventToUpperLayer</a>
 <LI><a href="#[2b6]">Sm_SendPacketToL2cap</a>
 <LI><a href="#[7d]">Sm_TimerCallback</a>
 <LI><a href="#[242]">Sm_TimerCbEventHandler</a>
 <LI><a href="#[1ca]">SubtractBigHexMod256</a>
 <LI><a href="#[2e1]">SubtractFromSelfBigHexSign256</a>
 <LI><a href="#[189]">att_InitializeInternalCallback</a>
 <LI><a href="#[2e3]">att_ResponseReceived</a>
 <LI><a href="#[81]">att_TimerCallback</a>
 <LI><a href="#[80]">att_l2caCbMsgHandler</a>
 <LI><a href="#[2e4]">bigHexInversion256</a>
 <LI><a href="#[1e2]">checkAttributeAccess</a>
 <LI><a href="#[2e8]">ecc_gen_new_secret_key</a>
 <LI><a href="#[2ea]">ecc_init</a>
 <LI><a href="#[2f4]">em_buf_init</a>
 <LI><a href="#[2f6]">gap_addNextAutoConnectAddressInWhiteList</a>
 <LI><a href="#[2f8]">gap_advertisingDataSet</a>
 <LI><a href="#[2fb]">gap_autoConnectIrkCheckComplete</a>
 <LI><a href="#[291]">gap_checkConnectionSecurity</a>
 <LI><a href="#[2fc]">gap_checkForAutoConnect</a>
 <LI><a href="#[2e5]">gap_checkSecurityForDatabaseAccess</a>
 <LI><a href="#[302]">gap_cm_handleSignedWriteCommand</a>
 <LI><a href="#[25b]">gap_cm_irkCheckComplete</a>
 <LI><a href="#[303]">gap_cm_notifyConnectedDevice</a>
 <LI><a href="#[25c]">gap_cm_signatureVerificationComplete</a>
 <LI><a href="#[272]">gap_cm_verifyPraAtAppRequest</a>
 <LI><a href="#[305]">gap_discoveryFilterMatch</a>
 <LI><a href="#[2f7]">gap_enableScanning</a>
 <LI><a href="#[2f9]">gap_scanRspDataSet</a>
 <LI><a href="#[307]">gap_scanningParametersSet</a>
 <LI><a href="#[308]">gap_sendLocalPasskey</a>
 <LI><a href="#[26b]">gap_triggerAdvertisingCallback</a>
 <LI><a href="#[250]">gap_triggerConnectionCallback</a>
 <LI><a href="#[1c1]">gap_triggerGenericCallback</a>
 <LI><a href="#[270]">gap_triggerScanningCallback</a>
 <LI><a href="#[320]">gattServer_resetProcedureForDeviceId</a>
 <LI><a href="#[30d]">h4tl_init</a>
 <LI><a href="#[3ec]">h4tl_start</a>
 <LI><a href="#[311]">h4tl_write</a>
 <LI><a href="#[79]">handleClientTimeout</a>
 <LI><a href="#[304]">handleVerifiedSignedWriteCommand</a>
 <LI><a href="#[67]">hciCommandCompleteCallback</a>
 <LI><a href="#[1ff]">hciCommandCompleteCbMsgHandler</a>
 <LI><a href="#[68]">hciCommandStatusCallback</a>
 <LI><a href="#[202]">hciCommandStatusCbMsgHandler</a>
 <LI><a href="#[69]">hciGenericCallback</a>
 <LI><a href="#[203]">hciGenericCbMsgHandler</a>
 <LI><a href="#[66]">hciLeCallback</a>
 <LI><a href="#[201]">hciLeCbMsgHandler</a>
 <LI><a href="#[30f]">hci_acl_tx_data_received</a>
 <LI><a href="#[309]">hci_cmd_get_max_param_size</a>
 <LI><a href="#[30c]">hci_cmd_received</a>
 <LI><a href="#[f3]">hci_command_handler</a>
 <LI><a href="#[30a]">hci_send_2_host</a>
 <LI><a href="#[33d]">hci_tl_send</a>
 <LI><a href="#[2f2]">ke_event_set</a>
 <LI><a href="#[2f1]">ke_msg_send</a>
 <LI><a href="#[345]">llc_ch_assess_get_local_ch_map</a>
 <LI><a href="#[34a]">llc_ch_assess_reass_ch</a>
 <LI><a href="#[352]">llc_con_update_complete_send</a>
 <LI><a href="#[353]">llc_con_update_finished</a>
 <LI><a href="#[355]">llc_con_update_ind</a>
 <LI><a href="#[361]">llc_end_evt_defer</a>
 <LI><a href="#[365]">llc_init</a>
 <LI><a href="#[347]">llc_llcp_ch_map_update_pdu_send</a>
 <LI><a href="#[34f]">llc_llcp_con_param_req_pdu_send</a>
 <LI><a href="#[36a]">llc_llcp_con_param_rsp_pdu_send</a>
 <LI><a href="#[34d]">llc_llcp_con_update_pdu_send</a>
 <LI><a href="#[35f]">llc_llcp_enc_req_pdu_send</a>
 <LI><a href="#[358]">llc_llcp_enc_rsp_pdu_send</a>
 <LI><a href="#[3cb]">llc_llcp_get_autorize</a>
 <LI><a href="#[367]">llc_llcp_length_req_pdu_send</a>
 <LI><a href="#[35d]">llc_llcp_pause_enc_req_pdu_send</a>
 <LI><a href="#[35c]">llc_llcp_pause_enc_rsp_pdu_send</a>
 <LI><a href="#[36c]">llc_llcp_phy_req_pdu_send</a>
 <LI><a href="#[36d]">llc_llcp_phy_upd_ind_pdu_send</a>
 <LI><a href="#[344]">llc_llcp_ping_req_pdu_send</a>
 <LI><a href="#[36e]">llc_llcp_recv_handler</a>
 <LI><a href="#[35b]">llc_llcp_reject_ind_pdu_send</a>
 <LI><a href="#[35a]">llc_llcp_start_enc_req_pdu_send</a>
 <LI><a href="#[35e]">llc_llcp_start_enc_rsp_pdu_send</a>
 <LI><a href="#[360]">llc_llcp_terminate_ind_pdu_send</a>
 <LI><a href="#[370]">llc_lsto_con_update</a>
 <LI><a href="#[371]">llc_pdu_defer</a>
 <LI><a href="#[373]">llc_pdu_llcp_tx_ack_defer</a>
 <LI><a href="#[379]">llc_phy_update_complete_send</a>
 <LI><a href="#[375]">llc_phy_update_finished</a>
 <LI><a href="#[37a]">llc_reset</a>
 <LI><a href="#[37c]">llc_start</a>
 <LI><a href="#[380]">llc_stop</a>
 <LI><a href="#[357]">llc_util_dicon_procedure</a>
 <LI><a href="#[38a]">lld_adv_start</a>
 <LI><a href="#[382]">lld_ch_map_ind</a>
 <LI><a href="#[34e]">lld_con_param_req</a>
 <LI><a href="#[383]">lld_con_param_rsp</a>
 <LI><a href="#[395]">lld_con_start</a>
 <LI><a href="#[34c]">lld_con_update_after_param_req</a>
 <LI><a href="#[384]">lld_con_update_ind</a>
 <LI><a href="#[351]">lld_con_update_req</a>
 <LI><a href="#[38b]">lld_evt_adv_create</a>
 <LI><a href="#[93]">lld_evt_canceled</a>
 <LI><a href="#[9a]">lld_evt_deffered_elt_handler</a>
 <LI><a href="#[38e]">lld_evt_elt_insert</a>
 <LI><a href="#[192]">lld_evt_end_isr</a>
 <LI><a href="#[3ab]">lld_evt_init</a>
 <LI><a href="#[3af]">lld_evt_move_to_master</a>
 <LI><a href="#[3b4]">lld_evt_move_to_slave</a>
 <LI><a href="#[3a0]">lld_evt_restart</a>
 <LI><a href="#[193]">lld_evt_rx_isr</a>
 <LI><a href="#[3b8]">lld_evt_scan_create</a>
 <LI><a href="#[92]">lld_evt_schedule</a>
 <LI><a href="#[369]">lld_evt_schedule_next</a>
 <LI><a href="#[39d]">lld_evt_slave_update</a>
 <LI><a href="#[39e]">lld_evt_update_create</a>
 <LI><a href="#[3bd]">lld_init</a>
 <LI><a href="#[3c0]">lld_move_to_master</a>
 <LI><a href="#[3c1]">lld_move_to_slave</a>
 <LI><a href="#[3a2]">lld_pdu_check</a>
 <LI><a href="#[3aa]">lld_pdu_rx_handler</a>
 <LI><a href="#[3c5]">lld_pdu_send_packet</a>
 <LI><a href="#[3ba]">lld_pdu_tx_prog</a>
 <LI><a href="#[3cd]">lld_scan_start</a>
 <LI><a href="#[3ce]">lld_sleep_wakeup</a>
 <LI><a href="#[363]">lld_util_anchor_point_move</a>
 <LI><a href="#[368]">lld_util_instant_get</a>
 <LI><a href="#[378]">lld_util_phy_update_req</a>
 <LI><a href="#[398]">lld_util_priority_set</a>
 <LI><a href="#[328]">llm_common_cmd_complete_send</a>
 <LI><a href="#[3d1]">llm_con_req_ind</a>
 <LI><a href="#[3d6]">llm_con_req_tx_cfm</a>
 <LI><a href="#[326]">llm_create_con</a>
 <LI><a href="#[9f]">llm_encryption_done</a>
 <LI><a href="#[327]">llm_encryption_start</a>
 <LI><a href="#[3da]">llm_init</a>
 <LI><a href="#[3dc]">llm_le_adv_report_ind</a>
 <LI><a href="#[3c3]">llm_pdu_defer</a>
 <LI><a href="#[333]">llm_set_adv_en</a>
 <LI><a href="#[334]">llm_set_adv_param</a>
 <LI><a href="#[329]">llm_set_privacy_mode</a>
 <LI><a href="#[336]">llm_set_scan_en</a>
 <LI><a href="#[339]">llm_test_mode_start_rx</a>
 <LI><a href="#[338]">llm_test_mode_start_tx</a>
 <LI><a href="#[3b9]">llm_util_adv_data_update</a>
 <LI><a href="#[3e1]">rwble_init</a>
 <LI><a href="#[3e2]">rwble_reset</a>
 <LI><a href="#[19c]">rwip_init</a>
 <LI><a href="#[3cf]">rwip_lpcycles_2_us</a>
 <LI><a href="#[33c]">rwip_reset</a>
 <LI><a href="#[197]">rwip_wakeup</a>
 <LI><a href="#[6a]">smCallback</a>
 <LI><a href="#[1cb]">specialModP256</a>
 <LI><a href="#[3d9]">sw_aes</a>
 <LI><a href="#[7a]">L2caRm_LinkConnectionTimerCallback</a>
 <LI><a href="#[19e]">Hci_RecvFragmentOfPacket</a>
 <LI><a href="#[1f0]">gattDb_getCharacteristicEndIndex</a>
 <LI><a href="#[f0]">llm_enc_req_handler</a>
 <LI><a href="#[c9]">llc_llcp_rsp_to_ind_handler</a>
 <LI><a href="#[c6]">llc_link_sup_to_ind_handler</a>
 <LI><a href="#[d4]">llc_data_ind_handler</a>
 <LI><a href="#[d1]">llc_llcp_recv_ind_handler</a>
 <LI><a href="#[cf]">llc_phy_upd_req_ind_handler</a>
 <LI><a href="#[ce]">llc_chmap_update_req_ind_handler</a>
 <LI><a href="#[cd]">llc_con_upd_req_ind_handler</a>
 <LI><a href="#[cc]">llc_length_req_ind_handler</a>
 <LI><a href="#[ca]">llc_chnl_assess_timer_handler</a>
 <LI><a href="#[c7]">llc_auth_payl_nearly_to_ind_handler</a>
 <LI><a href="#[c5]">lld_stop_ind_handler</a>
 <LI><a href="#[cb]">llc_enc_mgt_ind_handler</a>
 <LI><a href="#[2de]">Sm_ConnHandleToDeviceHandle</a>
 <LI><a href="#[313]">isControlPointHandle</a>
 <LI><a href="#[78]">handleUnsupportedOpcode</a>
 <LI><a href="#[312]">validateAttWriteParams</a>
 <LI><a href="#[76]">handleClientSignedWriteCommand</a>
 <LI><a href="#[74]">handleClientWriteRequest</a>
 <LI><a href="#[73]">handleClientReadByGroupTypeRequest</a>
 <LI><a href="#[72]">handleClientReadMultipleRequest</a>
 <LI><a href="#[71]">handleClientReadBlobRequest</a>
 <LI><a href="#[70]">handleClientReadRequest</a>
 <LI><a href="#[6f]">handleClientReadByTypeRequest</a>
 <LI><a href="#[6e]">handleClientFindByTypeValueRequest</a>
 <LI><a href="#[6d]">handleClientFindInformationRequest</a>
 <LI><a href="#[6c]">handleClientExchangeMtuRequest</a>
 <LI><a href="#[277]">handleSendNotificationIndication</a>
 <LI><a href="#[77]">handleClientHandleValueConfirmation</a>
 <LI><a href="#[75]">handleClientWriteCommand</a>
 <LI><a href="#[278]">handleSendInstantNotificationIndication</a>
 <LI><a href="#[306]">findFlagsAdValue</a>
 <LI><a href="#[65]">privacyTimeout</a>
 <LI><a href="#[2fa]">gap_autoConnectCheckNextIrk</a>
 <LI><a href="#[24e]">deriveSmPairingParamsFromGapParams.isra.1</a>
 <LI><a href="#[267]">terminatePairing</a>
 <LI><a href="#[6b]">ldmTimeout</a>
 <LI><a href="#[1c0]">EnableHostPrivacyTimer</a>
 <LI><a href="#[2e7]">getGapKeyFlags</a>
 <LI><a href="#[2e6]">convertPairingParamsSm2Gap</a>
 <LI><a href="#[1ad]">nvmIsEntryOccupied</a>
 <LI><a href="#[187]">att_indexForDeviceId</a>
 <LI><a href="#[17a]">att_SendData</a>
 <LI><a href="#[115]">hci_le_enh_privacy_mgmt_cmd_handler</a>
 <LI><a href="#[10c]">hci_rd_local_ver_info_cmd_handler</a>
 <LI><a href="#[10a]">hci_reset_cmd_handler</a>
 <LI><a href="#[109]">hci_le_test_mode_mngt_cmd_handler</a>
 <LI><a href="#[103]">hci_le_enc_cmd_handler</a>
 <LI><a href="#[100]">hci_le_set_host_ch_class_cmd_handler</a>
 <LI><a href="#[fe]">hci_le_create_con_cmd_handler</a>
 <LI><a href="#[fd]">hci_le_set_scan_en_cmd_handler</a>
 <LI><a href="#[fb]">hci_le_set_scan_rsp_data_cmd_handler</a>
 <LI><a href="#[fa]">hci_le_set_adv_en_cmd_handler</a>
 <LI><a href="#[f9]">hci_le_set_adv_data_cmd_handler</a>
 <LI><a href="#[f7]">hci_le_set_adv_param_cmd_handler</a>
 <LI><a href="#[36b]">llc_llcp_send</a>
 <LI><a href="#[e8]">llcp_ping_rsp_handler</a>
 <LI><a href="#[dd]">llcp_feats_req_handler</a>
 <LI><a href="#[d9]">llcp_enc_rsp_handler</a>
 <LI><a href="#[d7]">llcp_terminate_ind_handler</a>
 <LI><a href="#[e6]">llcp_reject_ind_ext_handler</a>
 <LI><a href="#[e1]">llcp_vers_ind_handler</a>
 <LI><a href="#[df]">llcp_pause_enc_req_handler</a>
 <LI><a href="#[da]">llcp_start_enc_req_handler</a>
 <LI><a href="#[d8]">llcp_enc_req_handler</a>
 <LI><a href="#[dc]">llcp_unknown_rsp_handler</a>
 <LI><a href="#[e9]">llcp_length_req_handler</a>
 <LI><a href="#[db]">llcp_start_enc_rsp_handler</a>
 <LI><a href="#[e0]">llcp_pause_enc_rsp_handler</a>
 <LI><a href="#[e2]">llcp_reject_ind_handler</a>
 <LI><a href="#[de]">llcp_feats_rsp_handler</a>
 <LI><a href="#[ec]">llcp_phy_rsp_handler</a>
 <LI><a href="#[e7]">llcp_ping_req_handler</a>
 <LI><a href="#[ea]">llcp_length_rsp_handler</a>
 <LI><a href="#[ed]">llcp_phy_upd_ind_handler</a>
 <LI><a href="#[e5]">llcp_con_param_rsp_handler</a>
 <LI><a href="#[d6]">llcp_channel_map_ind_handler</a>
 <LI><a href="#[d5]">llcp_con_upd_ind_handler</a>
 <LI><a href="#[eb]">llcp_phy_req_handler</a>
 <LI><a href="#[e4]">llcp_con_param_req_handler</a>
 <LI><a href="#[82]">ecc_multiplication_event_handler</a>
 <LI><a href="#[89]">h4tl_tx_done</a>
 <LI><a href="#[86]">h4tl_tx_evt_handler</a>
 <LI><a href="#[88]">h4tl_cmd_pld_rx_evt_handler</a>
 <LI><a href="#[85]">h4tl_rx_done</a>
 <LI><a href="#[87]">h4tl_cmd_hdr_rx_evt_handler</a>
 <LI><a href="#[2be]">SmStates_CheckIfLinkEncryptionHciEvent</a>
 <LI><a href="#[2bf]">Sm_KeyDistDeteminePacketList</a>
 <LI><a href="#[121]">SmState_Unexpected</a>
 <LI><a href="#[2c0]">SmStates_BuildAndSendPairingCompleteEvent</a>
 <LI><a href="#[2ca]">Sm_GeneratePasskey</a>
 <LI><a href="#[2b8]">SmStates_GeneratePairingFailedPacketAndEvent</a>
 <LI><a href="#[2bc]">SmStates_HandleInvalidUnknownPacket</a>
 <LI><a href="#[2c1]">SmStates_HandleRemotePairingFailure</a>
 <LI><a href="#[2ba]">SmStates_CheckIfPairingReqCanSatisfyAuthRequirements</a>
 <LI><a href="#[11a]">SmState_Idle</a>
 <LI><a href="#[2cd]">SmStates_GenerateLeScPkERi</a>
 <LI><a href="#[2d0]">SmStates_GenerateEcdhKeyPairAndOobRAndOobCr</a>
 <LI><a href="#[2c2]">SmStates_HandleUnexpectedPacket.isra.4</a>
 <LI><a href="#[127]">SmState_WaitForLeScKeyConfirmAndInitiatorDhKeyCheck</a>
 <LI><a href="#[126]">SmState_WaitForLeScOobDataAndInitiatorNonce</a>
 <LI><a href="#[125]">SmState_WaitForLeScPkEInitiatorNoncei</a>
 <LI><a href="#[124]">SmState_WaitForLeScPkEPasskeyAndInitiatorCri</a>
 <LI><a href="#[123]">SmState_WaitForLeScJwInitiatorNonce</a>
 <LI><a href="#[122]">SmState_WaitForInitiatorPublicKey</a>
 <LI><a href="#[120]">SmState_WaitForInitiatorKeysDist</a>
 <LI><a href="#[11f]">SmState_ResponderWaitForUlKeysetResponse</a>
 <LI><a href="#[11e]">SmState_WaitForMasterStkEncryption</a>
 <LI><a href="#[11d]">SmState_WaitForMrand</a>
 <LI><a href="#[11c]">SmState_WaitForTKeyAndMconfirm</a>
 <LI><a href="#[11b]">SmState_WaitForPairingResponseParams</a>
 <LI><a href="#[2d6]">SmStates_SmpIdleStateCleanup</a>
 <LI><a href="#[2d5]">SmStates_CallSmpStateMachine</a>
 <LI><a href="#[2db]">SmStates_HandleSmDeviceGlobalMessages.isra.8</a>
 <LI><a href="#[1dd]">findNextDbIndexFor16BitUuidAndValue</a>
 <LI><a href="#[1ec]">writeAttribute</a>
 <LI><a href="#[1e3]">readPartAttributeValue</a>
 <LI><a href="#[1e7]">findNextDbIndexForReadByGroupTypeUuid</a>
 <LI><a href="#[1e9]">findNextDbIndexForReadByTypeUuid</a>
 <LI><a href="#[301]">gap_cm_checkNextIrk</a>
 <LI><a href="#[300]">verifySignature</a>
 <LI><a href="#[2ff]">gap_cm_checkNextCsrk</a>
 <LI><a href="#[9b]">lld_evt_delete_elt_handler</a>
 <LI><a href="#[3b6]">lld_evt_winsize_change</a>
 <LI><a href="#[3a1]">lld_evt_deferred_elt_push</a>
 <LI><a href="#[2dd]">Sm_ValidateSmpPacketTypeAndLength.isra.0</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">NMI_Handler</a><BR>
 <LI><a href="#[3]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">HardFault_Handler</a><BR>
 <LI><a href="#[4]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">BusFault_Handler</a><BR>
 <LI><a href="#[6]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">SVC_Handler</a><BR>
 <LI><a href="#[8]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">DebugMon_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysTick_Handler</a><BR>
 <LI><a href="#[3a]">ACMP0_DriverIRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a]">ACMP0_DriverIRQHandler</a><BR>
 <LI><a href="#[50e]">__NvSyncSave</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4a8]">NvAddSaveRequestToQueue</a><BR>
 <LI><a href="#[4c8]">__NvAtomicSave</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4a8]">NvAddSaveRequestToQueue</a><BR>
 <LI><a href="#[4aa]">NvProcessFirstSaveInQueue</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4a8]">NvAddSaveRequestToQueue</a><BR>
 <LI><a href="#[1c0]">EnableHostPrivacyTimer</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c3]">InternalGap_PrivacyCallbackHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[3a]">ACMP0_DriverIRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[d]">ACMP0_IRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[3b]">ACMP1_DriverIRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[e]">ACMP1_IRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[56]">ADC_DriverIRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[29]">ADC_IRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[12e]">APP_PlfReset</a> from qnble.o(.text.APP_PlfReset) referenced from controller_config.o(.data)
 <LI><a href="#[a2]">App_AdvertisingCallback</a> from applmain.o(i.App_AdvertisingCallback) referenced from applmain.o(i.App_StartAdvertising)
 <LI><a href="#[a1]">App_ConnectionCallback</a> from applmain.o(i.App_ConnectionCallback) referenced from applmain.o(i.App_StartAdvertising)
 <LI><a href="#[a0]">App_GattServerCallback</a> from applmain.o(i.App_GattServerCallback) referenced from applmain.o(i.App_RegisterGattServerCallback)
 <LI><a href="#[b4]">App_GenericCallback</a> from applmain.o(i.App_GenericCallback) referenced from applmain.o(i.main_task)
 <LI><a href="#[12d]">App_Idle_Task</a> from applmain.o(i.App_Idle_Task) referenced from applmain.o(.data)
 <LI><a href="#[b2]">App_KeyboardCallBack</a> from applmain.o(i.App_KeyboardCallBack) referenced from applmain.o(i.main_task)
 <LI><a href="#[4d]">BLE_DriverIRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[60]">BLE_FREQ_HOP_DriverIRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[33]">BLE_FREQ_HOP_IRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[20]">BLE_IRQHandler</a> from rwble.o(.text.BLE_IRQHandler) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[5f]">BLE_RX_DriverIRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[32]">BLE_RX_IRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[b3]">BLE_SignalFromISRCallback</a> from applmain.o(i.BLE_SignalFromISRCallback) referenced from applmain.o(i.main_task)
 <LI><a href="#[5e]">BLE_TX_DriverIRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[31]">BLE_TX_IRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[61]">BOD_DriverIRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[34]">BOD_IRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[a5]">BleApp_AdvertisingCallback</a> from mijia_profile_server.o(i.BleApp_AdvertisingCallback) referenced from mijia_profile_server.o(i.BleApp_GenericCallback)
 <LI><a href="#[a4]">BleApp_ConnectionCallback</a> from mijia_profile_server.o(i.BleApp_ConnectionCallback) referenced from mijia_profile_server.o(i.BleApp_GenericCallback)
 <LI><a href="#[a3]">BleApp_GattServerCallback</a> from mijia_profile_server.o(i.BleApp_GattServerCallback) referenced from mijia_profile_server.o(i.BleApp_Config)
 <LI><a href="#[a6]">Ble_HciRecv</a> from hci_commands.o(.text.Ble_HciRecv) referenced from ble_init.o(i.Ble_Initialize)
 <LI><a href="#[5]">BusFault_Handler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[5d]">CALIB_DriverIRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[30]">CALIB_IRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[3f]">CS_DriverIRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[12]">CS_IRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[3e]">CS_WAKEUP_DriverIRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[11]">CS_WAKEUP_IRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[51]">CTIMER0_DriverIRQHandler</a> from fsl_ctimer.o(i.CTIMER0_DriverIRQHandler) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[24]">CTIMER0_IRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[52]">CTIMER1_DriverIRQHandler</a> from fsl_ctimer.o(i.CTIMER1_DriverIRQHandler) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[25]">CTIMER1_IRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[53]">CTIMER2_DriverIRQHandler</a> from fsl_ctimer.o(i.CTIMER2_DriverIRQHandler) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[26]">CTIMER2_IRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[54]">CTIMER3_DriverIRQHandler</a> from fsl_ctimer.o(i.CTIMER3_DriverIRQHandler) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[27]">CTIMER3_IRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[12c]">ControllerTask</a> from ble_controller_task.o(i.ControllerTask) referenced from ble_controller_task.o(.data)
 <LI><a href="#[57]">DAC_DriverIRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[2a]">DAC_IRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[42]">DMA0_DriverIRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[15]">DMA0_IRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[a8]">DbgConsole_Putchar</a> from fsl_debug_console.o(i.DbgConsole_Putchar) referenced from fsl_debug_console.o(i.DbgConsole_Printf)
 <LI><a href="#[8]">DebugMon_Handler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[132]">EIF_FlowOff</a> from eif_adapter.o(.text.EIF_FlowOff) referenced from controller_config.o(.data)
 <LI><a href="#[131]">EIF_FlowOn</a> from eif_adapter.o(.text.EIF_FlowOn) referenced from controller_config.o(.data)
 <LI><a href="#[12f]">EIF_Read</a> from eif_adapter.o(.text.EIF_Read) referenced from controller_config.o(.data)
 <LI><a href="#[130]">EIF_Write</a> from eif_adapter.o(.text.EIF_Write) referenced from controller_config.o(.data)
 <LI><a href="#[38]">EXT_GPIO_WAKEUP_DriverIRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[b]">EXT_GPIO_WAKEUP_IRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[59]">FLASH_DriverIRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[2c]">FLASH_IRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[49]">FLEXCOMM0_DriverIRQHandler</a> from fsl_flexcomm.o(i.FLEXCOMM0_DriverIRQHandler) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[1c]">FLEXCOMM0_IRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[4a]">FLEXCOMM1_DriverIRQHandler</a> from fsl_flexcomm.o(i.FLEXCOMM1_DriverIRQHandler) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[1d]">FLEXCOMM1_IRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[4b]">FLEXCOMM2_DriverIRQHandler</a> from fsl_flexcomm.o(i.FLEXCOMM2_DriverIRQHandler) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[1e]">FLEXCOMM2_IRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[4c]">FLEXCOMM3_DriverIRQHandler</a> from fsl_flexcomm.o(i.FLEXCOMM3_DriverIRQHandler) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[1f]">FLEXCOMM3_IRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[4e]">FSP_DriverIRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[21]">FSP_IRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[40]">GPIOA_DriverIRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[13]">GPIOA_IRQHandler</a> from board.o(i.GPIOA_IRQHandler) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[41]">GPIOB_DriverIRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[14]">GPIOB_IRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[a9]">Gpio_CommonIsr</a> from gpio_adapter.o(i.Gpio_CommonIsr) referenced from gpio_adapter.o(i.Gpio_InstallPortISR)
 <LI><a href="#[3]">HardFault_Handler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[a7]">Hci_SendPacketToController</a> from nxp.o(.text.Hci_SendPacketToController) referenced from ble_init.o(i.Ble_Initialize)
 <LI><a href="#[12b]">Host_Task</a> from ble_host_tasks.o(i.Host_Task) referenced from ble_host_tasks.o(.data)
 <LI><a href="#[ae]">KeyScan</a> from keyboard.o(i.KeyScan) referenced from keyboard.o(i.Switch_Press_ISR)
 <LI><a href="#[7a]">L2caRm_LinkConnectionTimerCallback</a> from l2ca_resource_manager.o(.text.L2caRm_LinkConnectionTimerCallback) referenced from l2ca_resource_manager.o(.text.L2caRm_ConnectLePsm)
 <LI><a href="#[7c]">L2ca_HciEventCallback</a> from l2ca_main.o(.text.L2ca_HciEventCallback) referenced from l2ca_main.o(.text.L2ca_Init)
 <LI><a href="#[7b]">L2ca_RecvDataCallback</a> from l2ca_main.o(.text.L2ca_RecvDataCallback) referenced from l2ca_main.o(.text.L2ca_Init)
 <LI><a href="#[ab]">LED_FlashTimeout</a> from led.o(i.LED_FlashTimeout) referenced from led.o(i.LED_StartFlashWithPeriod)
 <LI><a href="#[95]">LLM_AA_CT1</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld.o(.text.lld_con_start)
 <LI><a href="#[96]">LLM_AA_CT2</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld.o(.text.lld_con_start)
 <LI><a href="#[4]">MemManage_Handler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[39]">OSC_DriverIRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[47]">OSC_INT_LOW_DriverIRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[1a]">OSC_INT_LOW_IRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[c]">OSC_IRQHandler</a> from nxp.o(.text.OSC_IRQHandler) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[43]">PIN_INT0_DriverIRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[16]">PIN_INT0_IRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[44]">PIN_INT1_DriverIRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[17]">PIN_INT1_IRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[45]">PIN_INT2_DriverIRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[18]">PIN_INT2_IRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[46]">PIN_INT3_DriverIRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[19]">PIN_INT3_IRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[4f]">QDEC0_DriverIRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[22]">QDEC0_IRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[50]">QDEC1_DriverIRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[23]">QDEC1_IRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[5c]">RNG_DriverIRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[2f]">RNG_IRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[3d]">RTC_FR_DriverIRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[10]">RTC_FR_IRQHandler</a> from board.o(i.RTC_FR_IRQHandler) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[3c]">RTC_SEC_DriverIRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[f]">RTC_SEC_IRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[5b]">SCT0_DriverIRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[2e]">SCT0_IRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[5a]">SPIFI0_DriverIRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[2d]">SPIFI0_IRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[129]">SerialManagerTask</a> from serialmanager.o(i.SerialManagerTask) referenced from serialmanager.o(.data)
 <LI><a href="#[ac]">Serial_UartRxCb</a> from serialmanager.o(i.Serial_UartRxCb) referenced from serialmanager.o(i.Serial_InitInterface)
 <LI><a href="#[ad]">Serial_UartTxCb</a> from serialmanager.o(i.Serial_UartTxCb) referenced from serialmanager.o(i.Serial_InitInterface)
 <LI><a href="#[11a]">SmState_Idle</a> from sm_states.o(.text.SmState_Idle) referenced from sm_states.o(.rodata.smStateTable)
 <LI><a href="#[11f]">SmState_ResponderWaitForUlKeysetResponse</a> from sm_states.o(.text.SmState_ResponderWaitForUlKeysetResponse) referenced from sm_states.o(.rodata.smStateTable)
 <LI><a href="#[121]">SmState_Unexpected</a> from sm_states.o(.text.SmState_Unexpected) referenced 17 times from sm_states.o(.rodata.smStateTable)
 <LI><a href="#[120]">SmState_WaitForInitiatorKeysDist</a> from sm_states.o(.text.SmState_WaitForInitiatorKeysDist) referenced from sm_states.o(.rodata.smStateTable)
 <LI><a href="#[122]">SmState_WaitForInitiatorPublicKey</a> from sm_states.o(.text.SmState_WaitForInitiatorPublicKey) referenced from sm_states.o(.rodata.smStateTable)
 <LI><a href="#[123]">SmState_WaitForLeScJwInitiatorNonce</a> from sm_states.o(.text.SmState_WaitForLeScJwInitiatorNonce) referenced from sm_states.o(.rodata.smStateTable)
 <LI><a href="#[127]">SmState_WaitForLeScKeyConfirmAndInitiatorDhKeyCheck</a> from sm_states.o(.text.SmState_WaitForLeScKeyConfirmAndInitiatorDhKeyCheck) referenced from sm_states.o(.rodata.smStateTable)
 <LI><a href="#[126]">SmState_WaitForLeScOobDataAndInitiatorNonce</a> from sm_states.o(.text.SmState_WaitForLeScOobDataAndInitiatorNonce) referenced from sm_states.o(.rodata.smStateTable)
 <LI><a href="#[125]">SmState_WaitForLeScPkEInitiatorNoncei</a> from sm_states.o(.text.SmState_WaitForLeScPkEInitiatorNoncei) referenced from sm_states.o(.rodata.smStateTable)
 <LI><a href="#[124]">SmState_WaitForLeScPkEPasskeyAndInitiatorCri</a> from sm_states.o(.text.SmState_WaitForLeScPkEPasskeyAndInitiatorCri) referenced from sm_states.o(.rodata.smStateTable)
 <LI><a href="#[11e]">SmState_WaitForMasterStkEncryption</a> from sm_states.o(.text.SmState_WaitForMasterStkEncryption) referenced from sm_states.o(.rodata.smStateTable)
 <LI><a href="#[11d]">SmState_WaitForMrand</a> from sm_states.o(.text.SmState_WaitForMrand) referenced from sm_states.o(.rodata.smStateTable)
 <LI><a href="#[11b]">SmState_WaitForPairingResponseParams</a> from sm_states.o(.text.SmState_WaitForPairingResponseParams) referenced from sm_states.o(.rodata.smStateTable)
 <LI><a href="#[11c]">SmState_WaitForTKeyAndMconfirm</a> from sm_states.o(.text.SmState_WaitForTKeyAndMconfirm) referenced from sm_states.o(.rodata.smStateTable)
 <LI><a href="#[7f]">Sm_HciEventCallback</a> from sm_core.o(.text.Sm_HciEventCallback) referenced from sm_core.o(.text.Sm_Init)
 <LI><a href="#[7e]">Sm_L2caCbMsgHandler</a> from sm_core.o(.text.Sm_L2caCbMsgHandler) referenced from sm_core.o(.text.Sm_Init)
 <LI><a href="#[7d]">Sm_TimerCallback</a> from sm_core.o(.text.Sm_TimerCallback) referenced from sm_states.o(.text.SmState_Idle)
 <LI><a href="#[af]">StackTimer_ISR</a> from timersmanager.o(i.StackTimer_ISR) referenced from timersmanager.o(i.TMR_Init)
 <LI><a href="#[aa]">Switch_Press_ISR</a> from keyboard.o(i.Switch_Press_ISR) referenced from keyboard.o(i.KBD_Init)
 <LI><a href="#[a]">SysTick_Handler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[36]">SystemInit</a> from system_qn908xc.o(i.SystemInit) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[500]">TMR_Init</a> from timersmanager.o(i.TMR_Init) referenced 2 times from timersmanager.o(i.TMR_Init)
 <LI><a href="#[12a]">TMR_Task</a> from timersmanager.o(i.TMR_Task) referenced from timersmanager.o(.data)
 <LI><a href="#[b0]">USART_ISR</a> from uart_adapter.o(i.USART_ISR) referenced from uart_adapter.o(i.USART_Initialize)
 <LI><a href="#[48]">USB0_DriverIRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[1b]">USB0_IRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[55]">WDT_DriverIRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[28]">WDT_IRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[58]">XTAL_READY_DriverIRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[2b]">XTAL_READY_IRQHandler</a> from startup_qn908xc.o(.text) referenced from startup_qn908xc.o(RESET)
 <LI><a href="#[37]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_qn908xc.o(.text)
 <LI><a href="#[b1]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[81]">att_TimerCallback</a> from att_cb.o(.text.att_TimerCallback) referenced from att.o(.text.att_SendData)
 <LI><a href="#[80]">att_l2caCbMsgHandler</a> from att_cb.o(.text.att_l2caCbMsgHandler) referenced from att_cb.o(.text.att_InitializeInternalCallback)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from rwble.o(.text.BLE_IRQHandler)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from qnble.o(.text.BLE_Init)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from nxp.o(.text.Controller_TaskHandler)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from eif_adapter.o(.text.EIF_Read)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from eif_adapter.o(.text.EIF_RxCallback)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from em_buf.o(.text.em_buf_init)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from hci_tl.o(.text.hci_acl_tx_data_received)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from hci_tl.o(.text.hci_cmd_received)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_hci.o(.text.hci_le_set_adv_data_cmd_handler)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_hci.o(.text.hci_le_set_scan_rsp_data_cmd_handler)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from hci_tl.o(.text.hci_tl_send)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_util.o(.text.llc_end_evt_defer)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc.o(.text.llc_init)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llc_llcp_ch_map_update_pdu_send)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llc_llcp_con_param_req_pdu_send)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llc_llcp_con_param_rsp_pdu_send)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llc_llcp_con_update_pdu_send)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llc_llcp_length_req_pdu_send)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llc_llcp_pause_enc_req_pdu_send)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llc_llcp_pause_enc_rsp_pdu_send)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llc_llcp_phy_req_pdu_send)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llc_llcp_phy_upd_ind_pdu_send)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llc_llcp_ping_req_pdu_send)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llc_llcp_reject_ind_pdu_send)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llc_llcp_send)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llc_llcp_start_enc_req_pdu_send)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llc_llcp_start_enc_rsp_pdu_send)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llc_llcp_terminate_ind_pdu_send)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_util.o(.text.llc_pdu_defer)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_util.o(.text.llc_pdu_llcp_tx_ack_defer)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc.o(.text.llc_reset)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_util.o(.text.llc_util_dicon_procedure)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llcp_con_param_req_handler)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llcp_enc_req_handler)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llcp_enc_rsp_handler)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llcp_length_req_handler)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llcp_length_rsp_handler)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llcp_pause_enc_req_handler)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llcp_pause_enc_rsp_handler)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llcp_ping_req_handler)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llcp_start_enc_rsp_handler)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld.o(.text.lld_adv_start)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld.o(.text.lld_con_start)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_evt.o(.text.lld_evt_adv_create)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_evt.o(.text.lld_evt_deffered_elt_handler)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_evt.o(.text.lld_evt_delete_elt_handler)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_evt.o(.text.lld_evt_elt_insert)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_evt.o(.text.lld_evt_end_isr)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_evt.o(.text.lld_evt_init)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_evt.o(.text.lld_evt_move_to_master)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_evt.o(.text.lld_evt_move_to_slave)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced 2 times from lld_evt.o(.text.lld_evt_restart)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_evt.o(.text.lld_evt_scan_create)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_evt.o(.text.lld_evt_schedule)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_evt.o(.text.lld_evt_schedule_next)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld.o(.text.lld_init)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld.o(.text.lld_move_to_master)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld.o(.text.lld_move_to_slave)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_pdu.o(.text.lld_pdu_check)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_pdu.o(.text.lld_pdu_rx_handler)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_pdu.o(.text.lld_pdu_tx_prog)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld.o(.text.lld_scan_start)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_sleep.o(.text.lld_sleep_wakeup)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm.o(.text.llm_con_req_ind)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm.o(.text.llm_con_req_tx_cfm)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm.o(.text.llm_create_con)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm.o(.text.llm_encryption_start)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm.o(.text.llm_init)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced 2 times from llm.o(.text.llm_le_adv_report_ind)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_util.o(.text.llm_pdu_defer)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm.o(.text.llm_set_adv_en)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm.o(.text.llm_set_adv_param)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm.o(.text.llm_set_scan_en)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm.o(.text.llm_test_mode_start_rx)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm.o(.text.llm_test_mode_start_tx)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from rwble.o(.text.rwble_reset)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from nxp.o(.text.rwip_init)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from nxp.o(.text.rwip_lpcycles_2_us)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from nxp.o(.text.rwip_reset)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from nxp.o(.text.rwip_wakeup)
 <LI><a href="#[62]">ble_config</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from controller_config.o(i.NXP_InitBleCfg)
 <LI><a href="#[9d]">co_null_bdaddr</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm.o(.text.llm_create_con)
 <LI><a href="#[9d]">co_null_bdaddr</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm.o(.text.llm_set_adv_en)
 <LI><a href="#[9d]">co_null_bdaddr</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm.o(.text.llm_set_scan_en)
 <LI><a href="#[bb]">dbg_default_handler</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from controller_config.o(.constdata)
 <LI><a href="#[bc]">dbg_state</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from controller_config.o(.constdata)
 <LI><a href="#[82]">ecc_multiplication_event_handler</a> from ecc_p256.o(.text.ecc_multiplication_event_handler) referenced from ecc_p256.o(.text.ecc_init)
 <LI><a href="#[83]">em_buf_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced 2 times from em_buf.o(.text.em_buf_init)
 <LI><a href="#[83]">em_buf_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_evt.o(.text.lld_evt_end_isr)
 <LI><a href="#[83]">em_buf_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_pdu.o(.text.lld_pdu_rx_handler)
 <LI><a href="#[83]">em_buf_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_pdu.o(.text.lld_pdu_send_packet)
 <LI><a href="#[83]">em_buf_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_pdu.o(.text.lld_pdu_tx_prog)
 <LI><a href="#[83]">em_buf_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm.o(.text.llm_create_con)
 <LI><a href="#[83]">em_buf_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm.o(.text.llm_set_adv_en)
 <LI><a href="#[83]">em_buf_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm.o(.text.llm_set_scan_en)
 <LI><a href="#[83]">em_buf_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced 2 times from llm.o(.text.llm_test_mode_start_tx)
 <LI><a href="#[63]">error</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from qnble.o(.text.BLE_Init)
 <LI><a href="#[87]">h4tl_cmd_hdr_rx_evt_handler</a> from h4tl.o(.text.h4tl_cmd_hdr_rx_evt_handler) referenced from h4tl.o(.text.h4tl_init)
 <LI><a href="#[88]">h4tl_cmd_pld_rx_evt_handler</a> from h4tl.o(.text.h4tl_cmd_pld_rx_evt_handler) referenced from h4tl.o(.text.h4tl_init)
 <LI><a href="#[84]">h4tl_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from h4tl.o(.text.h4tl_cmd_hdr_rx_evt_handler)
 <LI><a href="#[84]">h4tl_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from h4tl.o(.text.h4tl_cmd_pld_rx_evt_handler)
 <LI><a href="#[84]">h4tl_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from h4tl.o(.text.h4tl_init)
 <LI><a href="#[84]">h4tl_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from h4tl.o(.text.h4tl_start)
 <LI><a href="#[84]">h4tl_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from h4tl.o(.text.h4tl_tx_evt_handler)
 <LI><a href="#[84]">h4tl_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from h4tl.o(.text.h4tl_write)
 <LI><a href="#[85]">h4tl_rx_done</a> from h4tl.o(.text.h4tl_rx_done) referenced from h4tl.o(.text.h4tl_cmd_hdr_rx_evt_handler)
 <LI><a href="#[85]">h4tl_rx_done</a> from h4tl.o(.text.h4tl_rx_done) referenced from h4tl.o(.text.h4tl_cmd_pld_rx_evt_handler)
 <LI><a href="#[85]">h4tl_rx_done</a> from h4tl.o(.text.h4tl_rx_done) referenced from h4tl.o(.text.h4tl_init)
 <LI><a href="#[85]">h4tl_rx_done</a> from h4tl.o(.text.h4tl_rx_done) referenced from h4tl.o(.text.h4tl_rx_done)
 <LI><a href="#[89]">h4tl_tx_done</a> from h4tl.o(.text.h4tl_tx_done) referenced from h4tl.o(.text.h4tl_write)
 <LI><a href="#[86]">h4tl_tx_evt_handler</a> from h4tl.o(.text.h4tl_tx_evt_handler) referenced from h4tl.o(.text.h4tl_init)
 <LI><a href="#[6c]">handleClientExchangeMtuRequest</a> from gatt_server.o(.text.handleClientExchangeMtuRequest) referenced from gatt_server.o(.text.InternalGattServer_Init)
 <LI><a href="#[6e]">handleClientFindByTypeValueRequest</a> from gatt_server.o(.text.handleClientFindByTypeValueRequest) referenced from gatt_server.o(.text.InternalGattServer_Init)
 <LI><a href="#[6d]">handleClientFindInformationRequest</a> from gatt_server.o(.text.handleClientFindInformationRequest) referenced from gatt_server.o(.text.InternalGattServer_Init)
 <LI><a href="#[77]">handleClientHandleValueConfirmation</a> from gatt_server.o(.text.handleClientHandleValueConfirmation) referenced from gatt_server.o(.text.InternalGattServer_Init)
 <LI><a href="#[71]">handleClientReadBlobRequest</a> from gatt_server.o(.text.handleClientReadBlobRequest) referenced from gatt_server.o(.text.InternalGattServer_Init)
 <LI><a href="#[73]">handleClientReadByGroupTypeRequest</a> from gatt_server.o(.text.handleClientReadByGroupTypeRequest) referenced from gatt_server.o(.text.InternalGattServer_Init)
 <LI><a href="#[6f]">handleClientReadByTypeRequest</a> from gatt_server.o(.text.handleClientReadByTypeRequest) referenced from gatt_server.o(.text.InternalGattServer_Init)
 <LI><a href="#[72]">handleClientReadMultipleRequest</a> from gatt_server.o(.text.handleClientReadMultipleRequest) referenced from gatt_server.o(.text.InternalGattServer_Init)
 <LI><a href="#[70]">handleClientReadRequest</a> from gatt_server.o(.text.handleClientReadRequest) referenced from gatt_server.o(.text.InternalGattServer_Init)
 <LI><a href="#[76]">handleClientSignedWriteCommand</a> from gatt_server.o(.text.handleClientSignedWriteCommand) referenced from gatt_server.o(.text.InternalGattServer_Init)
 <LI><a href="#[79]">handleClientTimeout</a> from gatt_server.o(.text.handleClientTimeout) referenced from gatt_server.o(.text.InternalGattServer_Init)
 <LI><a href="#[75]">handleClientWriteCommand</a> from gatt_server.o(.text.handleClientWriteCommand) referenced from gatt_server.o(.text.InternalGattServer_Init)
 <LI><a href="#[74]">handleClientWriteRequest</a> from gatt_server.o(.text.handleClientWriteRequest) referenced from gatt_server.o(.text.InternalGattServer_Init)
 <LI><a href="#[78]">handleUnsupportedOpcode</a> from gatt_server.o(.text.handleUnsupportedOpcode) referenced from gatt_server.o(.text.InternalGattServer_Init)
 <LI><a href="#[67]">hciCommandCompleteCallback</a> from gap_hci_cb.o(.text.hciCommandCompleteCallback) referenced from gap.o(.text.InternalBle_Initialize)
 <LI><a href="#[68]">hciCommandStatusCallback</a> from gap_hci_cb.o(.text.hciCommandStatusCallback) referenced from gap.o(.text.InternalBle_Initialize)
 <LI><a href="#[69]">hciGenericCallback</a> from gap_hci_cb.o(.text.hciGenericCallback) referenced from gap.o(.text.InternalBle_Initialize)
 <LI><a href="#[66]">hciLeCallback</a> from gap_hci_cb.o(.text.hciLeCallback) referenced from gap.o(.text.InternalBle_Initialize)
 <LI><a href="#[f3]">hci_command_handler</a> from llm_hci.o(.text.hci_command_handler) referenced from llm_task.o(.rodata.llm_default_state)
 <LI><a href="#[8d]">hci_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from hci.o(.text.hci_send_2_host)
 <LI><a href="#[112]">hci_host_buf_size_cmd_handler</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_hci.o(.rodata.llm_hci_command_handler_tab)
 <LI><a href="#[113]">hci_host_nb_cmp_pkts_cmd_handler</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_hci.o(.rodata.llm_hci_command_handler_tab)
 <LI><a href="#[ff]">hci_le_create_con_cancel_cmd_handler</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_hci.o(.rodata.llm_hci_command_handler_tab)
 <LI><a href="#[fe]">hci_le_create_con_cmd_handler</a> from llm_hci.o(.text.hci_le_create_con_cmd_handler) referenced from llm_hci.o(.rodata.llm_hci_command_handler_tab)
 <LI><a href="#[103]">hci_le_enc_cmd_handler</a> from llm_hci.o(.text.hci_le_enc_cmd_handler) referenced from llm_hci.o(.rodata.llm_hci_command_handler_tab)
 <LI><a href="#[116]">hci_le_enh_privacy_info_cmd_handler</a> from fw_symbols_mdk.h(ABSOLUTE) referenced 3 times from llm_hci.o(.rodata.llm_hci_command_handler_tab)
 <LI><a href="#[115]">hci_le_enh_privacy_mgmt_cmd_handler</a> from llm_hci.o(.text.hci_le_enh_privacy_mgmt_cmd_handler) referenced 6 times from llm_hci.o(.rodata.llm_hci_command_handler_tab)
 <LI><a href="#[118]">hci_le_generate_dhkey_cmd_handler</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_hci.o(.rodata.llm_hci_command_handler_tab)
 <LI><a href="#[104]">hci_le_rand_cmd_handler</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_hci.o(.rodata.llm_hci_command_handler_tab)
 <LI><a href="#[f8]">hci_le_rd_adv_ch_tx_pw_cmd_handler</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_hci.o(.rodata.llm_hci_command_handler_tab)
 <LI><a href="#[f4]">hci_le_rd_buff_size_cmd_handler</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_hci.o(.rodata.llm_hci_command_handler_tab)
 <LI><a href="#[117]">hci_le_rd_local_p256_public_key_cmd_handler</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_hci.o(.rodata.llm_hci_command_handler_tab)
 <LI><a href="#[f5]">hci_le_rd_local_supp_feats_cmd_handler</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_hci.o(.rodata.llm_hci_command_handler_tab)
 <LI><a href="#[108]">hci_le_rd_max_data_len_cmd_handler</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_hci.o(.rodata.llm_hci_command_handler_tab)
 <LI><a href="#[106]">hci_le_rd_suggted_dft_data_len_cmd_handler</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_hci.o(.rodata.llm_hci_command_handler_tab)
 <LI><a href="#[105]">hci_le_rd_supp_states_cmd_handler</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_hci.o(.rodata.llm_hci_command_handler_tab)
 <LI><a href="#[101]">hci_le_rd_wl_size_cmd_handler</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_hci.o(.rodata.llm_hci_command_handler_tab)
 <LI><a href="#[f9]">hci_le_set_adv_data_cmd_handler</a> from llm_hci.o(.text.hci_le_set_adv_data_cmd_handler) referenced from llm_hci.o(.rodata.llm_hci_command_handler_tab)
 <LI><a href="#[fa]">hci_le_set_adv_en_cmd_handler</a> from llm_hci.o(.text.hci_le_set_adv_en_cmd_handler) referenced from llm_hci.o(.rodata.llm_hci_command_handler_tab)
 <LI><a href="#[f7]">hci_le_set_adv_param_cmd_handler</a> from llm_hci.o(.text.hci_le_set_adv_param_cmd_handler) referenced from llm_hci.o(.rodata.llm_hci_command_handler_tab)
 <LI><a href="#[119]">hci_le_set_dft_phy_cmd_handler</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_hci.o(.rodata.llm_hci_command_handler_tab)
 <LI><a href="#[8b]">hci_le_set_evt_mask_cmd_handler</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_hci.o(.rodata.llm_hci_command_handler_tab)
 <LI><a href="#[8b]">hci_le_set_evt_mask_cmd_handler</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_hci.o(.text.hci_command_handler)
 <LI><a href="#[100]">hci_le_set_host_ch_class_cmd_handler</a> from llm_hci.o(.text.hci_le_set_host_ch_class_cmd_handler) referenced from llm_hci.o(.rodata.llm_hci_command_handler_tab)
 <LI><a href="#[f6]">hci_le_set_rand_add_cmd_handler</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_hci.o(.rodata.llm_hci_command_handler_tab)
 <LI><a href="#[fd]">hci_le_set_scan_en_cmd_handler</a> from llm_hci.o(.text.hci_le_set_scan_en_cmd_handler) referenced from llm_hci.o(.rodata.llm_hci_command_handler_tab)
 <LI><a href="#[fc]">hci_le_set_scan_param_cmd_handler</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_hci.o(.rodata.llm_hci_command_handler_tab)
 <LI><a href="#[fb]">hci_le_set_scan_rsp_data_cmd_handler</a> from llm_hci.o(.text.hci_le_set_scan_rsp_data_cmd_handler) referenced from llm_hci.o(.rodata.llm_hci_command_handler_tab)
 <LI><a href="#[109]">hci_le_test_mode_mngt_cmd_handler</a> from llm_hci.o(.text.hci_le_test_mode_mngt_cmd_handler) referenced 5 times from llm_hci.o(.rodata.llm_hci_command_handler_tab)
 <LI><a href="#[102]">hci_le_wl_mngt_cmd_handler</a> from fw_symbols_mdk.h(ABSOLUTE) referenced 3 times from llm_hci.o(.rodata.llm_hci_command_handler_tab)
 <LI><a href="#[107]">hci_le_wr_suggted_dft_data_len_cmd_handler</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_hci.o(.rodata.llm_hci_command_handler_tab)
 <LI><a href="#[10b]">hci_rd_bd_addr_cmd_handler</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_hci.o(.rodata.llm_hci_command_handler_tab)
 <LI><a href="#[114]">hci_rd_buff_size_cmd_handler</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_hci.o(.rodata.llm_hci_command_handler_tab)
 <LI><a href="#[10d]">hci_rd_local_supp_cmds_cmd_handler</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_hci.o(.rodata.llm_hci_command_handler_tab)
 <LI><a href="#[10e]">hci_rd_local_supp_feats_cmd_handler</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_hci.o(.rodata.llm_hci_command_handler_tab)
 <LI><a href="#[10c]">hci_rd_local_ver_info_cmd_handler</a> from llm_hci.o(.text.hci_rd_local_ver_info_cmd_handler) referenced from llm_hci.o(.rodata.llm_hci_command_handler_tab)
 <LI><a href="#[10a]">hci_reset_cmd_handler</a> from llm_hci.o(.text.hci_reset_cmd_handler) referenced from llm_hci.o(.rodata.llm_hci_command_handler_tab)
 <LI><a href="#[10f]">hci_set_ctrl_to_host_flow_ctrl_cmd_handler</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_hci.o(.rodata.llm_hci_command_handler_tab)
 <LI><a href="#[110]">hci_set_evt_mask_cmd_handler</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_hci.o(.rodata.llm_hci_command_handler_tab)
 <LI><a href="#[111]">hci_set_evt_mask_page_2_cmd_handler</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_hci.o(.rodata.llm_hci_command_handler_tab)
 <LI><a href="#[8a]">hci_tl_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from hci_tl.o(.text.hci_acl_tx_data_received)
 <LI><a href="#[8a]">hci_tl_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from hci_tl.o(.text.hci_cmd_received)
 <LI><a href="#[8a]">hci_tl_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced 2 times from hci_tl.o(.text.hci_tl_send)
 <LI><a href="#[8e]">hci_tx_done</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from hci_tl.o(.text.hci_tl_send)
 <LI><a href="#[6b]">ldmTimeout</a> from gap.o(.text.ldmTimeout) referenced from gap.o(.text.InternalGap_StartAdvertising)
 <LI><a href="#[c7]">llc_auth_payl_nearly_to_ind_handler</a> from llc_task.o(.text.llc_auth_payl_nearly_to_ind_handler) referenced from llc_task.o(.rodata.llc_default_state)
 <LI><a href="#[c8]">llc_auth_payl_real_to_ind_handler</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_task.o(.rodata.llc_default_state)
 <LI><a href="#[ce]">llc_chmap_update_req_ind_handler</a> from llc_task.o(.text.llc_chmap_update_req_ind_handler) referenced from llc_task.o(.rodata.llc_default_state)
 <LI><a href="#[ca]">llc_chnl_assess_timer_handler</a> from llc_task.o(.text.llc_chnl_assess_timer_handler) referenced from llc_task.o(.rodata.llc_default_state)
 <LI><a href="#[cd]">llc_con_upd_req_ind_handler</a> from llc_task.o(.text.llc_con_upd_req_ind_handler) referenced from llc_task.o(.rodata.llc_default_state)
 <LI><a href="#[d4]">llc_data_ind_handler</a> from llc_task.o(.text.llc_data_ind_handler) referenced from llc_task.o(.rodata.llc_default_state)
 <LI><a href="#[c4]">llc_dft_handler</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_task.o(.rodata.llc_default_state)
 <LI><a href="#[cb]">llc_enc_mgt_ind_handler</a> from llc_task.o(.text.llc_enc_mgt_ind_handler) referenced from llc_task.o(.rodata.llc_default_state)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_task.o(.text.llc_auth_payl_nearly_to_ind_handler)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_ch_asses.o(.text.llc_ch_assess_get_local_ch_map)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_ch_asses.o(.text.llc_ch_assess_reass_ch)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_task.o(.text.llc_chmap_update_req_ind_handler)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_task.o(.text.llc_chnl_assess_timer_handler)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_task.o(.text.llc_con_upd_req_ind_handler)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc.o(.text.llc_con_update_complete_send)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc.o(.text.llc_con_update_finished)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc.o(.text.llc_con_update_ind)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_task.o(.text.llc_data_ind_handler)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_task.o(.text.llc_enc_mgt_ind_handler)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_util.o(.text.llc_end_evt_defer)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc.o(.text.llc_init)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_task.o(.text.llc_length_req_ind_handler)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llc_llcp_ch_map_update_pdu_send)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llc_llcp_con_param_req_pdu_send)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llc_llcp_con_param_rsp_pdu_send)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llc_llcp_con_update_pdu_send)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llc_llcp_enc_req_pdu_send)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llc_llcp_enc_rsp_pdu_send)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llc_llcp_length_req_pdu_send)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llc_llcp_pause_enc_req_pdu_send)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llc_llcp_pause_enc_rsp_pdu_send)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llc_llcp_phy_req_pdu_send)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llc_llcp_phy_upd_ind_pdu_send)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llc_llcp_ping_req_pdu_send)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llc_llcp_recv_handler)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llc_llcp_reject_ind_pdu_send)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llc_llcp_send)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llc_llcp_start_enc_req_pdu_send)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llc_llcp_start_enc_rsp_pdu_send)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llc_llcp_terminate_ind_pdu_send)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc.o(.text.llc_lsto_con_update)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_util.o(.text.llc_pdu_defer)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_util.o(.text.llc_pdu_llcp_tx_ack_defer)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_task.o(.text.llc_phy_upd_req_ind_handler)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc.o(.text.llc_phy_update_finished)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc.o(.text.llc_reset)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc.o(.text.llc_start)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc.o(.text.llc_stop)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_util.o(.text.llc_util_dicon_procedure)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llcp_channel_map_ind_handler)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llcp_con_param_req_handler)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llcp_con_param_rsp_handler)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llcp_con_upd_ind_handler)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llcp_enc_req_handler)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llcp_enc_rsp_handler)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llcp_feats_req_handler)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llcp_feats_rsp_handler)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llcp_length_req_handler)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llcp_length_rsp_handler)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llcp_pause_enc_req_handler)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llcp_pause_enc_rsp_handler)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llcp_phy_req_handler)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llcp_phy_rsp_handler)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llcp_phy_upd_ind_handler)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llcp_ping_req_handler)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llcp_ping_rsp_handler)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llcp_reject_ind_ext_handler)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llcp_reject_ind_handler)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llcp_start_enc_req_handler)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llcp_start_enc_rsp_handler)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llcp_terminate_ind_handler)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llcp_unknown_rsp_handler)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.text.llcp_vers_ind_handler)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld.o(.text.lld_con_update_after_param_req)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced 3 times from lld_evt.o(.text.lld_evt_restart)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_evt.o(.text.lld_evt_schedule_next)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_evt.o(.text.lld_evt_slave_update)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_pdu.o(.text.lld_pdu_rx_handler)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_pdu.o(.text.lld_pdu_tx_prog)
 <LI><a href="#[8f]">llc_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_task.o(.text.lld_stop_ind_handler)
 <LI><a href="#[d3]">llc_hci_acl_data_tx_handler</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_task.o(.rodata.llc_default_state)
 <LI><a href="#[d2]">llc_hci_command_handler</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_task.o(.rodata.llc_default_state)
 <LI><a href="#[cc]">llc_length_req_ind_handler</a> from llc_task.o(.text.llc_length_req_ind_handler) referenced from llc_task.o(.rodata.llc_default_state)
 <LI><a href="#[c6]">llc_link_sup_to_ind_handler</a> from llc_task.o(.text.llc_link_sup_to_ind_handler) referenced from llc_task.o(.rodata.llc_default_state)
 <LI><a href="#[d1]">llc_llcp_recv_ind_handler</a> from llc_task.o(.text.llc_llcp_recv_ind_handler) referenced from llc_task.o(.rodata.llc_default_state)
 <LI><a href="#[c9]">llc_llcp_rsp_to_ind_handler</a> from llc_task.o(.text.llc_llcp_rsp_to_ind_handler) referenced from llc_task.o(.rodata.llc_default_state)
 <LI><a href="#[cf]">llc_phy_upd_req_ind_handler</a> from llc_task.o(.text.llc_phy_upd_req_ind_handler) referenced from llc_task.o(.rodata.llc_default_state)
 <LI><a href="#[d6]">llcp_channel_map_ind_handler</a> from llc_llcp.o(.text.llcp_channel_map_ind_handler) referenced from llc_llcp.o(.rodata.llcp_pdu_handler)
 <LI><a href="#[e4]">llcp_con_param_req_handler</a> from llc_llcp.o(.text.llcp_con_param_req_handler) referenced from llc_llcp.o(.rodata.llcp_pdu_handler)
 <LI><a href="#[e5]">llcp_con_param_rsp_handler</a> from llc_llcp.o(.text.llcp_con_param_rsp_handler) referenced from llc_llcp.o(.rodata.llcp_pdu_handler)
 <LI><a href="#[d5]">llcp_con_upd_ind_handler</a> from llc_llcp.o(.text.llcp_con_upd_ind_handler) referenced from llc_llcp.o(.rodata.llcp_pdu_handler)
 <LI><a href="#[d8]">llcp_enc_req_handler</a> from llc_llcp.o(.text.llcp_enc_req_handler) referenced from llc_llcp.o(.rodata.llcp_pdu_handler)
 <LI><a href="#[d9]">llcp_enc_rsp_handler</a> from llc_llcp.o(.text.llcp_enc_rsp_handler) referenced from llc_llcp.o(.rodata.llcp_pdu_handler)
 <LI><a href="#[dd]">llcp_feats_req_handler</a> from llc_llcp.o(.text.llcp_feats_req_handler) referenced from llc_llcp.o(.rodata.llcp_pdu_handler)
 <LI><a href="#[de]">llcp_feats_rsp_handler</a> from llc_llcp.o(.text.llcp_feats_rsp_handler) referenced from llc_llcp.o(.rodata.llcp_pdu_handler)
 <LI><a href="#[e9]">llcp_length_req_handler</a> from llc_llcp.o(.text.llcp_length_req_handler) referenced from llc_llcp.o(.rodata.llcp_pdu_handler)
 <LI><a href="#[ea]">llcp_length_rsp_handler</a> from llc_llcp.o(.text.llcp_length_rsp_handler) referenced from llc_llcp.o(.rodata.llcp_pdu_handler)
 <LI><a href="#[df]">llcp_pause_enc_req_handler</a> from llc_llcp.o(.text.llcp_pause_enc_req_handler) referenced from llc_llcp.o(.rodata.llcp_pdu_handler)
 <LI><a href="#[e0]">llcp_pause_enc_rsp_handler</a> from llc_llcp.o(.text.llcp_pause_enc_rsp_handler) referenced from llc_llcp.o(.rodata.llcp_pdu_handler)
 <LI><a href="#[eb]">llcp_phy_req_handler</a> from llc_llcp.o(.text.llcp_phy_req_handler) referenced from llc_llcp.o(.rodata.llcp_pdu_handler)
 <LI><a href="#[ec]">llcp_phy_rsp_handler</a> from llc_llcp.o(.text.llcp_phy_rsp_handler) referenced from llc_llcp.o(.rodata.llcp_pdu_handler)
 <LI><a href="#[ed]">llcp_phy_upd_ind_handler</a> from llc_llcp.o(.text.llcp_phy_upd_ind_handler) referenced from llc_llcp.o(.rodata.llcp_pdu_handler)
 <LI><a href="#[e7]">llcp_ping_req_handler</a> from llc_llcp.o(.text.llcp_ping_req_handler) referenced from llc_llcp.o(.rodata.llcp_pdu_handler)
 <LI><a href="#[e8]">llcp_ping_rsp_handler</a> from llc_llcp.o(.text.llcp_ping_rsp_handler) referenced from llc_llcp.o(.rodata.llcp_pdu_handler)
 <LI><a href="#[e6]">llcp_reject_ind_ext_handler</a> from llc_llcp.o(.text.llcp_reject_ind_ext_handler) referenced from llc_llcp.o(.rodata.llcp_pdu_handler)
 <LI><a href="#[e2]">llcp_reject_ind_handler</a> from llc_llcp.o(.text.llcp_reject_ind_handler) referenced from llc_llcp.o(.rodata.llcp_pdu_handler)
 <LI><a href="#[e3]">llcp_slave_feature_req_handler</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_llcp.o(.rodata.llcp_pdu_handler)
 <LI><a href="#[da]">llcp_start_enc_req_handler</a> from llc_llcp.o(.text.llcp_start_enc_req_handler) referenced from llc_llcp.o(.rodata.llcp_pdu_handler)
 <LI><a href="#[db]">llcp_start_enc_rsp_handler</a> from llc_llcp.o(.text.llcp_start_enc_rsp_handler) referenced from llc_llcp.o(.rodata.llcp_pdu_handler)
 <LI><a href="#[d7]">llcp_terminate_ind_handler</a> from llc_llcp.o(.text.llcp_terminate_ind_handler) referenced from llc_llcp.o(.rodata.llcp_pdu_handler)
 <LI><a href="#[dc]">llcp_unknown_rsp_handler</a> from llc_llcp.o(.text.llcp_unknown_rsp_handler) referenced from llc_llcp.o(.rodata.llcp_pdu_handler)
 <LI><a href="#[e1]">llcp_vers_ind_handler</a> from llc_llcp.o(.text.llcp_vers_ind_handler) referenced from llc_llcp.o(.rodata.llcp_pdu_handler)
 <LI><a href="#[93]">lld_evt_canceled</a> from lld_evt.o(.text.lld_evt_canceled) referenced 2 times from lld.o(.text.lld_con_start)
 <LI><a href="#[93]">lld_evt_canceled</a> from lld_evt.o(.text.lld_evt_canceled) referenced from lld_evt.o(.text.lld_evt_adv_create)
 <LI><a href="#[93]">lld_evt_canceled</a> from lld_evt.o(.text.lld_evt_canceled) referenced from lld_evt.o(.text.lld_evt_move_to_slave)
 <LI><a href="#[93]">lld_evt_canceled</a> from lld_evt.o(.text.lld_evt_canceled) referenced from lld_evt.o(.text.lld_evt_scan_create)
 <LI><a href="#[9a]">lld_evt_deffered_elt_handler</a> from lld_evt.o(.text.lld_evt_deffered_elt_handler) referenced from lld_evt.o(.text.lld_evt_init)
 <LI><a href="#[9b]">lld_evt_delete_elt_handler</a> from lld_evt.o(.text.lld_evt_delete_elt_handler) referenced from lld_evt.o(.text.lld_evt_init)
 <LI><a href="#[97]">lld_evt_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld.o(.text.lld_con_start)
 <LI><a href="#[97]">lld_evt_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced 3 times from lld_evt.o(.text.lld_evt_canceled)
 <LI><a href="#[97]">lld_evt_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_evt.o(.text.lld_evt_deferred_elt_push)
 <LI><a href="#[97]">lld_evt_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_evt.o(.text.lld_evt_deffered_elt_handler)
 <LI><a href="#[97]">lld_evt_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced 2 times from lld_evt.o(.text.lld_evt_delete_elt_handler)
 <LI><a href="#[97]">lld_evt_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced 2 times from lld_evt.o(.text.lld_evt_elt_insert)
 <LI><a href="#[97]">lld_evt_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced 3 times from lld_evt.o(.text.lld_evt_end_isr)
 <LI><a href="#[97]">lld_evt_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced 5 times from lld_evt.o(.text.lld_evt_init)
 <LI><a href="#[97]">lld_evt_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced 3 times from lld_evt.o(.text.lld_evt_restart)
 <LI><a href="#[97]">lld_evt_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_evt.o(.text.lld_evt_rx_isr)
 <LI><a href="#[97]">lld_evt_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced 3 times from lld_evt.o(.text.lld_evt_schedule)
 <LI><a href="#[97]">lld_evt_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced 2 times from lld_evt.o(.text.lld_evt_schedule_next)
 <LI><a href="#[97]">lld_evt_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_pdu.o(.text.lld_pdu_check)
 <LI><a href="#[97]">lld_evt_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_pdu.o(.text.lld_pdu_rx_handler)
 <LI><a href="#[94]">lld_evt_prevent_stop</a> from fw_symbols_mdk.h(ABSOLUTE) referenced 2 times from lld.o(.text.lld_con_start)
 <LI><a href="#[94]">lld_evt_prevent_stop</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_evt.o(.text.lld_evt_adv_create)
 <LI><a href="#[94]">lld_evt_prevent_stop</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_evt.o(.text.lld_evt_move_to_slave)
 <LI><a href="#[94]">lld_evt_prevent_stop</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_evt.o(.text.lld_evt_scan_create)
 <LI><a href="#[92]">lld_evt_schedule</a> from lld_evt.o(.text.lld_evt_schedule) referenced 2 times from lld.o(.text.lld_con_start)
 <LI><a href="#[92]">lld_evt_schedule</a> from lld_evt.o(.text.lld_evt_schedule) referenced from lld_evt.o(.text.lld_evt_adv_create)
 <LI><a href="#[92]">lld_evt_schedule</a> from lld_evt.o(.text.lld_evt_schedule) referenced from lld_evt.o(.text.lld_evt_move_to_slave)
 <LI><a href="#[92]">lld_evt_schedule</a> from lld_evt.o(.text.lld_evt_schedule) referenced from lld_evt.o(.text.lld_evt_scan_create)
 <LI><a href="#[9c]">lld_pdu_llcp_pk_desc_tab</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_pdu.o(.text.lld_pdu_rx_handler)
 <LI><a href="#[9c]">lld_pdu_llcp_pk_desc_tab</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_pdu.o(.text.lld_pdu_tx_prog)
 <LI><a href="#[c5]">lld_stop_ind_handler</a> from llc_task.o(.text.lld_stop_ind_handler) referenced from llc_task.o(.rodata.llc_default_state)
 <LI><a href="#[ee]">llm_dft_handler</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_task.o(.rodata.llm_default_state)
 <LI><a href="#[f1]">llm_ecc_result_ind_handler</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_task.o(.rodata.llm_default_state)
 <LI><a href="#[d0]">llm_enc_ind_handler</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_task.o(.rodata.llc_default_state)
 <LI><a href="#[f0]">llm_enc_req_handler</a> from llm_task.o(.text.llm_enc_req_handler) referenced from llm_task.o(.rodata.llm_default_state)
 <LI><a href="#[9f]">llm_encryption_done</a> from llm.o(.text.llm_encryption_done) referenced from llm.o(.text.llm_init)
 <LI><a href="#[f2]">llm_le_enh_priv_addr_renew_timer_handler</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_task.o(.rodata.llm_default_state)
 <LI><a href="#[8c]">llm_le_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_hci.o(.text.hci_le_create_con_cmd_handler)
 <LI><a href="#[8c]">llm_le_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_hci.o(.text.hci_le_enc_cmd_handler)
 <LI><a href="#[8c]">llm_le_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_hci.o(.text.hci_le_enh_privacy_mgmt_cmd_handler)
 <LI><a href="#[8c]">llm_le_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_hci.o(.text.hci_le_set_adv_data_cmd_handler)
 <LI><a href="#[8c]">llm_le_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_hci.o(.text.hci_le_set_adv_en_cmd_handler)
 <LI><a href="#[8c]">llm_le_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_hci.o(.text.hci_le_set_host_ch_class_cmd_handler)
 <LI><a href="#[8c]">llm_le_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_hci.o(.text.hci_le_set_scan_en_cmd_handler)
 <LI><a href="#[8c]">llm_le_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_hci.o(.text.hci_le_test_mode_mngt_cmd_handler)
 <LI><a href="#[8c]">llm_le_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_ch_asses.o(.text.llc_ch_assess_get_local_ch_map)
 <LI><a href="#[8c]">llm_le_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_ch_asses.o(.text.llc_ch_assess_reass_ch)
 <LI><a href="#[8c]">llm_le_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_task.o(.text.llc_chnl_assess_timer_handler)
 <LI><a href="#[8c]">llm_le_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc.o(.text.llc_start)
 <LI><a href="#[8c]">llm_le_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld.o(.text.lld_adv_start)
 <LI><a href="#[8c]">llm_le_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld.o(.text.lld_con_start)
 <LI><a href="#[8c]">llm_le_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_evt.o(.text.lld_evt_end_isr)
 <LI><a href="#[8c]">llm_le_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_evt.o(.text.lld_evt_restart)
 <LI><a href="#[8c]">llm_le_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_evt.o(.text.lld_evt_schedule)
 <LI><a href="#[8c]">llm_le_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced 2 times from lld.o(.text.lld_init)
 <LI><a href="#[8c]">llm_le_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld.o(.text.lld_move_to_master)
 <LI><a href="#[8c]">llm_le_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld.o(.text.lld_move_to_slave)
 <LI><a href="#[8c]">llm_le_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld.o(.text.lld_scan_start)
 <LI><a href="#[8c]">llm_le_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_util.o(.text.lld_util_priority_set)
 <LI><a href="#[8c]">llm_le_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm.o(.text.llm_con_req_ind)
 <LI><a href="#[8c]">llm_le_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm.o(.text.llm_con_req_tx_cfm)
 <LI><a href="#[8c]">llm_le_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced 3 times from llm.o(.text.llm_create_con)
 <LI><a href="#[8c]">llm_le_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_task.o(.text.llm_enc_req_handler)
 <LI><a href="#[8c]">llm_le_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm.o(.text.llm_encryption_done)
 <LI><a href="#[8c]">llm_le_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm.o(.text.llm_encryption_start)
 <LI><a href="#[8c]">llm_le_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced 10 times from llm.o(.text.llm_init)
 <LI><a href="#[8c]">llm_le_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced 2 times from llm.o(.text.llm_le_adv_report_ind)
 <LI><a href="#[8c]">llm_le_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced 2 times from llm.o(.text.llm_set_adv_en)
 <LI><a href="#[8c]">llm_le_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm.o(.text.llm_set_adv_param)
 <LI><a href="#[8c]">llm_le_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced 2 times from llm.o(.text.llm_set_scan_en)
 <LI><a href="#[8c]">llm_le_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm.o(.text.llm_test_mode_start_rx)
 <LI><a href="#[8c]">llm_le_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm.o(.text.llm_test_mode_start_tx)
 <LI><a href="#[8c]">llm_le_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_util.o(.text.llm_util_adv_data_update)
 <LI><a href="#[ef]">llm_le_set_host_ch_class_cmd_sto_handler</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm_task.o(.rodata.llm_default_state)
 <LI><a href="#[9e]">llm_local_data_len_values</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm.o(.text.llm_init)
 <LI><a href="#[ba]">llm_state</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from controller_config.o(.constdata)
 <LI><a href="#[35]">main</a> from fsl_os_abstraction_bm.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[128]">main_task</a> from applmain.o(i.main_task) referenced from fsl_os_abstraction_bm.o(.data)
 <LI><a href="#[b5]">mibeacon_timer_handler</a> from mible_beacon.o(i.mibeacon_timer_handler) referenced from mible_beacon.o(i.mibeacon_init)
 <LI><a href="#[bd]">mible_server_init_handler</a> from mible_server.o(i.mible_server_init_handler) referenced from mible_server.o(.constdata)
 <LI><a href="#[be]">mible_server_start_handler</a> from mible_server.o(i.mible_server_start_handler) referenced from mible_server.o(.constdata)
 <LI><a href="#[b9]">mible_server_timeout_handler</a> from mible_server.o(i.mible_server_timeout_handler) referenced from mible_server.o(i.mible_server_init_handler)
 <LI><a href="#[c3]">mible_server_wait_cloud_ack_handler</a> from mible_server.o(i.mible_server_wait_cloud_ack_handler) referenced from mible_server.o(.constdata)
 <LI><a href="#[c2]">mible_server_wait_did_handler</a> from mible_server.o(i.mible_server_wait_did_handler) referenced from mible_server.o(.constdata)
 <LI><a href="#[c0]">mible_server_wait_login_ack_handler</a> from mible_server.o(i.mible_server_wait_login_ack_handler) referenced from mible_server.o(.constdata)
 <LI><a href="#[bf]">mible_server_wait_t1_handler</a> from mible_server.o(i.mible_server_wait_t1_handler) referenced from mible_server.o(.constdata)
 <LI><a href="#[c1]">mible_server_wait_t2_ack_handler</a> from mible_server.o(i.mible_server_wait_t2_ack_handler) referenced from mible_server.o(.constdata)
 <LI><a href="#[b8]">mible_std_arch_event_handler</a> from mible_ll_callback.o(i.mible_std_arch_event_handler) referenced from mible_server.o(i.mible_server_info_init)
 <LI><a href="#[b6]">mible_std_gap_event_handler</a> from mible_ll_callback.o(i.mible_std_gap_event_handler) referenced from mible_server.o(i.mible_server_info_init)
 <LI><a href="#[b7]">mible_std_gatts_event_handler</a> from mible_ll_callback.o(i.mible_std_gatts_event_handler) referenced from mible_server.o(i.mible_server_info_init)
 <LI><a href="#[99]">nvds_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_evt.o(.text.lld_evt_init)
 <LI><a href="#[99]">nvds_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld.o(.text.lld_init)
 <LI><a href="#[99]">nvds_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm.o(.text.llm_init)
 <LI><a href="#[99]">nvds_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from rwble.o(.text.rwble_init)
 <LI><a href="#[65]">privacyTimeout</a> from gap.o(.text.privacyTimeout) referenced from gap.o(.text.EnableHostPrivacyTimer)
 <LI><a href="#[91]">rwip_coex_cfg</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld.o(.text.lld_adv_start)
 <LI><a href="#[91]">rwip_coex_cfg</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld.o(.text.lld_con_start)
 <LI><a href="#[91]">rwip_coex_cfg</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_pdu.o(.text.lld_pdu_tx_prog)
 <LI><a href="#[91]">rwip_coex_cfg</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld.o(.text.lld_scan_start)
 <LI><a href="#[64]">rwip_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from nxp.o(.text.Controller_TaskHandler)
 <LI><a href="#[64]">rwip_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from nxp.o(.text.rwip_init)
 <LI><a href="#[64]">rwip_env</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from nxp.o(.text.rwip_reset)
 <LI><a href="#[98]">rwip_priority</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld.o(.text.lld_con_start)
 <LI><a href="#[98]">rwip_priority</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_evt.o(.text.lld_evt_end_isr)
 <LI><a href="#[98]">rwip_priority</a> from fw_symbols_mdk.h(ABSOLUTE) referenced 2 times from lld_evt.o(.text.lld_evt_restart)
 <LI><a href="#[98]">rwip_priority</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_evt.o(.text.lld_evt_scan_create)
 <LI><a href="#[98]">rwip_priority</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld_util.o(.text.lld_util_priority_set)
 <LI><a href="#[90]">rwip_rf</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llc_util.o(.text.llc_pdu_defer)
 <LI><a href="#[90]">rwip_rf</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld.o(.text.lld_con_start)
 <LI><a href="#[90]">rwip_rf</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld.o(.text.lld_init)
 <LI><a href="#[90]">rwip_rf</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from lld.o(.text.lld_move_to_slave)
 <LI><a href="#[90]">rwip_rf</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm.o(.text.llm_le_adv_report_ind)
 <LI><a href="#[90]">rwip_rf</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from llm.o(.text.llm_set_adv_en)
 <LI><a href="#[90]">rwip_rf</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from nxp.o(.text.rwip_init)
 <LI><a href="#[90]">rwip_rf</a> from fw_symbols_mdk.h(ABSOLUTE) referenced from nxp.o(.text.rwip_reset)
 <LI><a href="#[6a]">smCallback</a> from gap_sm_cb.o(.text.smCallback) referenced from gap.o(.text.InternalBle_Initialize)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[37]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[567]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[133]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[175]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[568]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[569]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[56a]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[56b]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[56c]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXT_GPIO_WAKEUP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>ACMP0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>ACMP1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RTC_SEC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>CS_WAKEUP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>CS_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>GPIOB_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PIN_INT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PIN_INT1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PIN_INT2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PIN_INT3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>OSC_INT_LOW_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>USB0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>FLEXCOMM0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>FLEXCOMM1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>FLEXCOMM2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FLEXCOMM3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>FSP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>QDEC0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>QDEC1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CTIMER0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CTIMER1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CTIMER2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CTIMER3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>WDT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>ADC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DAC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>XTAL_READY_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>FLASH_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPIFI0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SCT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>RNG_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CALIB_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>BLE_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>BLE_RX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>BLE_FREQ_HOP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>BOD_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>ACMP0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP0_DriverIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP0_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[3b]"></a>ACMP1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[56]"></a>ADC_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[4d]"></a>BLE_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>BLE_FREQ_HOP_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[5f]"></a>BLE_RX_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[5e]"></a>BLE_TX_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>BOD_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[5d]"></a>CALIB_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[3f]"></a>CS_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[3e]"></a>CS_WAKEUP_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[57]"></a>DAC_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[42]"></a>DMA0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[38]"></a>EXT_GPIO_WAKEUP_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[59]"></a>FLASH_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[4e]"></a>FSP_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[40]"></a>GPIOA_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[41]"></a>GPIOB_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[39]"></a>OSC_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[47]"></a>OSC_INT_LOW_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[43]"></a>PIN_INT0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[44]"></a>PIN_INT1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[45]"></a>PIN_INT2_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[46]"></a>PIN_INT3_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[4f]"></a>QDEC0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[50]"></a>QDEC1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[5c]"></a>RNG_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[3d]"></a>RTC_FR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[3c]"></a>RTC_SEC_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[5b]"></a>SCT0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[5a]"></a>SPIFI0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[48]"></a>USB0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[55]"></a>WDT_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[58]"></a>XTAL_READY_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[135]"></a>Ecdh_GenerateNewKeys</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, ecdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GetPseudoRandomNo
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_PointMult
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_Sub
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_Compare
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_Add
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDH_P256_GenerateKeys
</UL>

<P><STRONG><a name="[13b]"></a>Ecdh_ComputeDhKey</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, ecdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = Ecdh_ComputeDhKey &rArr; EcP256_PointMult &rArr; EcP256_FieldInv &rArr; Bi_Add
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_PointMult
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_IsZero
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDH_P256_ComputeDhKey
</UL>

<P><STRONG><a name="[13f]"></a>CCM_CreateA0</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, SW_AES128.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemSet
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>

<P><STRONG><a name="[142]"></a>sw_Aes128</STRONG> (Thumb, 3468 bytes, Stack size 56 bytes, SW_AES128.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = sw_Aes128 &rArr; AES_InverseMixColumn
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_MixColumn
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_InverseShiftSubBytes
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_InverseMixColumn
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_ExpandKey
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_AddKeyByteSubShiftKeyExpand
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_128_Encrypt
</UL>

<P><STRONG><a name="[146]"></a>sw_AES128_CCM</STRONG> (Thumb, 688 bytes, Stack size 136 bytes, SW_AES128.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemSet
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_128_Encrypt
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpyReverseOrder
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCmp
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecLib_XorN
</UL>

<P><STRONG><a name="[4dd]"></a>SecLib_set_rng_seed</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, SW_RNG.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Init
</UL>

<P><STRONG><a name="[14b]"></a>SecLib_get_random</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, SW_RNG.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SecLib_get_random &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GetRandomNo
</UL>

<P><STRONG><a name="[4e3]"></a>sw_sha256_initialize_output</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, SW_SHA256.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Init
</UL>

<P><STRONG><a name="[14d]"></a>sw_sha256_hash</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, SW_SHA256.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_sha256_hash_n
</UL>

<P><STRONG><a name="[56d]"></a>sw_sha256_update</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, SW_SHA256.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>sw_sha256_hash_n</STRONG> (Thumb, 630 bytes, Stack size 120 bytes, SW_SHA256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sw_sha256_hash_n
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_hash_n
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_sha256_hash
</UL>

<P><STRONG><a name="[139]"></a>Bi_Add</STRONG> (Thumb, 176 bytes, Stack size 28 bytes, big_integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Bi_Add
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecdh_GenerateNewKeys
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_SubModN
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_PointSub
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_PointDouble
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_PointAdd
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_FieldSub
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_FieldModP
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_FieldInv
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_FieldAdd
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_JacobiDouble
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_JacobiAdd
</UL>

<P><STRONG><a name="[137]"></a>Bi_Sub</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, big_integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Bi_Sub
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecdh_GenerateNewKeys
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_SubModN
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_PointSub
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_PointDouble
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_PointAdd
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_FieldSub
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_FieldModP
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_FieldModO
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_FieldInv
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_JacobiDouble
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_JacobiAdd
</UL>

<P><STRONG><a name="[13c]"></a>Bi_IsZero</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, big_integer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecdh_ComputeDhKey
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_PointDouble
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_PointAdd
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_JacobiDouble
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_JacobiAdd
</UL>

<P><STRONG><a name="[159]"></a>Bi_IsOne</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, big_integer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_FieldInv
</UL>

<P><STRONG><a name="[15a]"></a>Bi_RightShift</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, big_integer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_FieldInv
</UL>

<P><STRONG><a name="[153]"></a>Bi_Copy</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, big_integer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_PointDouble
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_PointAdd
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_FieldModP
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_FieldModO
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_FieldInv
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_JacobiAdd
</UL>

<P><STRONG><a name="[15d]"></a>Bi_IsSame</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, big_integer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_PointAdd
</UL>

<P><STRONG><a name="[158]"></a>Bi_SetZero</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, big_integer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_PointMult
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_PointSub
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_PointDouble
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_PointAdd
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_FieldInv
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_JacobiDouble
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_JacobiAdd
</UL>

<P><STRONG><a name="[154]"></a>Bi_RightShiftBy</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, big_integer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_FieldModO
</UL>

<P><STRONG><a name="[138]"></a>Bi_Compare</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, big_integer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecdh_GenerateNewKeys
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_FieldModO
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_FieldInv
</UL>

<P><STRONG><a name="[14f]"></a>EcP256_FieldAdd</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ec_p_256.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_Add
</UL>

<P><STRONG><a name="[150]"></a>EcP256_FieldSub</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ec_p_256.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_Sub
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_Add
</UL>

<P><STRONG><a name="[155]"></a>EcP256_FieldMult</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, ec_p_256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EcP256_FieldMult
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_PointMult
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_PointDouble
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_PointAdd
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_FieldModO
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_JacobiAdd
</UL>

<P><STRONG><a name="[151]"></a>EcP256_SubModN</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ec_p_256.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_Sub
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_Add
</UL>

<P><STRONG><a name="[152]"></a>EcP256_FieldModO</STRONG> (Thumb, 154 bytes, Stack size 176 bytes, ec_p_256.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_Sub
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_Compare
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_FieldMult
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_RightShiftBy
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_Copy
</UL>

<P><STRONG><a name="[156]"></a>EcP256_FieldModP</STRONG> (Thumb, 508 bytes, Stack size 48 bytes, ec_p_256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = EcP256_FieldModP &rArr; Bi_Add
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_Sub
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_Add
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_Copy
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_PointMult
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_PointDouble
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_PointAdd
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_JacobiDouble
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_JacobiAdd
</UL>

<P><STRONG><a name="[157]"></a>EcP256_FieldInv</STRONG> (Thumb, 308 bytes, Stack size 152 bytes, ec_p_256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = EcP256_FieldInv &rArr; Bi_Add
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_Sub
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_Compare
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_Add
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_SetZero
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_RightShift
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_IsOne
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_Copy
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_PointMult
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_PointDouble
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_PointAdd
</UL>

<P><STRONG><a name="[15b]"></a>EcP256_PointDouble</STRONG> (Thumb, 356 bytes, Stack size 184 bytes, ec_p_256.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_Sub
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_IsZero
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_Add
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_FieldMult
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_FieldModP
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_FieldInv
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_SetZero
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_Copy
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_PointAdd
</UL>

<P><STRONG><a name="[15c]"></a>EcP256_PointAdd</STRONG> (Thumb, 390 bytes, Stack size 192 bytes, ec_p_256.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_Sub
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_IsZero
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_Add
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_PointDouble
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_FieldMult
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_FieldModP
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_FieldInv
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_SetZero
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_IsSame
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_Copy
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_PointSub
</UL>

<P><STRONG><a name="[13a]"></a>EcP256_PointMult</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, ec_p_256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = EcP256_PointMult &rArr; EcP256_FieldInv &rArr; Bi_Add
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_FieldMult
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_FieldModP
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_FieldInv
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_JacobiDouble
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_JacobiAdd
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_SetZero
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecdh_GenerateNewKeys
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecdh_ComputeDhKey
</UL>

<P><STRONG><a name="[160]"></a>EcP256_PointSub</STRONG> (Thumb, 72 bytes, Stack size 64 bytes, ec_p_256.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_Sub
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_Add
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_PointAdd
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_SetZero
</UL>

<P><STRONG><a name="[14c]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecLib_get_random
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmrTicksFromMilliseconds
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertRadixNumToString
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_GeneratePasskey
</UL>

<P><STRONG><a name="[163]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertRadixNumToString
</UL>

<P><STRONG><a name="[161]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_ReserveNextAvailableChannel
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_DisconnectChannel
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[56e]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[2e9]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_gen_new_secret_key
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_start
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_enc_mgt_ind_handler
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_restart
</UL>

<P><STRONG><a name="[19a]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_reset
</UL>

<P><STRONG><a name="[56f]"></a>___aeabi_memcpy8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[49c]"></a>__aeabi_memcpy</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mibeacon_Set_AdvData
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dequeue
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_beacon_key
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_encode
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
</UL>

<P><STRONG><a name="[53d]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_miservice_init
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_info_init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibeacon_timer_handler
</UL>

<P><STRONG><a name="[178]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EIF_Read
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_encryption_start
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_slave_update
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_update_create
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_test_mode_start_tx
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_aes
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_start
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_adv_start
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_adv_param
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_le_adv_report_ind
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_con_req_tx_cfm
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_con_req_ind
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_encryption_done
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_init
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_terminate_ind_pdu_send
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_enc_req_pdu_send
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_start_enc_rsp_pdu_send
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_pause_enc_req_pdu_send
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_pause_enc_rsp_pdu_send
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_reject_ind_pdu_send
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_start_enc_req_pdu_send
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_enc_rsp_pdu_send
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_ping_req_pdu_send
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_length_req_pdu_send
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_con_param_req_pdu_send
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_con_update_pdu_send
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_update_after_param_req
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_ch_map_update_pdu_send
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_phy_req_pdu_send
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_phy_upd_ind_pdu_send
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_enc_mgt_ind_handler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_chnl_assess_timer_handler
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_rx_handler
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_restart
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_prog
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigHexInversion256
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GF_Jacobian_Point_Addition256
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GF_Jacobian_Point_Double256
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiplyBigHexModP256
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialModP256
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractBigHexMod256
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractFromSelfBigHexSign256
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPdiv2_256
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_multiplication_event_handler
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_con_param_rsp_pdu_send
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_req_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_length_rsp_handler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_ping_req_handler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enc_rsp_handler
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
</UL>

<P><STRONG><a name="[165]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[570]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[571]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
</UL>

<P><STRONG><a name="[49a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_miservice_init
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mibeacon_Set_AdvData
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_SetPseudoRandomNoSeed
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GetPseudoRandomNo
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_bonding_handler
</UL>

<P><STRONG><a name="[572]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_HciRecv
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_SendSmpKeys
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_SendLeFlowControlCredit
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_ConnectionParameterUpdateResponse
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_ConnectionParameterUpdateRequest
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_SendLeCbConnectionRequest
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_SendLeCbConnectionResponse
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_SendCommandReject
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_SendDisconnectRequest
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_test_mode_start_rx
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_test_mode_start_tx
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_adv_en
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_adv_param
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_init
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_SendDisconnectResponse
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_ch_assess_get_local_ch_map
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_start
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_init
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_SmpAh
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_cmd_hdr_rx_evt_handler
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_rx_done
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigHexInversion256
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GF_Jacobian_Point_Addition256
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiplyBigHexModP256
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialModP256
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_multiplication_event_handler
</UL>

<P><STRONG><a name="[45a]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
</UL>

<P><STRONG><a name="[310]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_chmap_update_req_ind_handler
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_rx_done
</UL>

<P><STRONG><a name="[167]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
</UL>

<P><STRONG><a name="[16b]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_modf
</UL>

<P><STRONG><a name="[16c]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[16d]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
</UL>

<P><STRONG><a name="[16e]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>

<P><STRONG><a name="[16f]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[170]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[171]"></a>__aeabi_l2d</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[172]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[173]"></a>__aeabi_d2lz</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dfixl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[451]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[455]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[453]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[573]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[522]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[162]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[574]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[575]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[576]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[169]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[51d]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[577]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[134]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[578]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[12e]"></a>APP_PlfReset</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, qnble.o(.text.APP_PlfReset))
<BR>[Address Reference Count : 1]<UL><LI> controller_config.o(.data)
</UL>
<P><STRONG><a name="[1cc]"></a>AddBigHexModP256</STRONG> (Thumb, 970 bytes, Stack size unknown bytes, ecc_p256.o(.text.AddBigHexModP256))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GF_Jacobian_Point_Double256
</UL>

<P><STRONG><a name="[177]"></a>AddPdiv2_256</STRONG> (Thumb, 1428 bytes, Stack size unknown bytes, ecc_p256.o(.text.AddPdiv2_256))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = AddPdiv2_256 &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigHexInversion256
</UL>

<P><STRONG><a name="[179]"></a>AttServer_SendErrorResponse</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, att.o(.text.AttServer_SendErrorResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = AttServer_SendErrorResponse &rArr; att_SendData &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGattServer_SendAttributeReadStatus
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGattServer_SendAttributeWrittenStatus
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientFindInformationRequest
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientFindByTypeValueRequest
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientReadByTypeRequest
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientReadRequest
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientReadBlobRequest
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientReadMultipleRequest
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientReadByGroupTypeRequest
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientWriteRequest
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleUnsupportedOpcode
</UL>

<P><STRONG><a name="[17b]"></a>AttServer_SendExchangeMtuResponse</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, att.o(.text.AttServer_SendExchangeMtuResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = AttServer_SendExchangeMtuResponse &rArr; att_SendData &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientExchangeMtuRequest
</UL>

<P><STRONG><a name="[17c]"></a>AttServer_SendFindByTypeValueResponse</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, att.o(.text.AttServer_SendFindByTypeValueResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = AttServer_SendFindByTypeValueResponse &rArr; att_SendData &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientFindByTypeValueRequest
</UL>

<P><STRONG><a name="[17d]"></a>AttServer_SendFindInformationResponse</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, att.o(.text.AttServer_SendFindInformationResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = AttServer_SendFindInformationResponse &rArr; att_SendData &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientFindInformationRequest
</UL>

<P><STRONG><a name="[17e]"></a>AttServer_SendHandleValueIndication</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, att.o(.text.AttServer_SendHandleValueIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = AttServer_SendHandleValueIndication &rArr; att_SendData &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSendInstantNotificationIndication
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSendNotificationIndication
</UL>

<P><STRONG><a name="[17f]"></a>AttServer_SendHandleValueNotification</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, att.o(.text.AttServer_SendHandleValueNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = AttServer_SendHandleValueNotification &rArr; att_SendData &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSendInstantNotificationIndication
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSendNotificationIndication
</UL>

<P><STRONG><a name="[180]"></a>AttServer_SendReadBlobResponse</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, att.o(.text.AttServer_SendReadBlobResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = AttServer_SendReadBlobResponse &rArr; att_SendData &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientReadBlobRequest
</UL>

<P><STRONG><a name="[181]"></a>AttServer_SendReadByGroupTypeResponse</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, att.o(.text.AttServer_SendReadByGroupTypeResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = AttServer_SendReadByGroupTypeResponse &rArr; att_SendData &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientReadByGroupTypeRequest
</UL>

<P><STRONG><a name="[182]"></a>AttServer_SendReadByTypeResponse</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, att.o(.text.AttServer_SendReadByTypeResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = AttServer_SendReadByTypeResponse &rArr; att_SendData &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientReadByTypeRequest
</UL>

<P><STRONG><a name="[183]"></a>AttServer_SendReadMultipleResponse</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, att.o(.text.AttServer_SendReadMultipleResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = AttServer_SendReadMultipleResponse &rArr; att_SendData &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientReadMultipleRequest
</UL>

<P><STRONG><a name="[184]"></a>AttServer_SendReadResponse</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, att.o(.text.AttServer_SendReadResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = AttServer_SendReadResponse &rArr; att_SendData &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGattServer_SendAttributeReadStatus
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientReadRequest
</UL>

<P><STRONG><a name="[185]"></a>AttServer_SendWriteResponse</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, att.o(.text.AttServer_SendWriteResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = AttServer_SendWriteResponse &rArr; att_SendData &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGattServer_SendAttributeWrittenStatus
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientWriteRequest
</UL>

<P><STRONG><a name="[186]"></a>Att_GetMtu</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, att.o(.text.Att_GetMtu))
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_indexForDeviceId
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGatt_GetMtu
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_HandleRecvData
</UL>

<P><STRONG><a name="[188]"></a>Att_Init</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, att.o(.text.Att_Init))
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_InitializeInternalCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGatt_Init
</UL>

<P><STRONG><a name="[18a]"></a>Att_NotifyConnection</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, att.o(.text.Att_NotifyConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Att_NotifyConnection &rArr; TMR_AllocateTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_AllocateTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_notifyConnectedDevice
</UL>

<P><STRONG><a name="[18c]"></a>Att_NotifyDisconnection</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, att.o(.text.Att_NotifyDisconnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Att_NotifyDisconnection &rArr; TMR_FreeTimer &rArr; TMR_StopTimer &rArr; StackTimer_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_FreeTimer
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_indexForDeviceId
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciGenericCbMsgHandler
</UL>

<P><STRONG><a name="[274]"></a>Att_RegisterOpcodeCallback</STRONG> (Thumb, 160 bytes, Stack size unknown bytes, att_cb.o(.text.Att_RegisterOpcodeCallback))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGattServer_Init
</UL>

<P><STRONG><a name="[276]"></a>Att_RegisterTimeoutCallback</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, att_cb.o(.text.Att_RegisterTimeoutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGattServer_Init
</UL>

<P><STRONG><a name="[275]"></a>Att_RegisterUnsupportedOpcodeCallback</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, att_cb.o(.text.Att_RegisterUnsupportedOpcodeCallback))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGattServer_Init
</UL>

<P><STRONG><a name="[18e]"></a>Att_SetMtu</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, att.o(.text.Att_SetMtu))
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_indexForDeviceId
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientExchangeMtuRequest
</UL>

<P><STRONG><a name="[20]"></a>BLE_IRQHandler</STRONG> (Thumb, 268 bytes, Stack size unknown bytes, rwble.o(.text.BLE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BLE_IRQHandler &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Semaphore_Give
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup_end (via Veneer)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_timer_isr (via Veneer)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_crypt_isr (via Veneer)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_sw_isr (via Veneer)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_finetimer_isr (via Veneer)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_rx_isr
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_end_isr
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[198]"></a>BLE_Init</STRONG> (Thumb, 320 bytes, Stack size unknown bytes, qnble.o(.text.BLE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = BLE_Init &rArr; NXP_InitBleCfg &rArr; RNG_Init &rArr; RNG_Drv_Init &rArr; ADC_Init &rArr; ADC_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NXP_InitBleCfg
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unloaded_area_init (via Veneer)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_ble_sleep (via Veneer)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[a6]"></a>Ble_HciRecv</STRONG> (Thumb, 2376 bytes, Stack size unknown bytes, hci_commands.o(.text.Ble_HciRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = Ble_HciRecv &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferFree
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_RecvFragmentOfPacket
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_init.o(i.Ble_Initialize)
</UL>
<P><STRONG><a name="[1a1]"></a>Ble_HostInitialize</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, gap_api2msg.o(.text.Ble_HostInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Ble_HostInitialize &rArr; InternalBle_Initialize &rArr; DevDb_Init &rArr; App_NvmRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalBle_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Initialize
</UL>

<P><STRONG><a name="[437]"></a>Controller_Init</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, nxp.o(.text.Controller_Init))
<BR><BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Initialize
</UL>

<P><STRONG><a name="[268]"></a>Controller_SendSingleAdvertisement</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, gap.o(.text.Controller_SendSingleAdvertisement))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_SendSingleAdvertisement
</UL>

<P><STRONG><a name="[1a3]"></a>Controller_TaskHandler</STRONG> (Thumb, 292 bytes, Stack size unknown bytes, nxp.o(.text.Controller_TaskHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = Controller_TaskHandler &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptEnable
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptDisable
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventWait
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferFree
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_schedule (via Veneer)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_set (via Veneer)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EIF_RxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControllerTask
</UL>

<P><STRONG><a name="[1aa]"></a>DevDb_AddConnection</STRONG> (Thumb, 216 bytes, Stack size unknown bytes, device_db.o(.text.DevDb_AddConnection))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_LoadMostRecentlyUsedDeviceAddressAndType
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLeCbMsgHandler
</UL>

<P><STRONG><a name="[1ac]"></a>DevDb_CheckIfBondedDeviceAddressIsStatic</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, device_db.o(.text.DevDb_CheckIfBondedDeviceAddressIsStatic))
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmIsEntryOccupied
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNonZeroAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_notifyConnectedDevice
</UL>

<P><STRONG><a name="[1af]"></a>DevDb_CheckIfBondedDeviceHasDistributedIrk</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, device_db.o(.text.DevDb_CheckIfBondedDeviceHasDistributedIrk))
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmIsEntryOccupied
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_checkNextIrk
</UL>

<P><STRONG><a name="[1b0]"></a>DevDb_CheckIfBondedDeviceIsActive</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, device_db.o(.text.DevDb_CheckIfBondedDeviceIsActive))
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmIsEntryOccupied
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_notifyConnectedDevice
</UL>

<P><STRONG><a name="[1b1]"></a>DevDb_GetBondedDeviceAddress</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, device_db.o(.text.DevDb_GetBondedDeviceAddress))
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmIsEntryOccupied
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_notifyConnectedDevice
</UL>

<P><STRONG><a name="[1b2]"></a>DevDb_GetBondedDeviceCsrk</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, device_db.o(.text.DevDb_GetBondedDeviceCsrk))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = DevDb_GetBondedDeviceCsrk &rArr; App_NvmRead
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NvmRead
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmIsEntryOccupied
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_checkNextCsrk
</UL>

<P><STRONG><a name="[1b4]"></a>DevDb_GetBondedDeviceIrk</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, device_db.o(.text.DevDb_GetBondedDeviceIrk))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmIsEntryOccupied
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_verifyPraAtAppRequest
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_autoConnectCheckNextIrk
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_checkNextIrk
</UL>

<P><STRONG><a name="[1b5]"></a>DevDb_GetBondedDeviceSignCounter</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, device_db.o(.text.DevDb_GetBondedDeviceSignCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = DevDb_GetBondedDeviceSignCounter &rArr; App_NvmRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NvmRead
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmIsEntryOccupied
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_checkNextCsrk
</UL>

<P><STRONG><a name="[253]"></a>DevDb_GetCccd</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, device_db.o(.text.DevDb_GetCccd))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_CheckIndicationStatus
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_CheckNotificationStatus
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPartAttributeValue
</UL>

<P><STRONG><a name="[281]"></a>DevDb_GetDeviceId</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, device_db.o(.text.DevDb_GetDeviceId))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleLeRemoteConnectionParameterRequest
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleRecvSignaling
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciGenericCbMsgHandler
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLeCbMsgHandler
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCommandCompleteCbMsgHandler
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleLeConnectionUpdateComplete
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_SendCommandReject
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_HandleRecvLeCbData
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_HandleRecvData
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_ConnHandleToDeviceHandle
</UL>

<P><STRONG><a name="[2fd]"></a>DevDb_GetNbBondedDevices</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, device_db.o(.text.DevDb_GetNbBondedDevices))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_notifyConnectedDevice
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_checkForAutoConnect
</UL>

<P><STRONG><a name="[1b6]"></a>DevDb_Init</STRONG> (Thumb, 176 bytes, Stack size unknown bytes, device_db.o(.text.DevDb_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = DevDb_Init &rArr; App_NvmRead
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemSet
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NvmRead
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmIsEntryOccupied
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalBle_Initialize
</UL>

<P><STRONG><a name="[1b7]"></a>DevDb_LoadBondingInformation</STRONG> (Thumb, 172 bytes, Stack size unknown bytes, device_db.o(.text.DevDb_LoadBondingInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = DevDb_LoadBondingInformation &rArr; App_NvmRead
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NvmRead
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmIsEntryOccupied
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_MarkDeviceAsBonded
</UL>

<P><STRONG><a name="[1ab]"></a>DevDb_LoadMostRecentlyUsedDeviceAddressAndType</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, device_db.o(.text.DevDb_LoadMostRecentlyUsedDeviceAddressAndType))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_AddConnection
</UL>

<P><STRONG><a name="[262]"></a>DevDb_LoadPublicDeviceAddress</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, device_db.o(.text.DevDb_LoadPublicDeviceAddress))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_ReadPublicAddress
</UL>

<P><STRONG><a name="[1b8]"></a>DevDb_MarkDeviceAsBonded</STRONG> (Thumb, 116 bytes, Stack size unknown bytes, device_db.o(.text.DevDb_MarkDeviceAsBonded))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = DevDb_MarkDeviceAsBonded &rArr; DevDb_LoadBondingInformation &rArr; App_NvmRead
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_LoadBondingInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_signatureVerificationComplete
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_irkCheckComplete
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_SignalDevicePairedAndBonded
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_notifyConnectedDevice
</UL>

<P><STRONG><a name="[1b9]"></a>DevDb_ReleaseConnection</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, device_db.o(.text.DevDb_ReleaseConnection))
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciGenericCbMsgHandler
</UL>

<P><STRONG><a name="[1ba]"></a>DevDb_SaveCccd</STRONG> (Thumb, 176 bytes, Stack size unknown bytes, device_db.o(.text.DevDb_SaveCccd))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = DevDb_SaveCccd &rArr; App_NvmWrite &rArr; NvSaveOnIdle &rArr; __NvSaveOnIdle &rArr; NvAddSaveRequestToQueue &rArr; NvProcessFirstSaveInQueue &rArr;  NvAddSaveRequestToQueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NvmWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientWriteRequest
</UL>

<P><STRONG><a name="[1bc]"></a>DevDb_SaveKeys</STRONG> (Thumb, 324 bytes, Stack size unknown bytes, device_db.o(.text.DevDb_SaveKeys))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNonZeroAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smCallback
</UL>

<P><STRONG><a name="[31c]"></a>DevDb_SaveLocalPublicAddress</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, device_db.o(.text.DevDb_SaveLocalPublicAddress))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCommandCompleteCbMsgHandler
</UL>

<P><STRONG><a name="[252]"></a>DevDb_SaveMostRecentlyUsedAddressType</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, device_db.o(.text.DevDb_SaveMostRecentlyUsedAddressType))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_SetAdvertisingParameters
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_AutoConnectWithPra
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_Connect
</UL>

<P><STRONG><a name="[269]"></a>DevDb_SaveMostRecentlyUsedRandomAddress</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, device_db.o(.text.DevDb_SaveMostRecentlyUsedRandomAddress))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_SetRandomAddress
</UL>

<P><STRONG><a name="[1bd]"></a>DevDb_SetPeerSignCounter</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, device_db.o(.text.DevDb_SetPeerSignCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = DevDb_SetPeerSignCounter &rArr; App_NvmWrite &rArr; NvSaveOnIdle &rArr; __NvSaveOnIdle &rArr; NvAddSaveRequestToQueue &rArr; NvProcessFirstSaveInQueue &rArr;  NvAddSaveRequestToQueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NvmWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleVerifiedSignedWriteCommand
</UL>

<P><STRONG><a name="[1be]"></a>DevDb_SignalDevicePaired</STRONG> (Thumb, 136 bytes, Stack size unknown bytes, device_db.o(.text.DevDb_SignalDevicePaired))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNonZeroAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_SignalDevicePairedAndBonded
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smCallback
</UL>

<P><STRONG><a name="[1bf]"></a>DevDb_SignalDevicePairedAndBonded</STRONG> (Thumb, 196 bytes, Stack size unknown bytes, device_db.o(.text.DevDb_SignalDevicePairedAndBonded))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = DevDb_SignalDevicePairedAndBonded &rArr; App_NvmWrite &rArr; NvSaveOnIdle &rArr; __NvSaveOnIdle &rArr; NvAddSaveRequestToQueue &rArr; NvProcessFirstSaveInQueue &rArr;  NvAddSaveRequestToQueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NvmWrite
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_MarkDeviceAsBonded
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmIsEntryOccupied
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_SignalDevicePaired
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smCallback
</UL>

<P><STRONG><a name="[132]"></a>EIF_FlowOff</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, eif_adapter.o(.text.EIF_FlowOff))
<BR>[Address Reference Count : 1]<UL><LI> controller_config.o(.data)
</UL>
<P><STRONG><a name="[131]"></a>EIF_FlowOn</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, eif_adapter.o(.text.EIF_FlowOn))
<BR>[Address Reference Count : 1]<UL><LI> controller_config.o(.data)
</UL>
<P><STRONG><a name="[12f]"></a>EIF_Read</STRONG> (Thumb, 232 bytes, Stack size unknown bytes, eif_adapter.o(.text.EIF_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = EIF_Read &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> controller_config.o(.data)
</UL>
<P><STRONG><a name="[1a4]"></a>EIF_RxCallback</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, eif_adapter.o(.text.EIF_RxCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_TaskHandler
</UL>

<P><STRONG><a name="[130]"></a>EIF_Write</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, eif_adapter.o(.text.EIF_Write))
<BR>[Address Reference Count : 1]<UL><LI> controller_config.o(.data)
</UL>
<P><STRONG><a name="[1c7]"></a>GF_Jacobian_Point_Addition256</STRONG> (Thumb, 2032 bytes, Stack size unknown bytes, ecc_p256.o(.text.GF_Jacobian_Point_Addition256))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GF_Jacobian_Point_Addition256 &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GF_Jacobian_Point_Double256
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiplyBigHexModP256
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialModP256
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractBigHexMod256
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_multiplication_event_handler
</UL>

<P><STRONG><a name="[1c9]"></a>GF_Jacobian_Point_Double256</STRONG> (Thumb, 2208 bytes, Stack size unknown bytes, ecc_p256.o(.text.GF_Jacobian_Point_Double256))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GF_Jacobian_Point_Double256 &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiplyBigHexModP256
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialModP256
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractBigHexMod256
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddBigHexModP256
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GF_Jacobian_Point_Addition256
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_multiplication_event_handler
</UL>

<P><STRONG><a name="[1cd]"></a>Gap_CheckIndicationStatus</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, gap_api2msg.o(.text.Gap_CheckIndicationStatus))
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_CheckIndicationStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_gatts_notify_or_indicate
</UL>

<P><STRONG><a name="[1cf]"></a>Gap_CheckNotificationStatus</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, gap_api2msg.o(.text.Gap_CheckNotificationStatus))
<BR><BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_CheckNotificationStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_gatts_notify_or_indicate
</UL>

<P><STRONG><a name="[1d1]"></a>Gap_Disconnect</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, gap_api2msg.o(.text.Gap_Disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = Gap_Disconnect &rArr; MEM_BufferAllocWithId &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddTailMsg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_HandleKeys
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_gap_disconnect
</UL>

<P><STRONG><a name="[1d4]"></a>Gap_EnableUpdateConnectionParameters</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, gap_api2msg.o(.text.Gap_EnableUpdateConnectionParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = Gap_EnableUpdateConnectionParameters &rArr; MEM_BufferAllocWithId &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddTailMsg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleConnManager_GapPeripheralEvent
</UL>

<P><STRONG><a name="[1d5]"></a>Gap_LeSetPhy</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, gap_api2msg.o(.text.Gap_LeSetPhy))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = Gap_LeSetPhy &rArr; MEM_BufferAllocWithId &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddTailMsg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleConnManager_GapCommonConfig
</UL>

<P><STRONG><a name="[1d6]"></a>Gap_ReadPublicDeviceAddress</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, gap_api2msg.o(.text.Gap_ReadPublicDeviceAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = Gap_ReadPublicDeviceAddress &rArr; MEM_BufferAllocWithId &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddTailMsg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleConnManager_GapCommonConfig
</UL>

<P><STRONG><a name="[1d7]"></a>Gap_RejectPairing</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, gap_api2msg.o(.text.Gap_RejectPairing))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = Gap_RejectPairing &rArr; MEM_BufferAllocWithId &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddTailMsg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleConnManager_GapPeripheralEvent
</UL>

<P><STRONG><a name="[1d8]"></a>Gap_SetAdvertisingData</STRONG> (Thumb, 392 bytes, Stack size unknown bytes, gap_api2msg.o(.text.Gap_SetAdvertisingData))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = Gap_SetAdvertisingData &rArr; MEM_BufferAllocWithId &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddTailMsg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleConnManager_GapPeripheralConfig
</UL>

<P><STRONG><a name="[1d9]"></a>Gap_SetAdvertisingParameters</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, gap_api2msg.o(.text.Gap_SetAdvertisingParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = Gap_SetAdvertisingParameters &rArr; MEM_BufferAllocWithId &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddTailMsg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_gap_adv_start
</UL>

<P><STRONG><a name="[1da]"></a>Gap_StartAdvertising</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, gap_api2msg.o(.text.Gap_StartAdvertising))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = Gap_StartAdvertising &rArr; MEM_BufferAllocWithId &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddTailMsg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartAdvertising
</UL>

<P><STRONG><a name="[1db]"></a>Gap_UpdateConnectionParameters</STRONG> (Thumb, 172 bytes, Stack size unknown bytes, gap_api2msg.o(.text.Gap_UpdateConnectionParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = Gap_UpdateConnectionParameters &rArr; MEM_BufferAllocWithId &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddTailMsg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_gap_update_conn_params
</UL>

<P><STRONG><a name="[1dc]"></a>GattDb_AttFindByTypeValue</STRONG> (Thumb, 220 bytes, Stack size unknown bytes, gatt_db_att.o(.text.GattDb_AttFindByTypeValue))
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findNextDbIndexFor16BitUuidAndValue
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientFindByTypeValueRequest
</UL>

<P><STRONG><a name="[1de]"></a>GattDb_AttFindInformation</STRONG> (Thumb, 312 bytes, Stack size unknown bytes, gatt_db_att.o(.text.GattDb_AttFindInformation))
<BR><BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGatt_GetMtu
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientFindInformationRequest
</UL>

<P><STRONG><a name="[1e0]"></a>GattDb_AttPrepareNotificationIndication</STRONG> (Thumb, 128 bytes, Stack size unknown bytes, gatt_db_att.o(.text.GattDb_AttPrepareNotificationIndication))
<BR><BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_GetIndexOfHandle
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGatt_GetMtu
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAttributeAccess
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPartAttributeValue
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSendNotificationIndication
</UL>

<P><STRONG><a name="[1e4]"></a>GattDb_AttRead</STRONG> (Thumb, 124 bytes, Stack size unknown bytes, gatt_db_att.o(.text.GattDb_AttRead))
<BR><BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_GetIndexOfHandle
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGatt_GetMtu
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAttributeAccess
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPartAttributeValue
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGattServer_SendAttributeReadStatus
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientReadRequest
</UL>

<P><STRONG><a name="[1e5]"></a>GattDb_AttReadBlob</STRONG> (Thumb, 160 bytes, Stack size unknown bytes, gatt_db_att.o(.text.GattDb_AttReadBlob))
<BR><BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_GetIndexOfHandle
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGatt_GetMtu
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAttributeAccess
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPartAttributeValue
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientReadBlobRequest
</UL>

<P><STRONG><a name="[1e6]"></a>GattDb_AttReadByGroupType</STRONG> (Thumb, 428 bytes, Stack size unknown bytes, gatt_db_att.o(.text.GattDb_AttReadByGroupType))
<BR><BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGatt_GetMtu
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAttributeAccess
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findNextDbIndexForReadByGroupTypeUuid
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPartAttributeValue
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientReadByGroupTypeRequest
</UL>

<P><STRONG><a name="[1e8]"></a>GattDb_AttReadByType</STRONG> (Thumb, 384 bytes, Stack size unknown bytes, gatt_db_att.o(.text.GattDb_AttReadByType))
<BR><BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGatt_GetMtu
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAttributeAccess
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findNextDbIndexForReadByTypeUuid
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPartAttributeValue
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientReadByTypeRequest
</UL>

<P><STRONG><a name="[1ea]"></a>GattDb_AttReadMultiple</STRONG> (Thumb, 204 bytes, Stack size unknown bytes, gatt_db_att.o(.text.GattDb_AttReadMultiple))
<BR><BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_GetIndexOfHandle
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGatt_GetMtu
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAttributeAccess
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPartAttributeValue
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientReadMultipleRequest
</UL>

<P><STRONG><a name="[1eb]"></a>GattDb_AttSignedWriteCommand</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, gatt_db_att.o(.text.GattDb_AttSignedWriteCommand))
<BR><BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_GetIndexOfHandle
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAttribute
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleVerifiedSignedWriteCommand
</UL>

<P><STRONG><a name="[1ed]"></a>GattDb_AttWrite</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, gatt_db_att.o(.text.GattDb_AttWrite))
<BR><BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_GetIndexOfHandle
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAttributeAccess
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAttribute
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientWriteRequest
</UL>

<P><STRONG><a name="[1ee]"></a>GattDb_AttWriteCommand</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, gatt_db_att.o(.text.GattDb_AttWriteCommand))
<BR><BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_GetIndexOfHandle
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAttributeAccess
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAttribute
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientWriteCommand
</UL>

<P><STRONG><a name="[1ef]"></a>GattDb_FindCccdHandleForCharValueHandle</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, gatt_db_app.o(.text.GattDb_FindCccdHandleForCharValueHandle))
<BR><BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_GetIndexOfHandle
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattDb_getCharacteristicEndIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_gatts_notify_or_indicate
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSendNotificationIndication
</UL>

<P><STRONG><a name="[1f1]"></a>GattDb_FindCharValueHandleInService</STRONG> (Thumb, 236 bytes, Stack size unknown bytes, gatt_db_app.o(.text.GattDb_FindCharValueHandleInService))
<BR><BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_GetIndexOfHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_gatts_service_init
</UL>

<P><STRONG><a name="[1f2]"></a>GattDb_FindServiceHandle</STRONG> (Thumb, 196 bytes, Stack size unknown bytes, gatt_db_app.o(.text.GattDb_FindServiceHandle))
<BR><BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_GetIndexOfHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_gatts_service_init
</UL>

<P><STRONG><a name="[2fe]"></a>GattDb_GetServiceHandleForAttributeIndex</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, gatt_db_att.o(.text.GattDb_GetServiceHandleForAttributeIndex))
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_checkSecurityForDatabaseAccess
</UL>

<P><STRONG><a name="[1f3]"></a>GattDb_WriteAttribute</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, gatt_db_app.o(.text.GattDb_WriteAttribute))
<BR><BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_GetIndexOfHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_gatts_value_set
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_gatts_service_init
</UL>

<P><STRONG><a name="[1f4]"></a>GattServer_RegisterCallback</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, gatt_api2msg.o(.text.GattServer_RegisterCallback))
<BR><BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGattServer_RegisterCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RegisterGattServerCallback
</UL>

<P><STRONG><a name="[1f6]"></a>GattServer_RegisterHandlesForWriteNotifications</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, gatt_api2msg.o(.text.GattServer_RegisterHandlesForWriteNotifications))
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGattServer_RegisterHandlesForWriteNotifications
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_Config
</UL>

<P><STRONG><a name="[1f8]"></a>GattServer_SendAttributeWrittenStatus</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, gatt_api2msg.o(.text.GattServer_SendAttributeWrittenStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = GattServer_SendAttributeWrittenStatus &rArr; MEM_BufferAllocWithId &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddTailMsg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_GattServerCallback
</UL>

<P><STRONG><a name="[1f9]"></a>GattServer_SendInstantValueIndication</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, gatt_api2msg.o(.text.GattServer_SendInstantValueIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = GattServer_SendInstantValueIndication &rArr; MEM_BufferAllocWithId &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddTailMsg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_gatts_notify_or_indicate
</UL>

<P><STRONG><a name="[1fa]"></a>GattServer_SendInstantValueNotification</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, gatt_api2msg.o(.text.GattServer_SendInstantValueNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = GattServer_SendInstantValueNotification &rArr; MEM_BufferAllocWithId &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddTailMsg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_gatts_notify_or_indicate
</UL>

<P><STRONG><a name="[1fb]"></a>Gatt_Init</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, gatt_api2msg.o(.text.Gatt_Init))
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGatt_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalBle_Initialize
</UL>

<P><STRONG><a name="[1fd]"></a>Hci2Host_MsgHandler</STRONG> (Thumb, 168 bytes, Stack size unknown bytes, host_hl_task.o(.text.Hci2Host_MsgHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = Hci2Host_MsgHandler &rArr; hciGenericCbMsgHandler &rArr; Sm_SendCmd &rArr; SmStates_RunStateMachine &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferFree
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleLeRemoteConnectionParameterRequest
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleRecvSignaling
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciGenericCbMsgHandler
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCommandStatusCbMsgHandler
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLeCbMsgHandler
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_HciCbEventHandler
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCommandCompleteCbMsgHandler
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleLeConnectionUpdateComplete
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_HandleRecvLeCbData
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_HandleRecvData
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_TaskHandler
</UL>

<P><STRONG><a name="[257]"></a>Hci_Disconnect</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_Disconnect))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_Disconnect
</UL>

<P><STRONG><a name="[208]"></a>Hci_Init</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_Init))
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalBle_Initialize
</UL>

<P><STRONG><a name="[317]"></a>Hci_LeAddDeviceToResolvingList</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_LeAddDeviceToResolvingList))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCommandCompleteCbMsgHandler
</UL>

<P><STRONG><a name="[209]"></a>Hci_LeAddDeviceToWhiteList</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_LeAddDeviceToWhiteList))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_AddDeviceToWhiteList
</UL>

<P><STRONG><a name="[258]"></a>Hci_LeClearResolvingList</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_LeClearResolvingList))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_EnableControllerPrivacy
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCommandCompleteCbMsgHandler
</UL>

<P><STRONG><a name="[254]"></a>Hci_LeClearWhiteList</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_LeClearWhiteList))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_ClearWhiteList
</UL>

<P><STRONG><a name="[285]"></a>Hci_LeConnectionUpdate</STRONG> (Thumb, 124 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_LeConnectionUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_ConnectionParameterUpdateResponse
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_ConnectionParameterUpdateRequest
</UL>

<P><STRONG><a name="[20a]"></a>Hci_LeCreateConnection</STRONG> (Thumb, 168 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_LeCreateConnection))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_AutoConnectWithPra
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_Connect
</UL>

<P><STRONG><a name="[256]"></a>Hci_LeCreateConnectionCancel</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_LeCreateConnectionCancel))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_Disconnect
</UL>

<P><STRONG><a name="[2d3]"></a>Hci_LeLongTermKeyRequestNegativeReply</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_LeLongTermKeyRequestNegativeReply))
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_CallLlStateMachine
</UL>

<P><STRONG><a name="[2cf]"></a>Hci_LeLongTermKeyRequestReply</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_LeLongTermKeyRequestReply))
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_CallLlStateMachine
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForMasterStkEncryption
</UL>

<P><STRONG><a name="[263]"></a>Hci_LeReadAdvertisingChannelTxPower</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_LeReadAdvertisingChannelTxPower))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_ReadRadioPowerLevel
</UL>

<P><STRONG><a name="[314]"></a>Hci_LeReadBufferSize</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_LeReadBufferSize))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCommandCompleteCbMsgHandler
</UL>

<P><STRONG><a name="[319]"></a>Hci_LeReadLocalSupportedFeatures</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_LeReadLocalSupportedFeatures))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCommandCompleteCbMsgHandler
</UL>

<P><STRONG><a name="[31f]"></a>Hci_LeReadPeerResolvableAddress</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_LeReadPeerResolvableAddress))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCommandCompleteCbMsgHandler
</UL>

<P><STRONG><a name="[25d]"></a>Hci_LeReadPhy</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_LeReadPhy))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_LeReadPhy
</UL>

<P><STRONG><a name="[31e]"></a>Hci_LeReadSuggestedDefaultDataLength</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_LeReadSuggestedDefaultDataLength))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCommandCompleteCbMsgHandler
</UL>

<P><STRONG><a name="[266]"></a>Hci_LeReadWhiteListSize</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_LeReadWhiteListSize))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_ReadWhiteListSize
</UL>

<P><STRONG><a name="[294]"></a>Hci_LeRemoteConnectionParameterRequestNegativeReply</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_LeRemoteConnectionParameterRequestNegativeReply))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleLeRemoteConnectionParameterRequest
</UL>

<P><STRONG><a name="[295]"></a>Hci_LeRemoteConnectionParameterRequestReply</STRONG> (Thumb, 124 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_LeRemoteConnectionParameterRequestReply))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleLeRemoteConnectionParameterRequest
</UL>

<P><STRONG><a name="[20b]"></a>Hci_LeRemoveDeviceFromWhiteList</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_LeRemoveDeviceFromWhiteList))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_RemoveDeviceFromWhiteList
</UL>

<P><STRONG><a name="[259]"></a>Hci_LeSetAddressResolutionEnable</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_LeSetAddressResolutionEnable))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_EnableControllerPrivacy
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCommandCompleteCbMsgHandler
</UL>

<P><STRONG><a name="[20c]"></a>Hci_LeSetAdvertisingData</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_LeSetAdvertisingData))
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemSet
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_SetAdvertisingData
</UL>

<P><STRONG><a name="[26d]"></a>Hci_LeSetAdvertisingDisable</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_LeSetAdvertisingDisable))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_StopAdvertising
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldmTimeout
</UL>

<P><STRONG><a name="[26a]"></a>Hci_LeSetAdvertisingEnable</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_LeSetAdvertisingEnable))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_StartAdvertising
</UL>

<P><STRONG><a name="[20d]"></a>Hci_LeSetAdvertisingParameters</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_LeSetAdvertisingParameters))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_SetAdvertisingParameters
</UL>

<P><STRONG><a name="[271]"></a>Hci_LeSetDataLength</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_LeSetDataLength))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_UpdateLeDataLength
</UL>

<P><STRONG><a name="[25e]"></a>Hci_LeSetDefaultPhy</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_LeSetDefaultPhy))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_LeSetPhy
</UL>

<P><STRONG><a name="[31a]"></a>Hci_LeSetEventMask</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_LeSetEventMask))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCommandCompleteCbMsgHandler
</UL>

<P><STRONG><a name="[25f]"></a>Hci_LeSetPhy</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_LeSetPhy))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_LeSetPhy
</UL>

<P><STRONG><a name="[20e]"></a>Hci_LeSetRandomAddress</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_LeSetRandomAddress))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_SetRandomAddress
</UL>

<P><STRONG><a name="[316]"></a>Hci_LeSetResolvablePrivateAddressTimeout</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_LeSetResolvablePrivateAddressTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCommandCompleteCbMsgHandler
</UL>

<P><STRONG><a name="[26f]"></a>Hci_LeSetScanEnable</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_LeSetScanEnable))
<BR><BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_enableScanning
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_StopScanning
</UL>

<P><STRONG><a name="[20f]"></a>Hci_LeSetScanResponseData</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_LeSetScanResponseData))
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemSet
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_SetAdvertisingData
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_advertisingDataSet
</UL>

<P><STRONG><a name="[2d2]"></a>Hci_LeStartEncryption</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_LeStartEncryption))
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_CallLlStateMachine
</UL>

<P><STRONG><a name="[31d]"></a>Hci_LeWriteSuggestedDefaultDataLength</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_LeWriteSuggestedDefaultDataLength))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCommandCompleteCbMsgHandler
</UL>

<P><STRONG><a name="[31b]"></a>Hci_ReadBdAddr</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_ReadBdAddr))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCommandCompleteCbMsgHandler
</UL>

<P><STRONG><a name="[264]"></a>Hci_ReadRssi</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_ReadRssi))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_ReadRadioPowerLevel
</UL>

<P><STRONG><a name="[265]"></a>Hci_ReadTransmitPowerLevel</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_ReadTransmitPowerLevel))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_ReadRadioPowerLevel
</UL>

<P><STRONG><a name="[247]"></a>Hci_RegisterCommandCompleteEventCallback</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_RegisterCommandCompleteEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalBle_Initialize
</UL>

<P><STRONG><a name="[248]"></a>Hci_RegisterCommandStatusEventCallback</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_RegisterCommandStatusEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalBle_Initialize
</UL>

<P><STRONG><a name="[249]"></a>Hci_RegisterGenericEventCallback</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_RegisterGenericEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalBle_Initialize
</UL>

<P><STRONG><a name="[298]"></a>Hci_RegisterL2caCallback</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_RegisterL2caCallback))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_Init
</UL>

<P><STRONG><a name="[246]"></a>Hci_RegisterLeEventCallback</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_RegisterLeEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalBle_Initialize
</UL>

<P><STRONG><a name="[2e0]"></a>Hci_RegisterSmCallback</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_RegisterSmCallback))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_Init
</UL>

<P><STRONG><a name="[24d]"></a>Hci_Reset</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalBle_Initialize
</UL>

<P><STRONG><a name="[210]"></a>Hci_SendAclData</STRONG> (Thumb, 116 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_SendAclData))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = Hci_SendAclData &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferFree
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_SendAclDataWithSegmentation
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_SendLeFlowControlCredit
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_ConnectionParameterUpdateResponse
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_ConnectionParameterUpdateRequest
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_SendLeCbConnectionRequest
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_SendLeCbData
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_SendLeCbConnectionResponse
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_SendCommandReject
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_SendDisconnectRequest
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_HandleSendData
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_SendDisconnectResponse
</UL>

<P><STRONG><a name="[211]"></a>Hci_SendAclDataWithSegmentation</STRONG> (Thumb, 184 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_SendAclDataWithSegmentation))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = Hci_SendAclDataWithSegmentation &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferFree
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_SendAclData
</UL>

<P><STRONG><a name="[a7]"></a>Hci_SendPacketToController</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, nxp.o(.text.Hci_SendPacketToController))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = Hci_SendPacketToController &rArr; MEM_BufferAllocWithId &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_init.o(i.Ble_Initialize)
</UL>
<P><STRONG><a name="[318]"></a>Hci_SetEventMask</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_SetEventMask))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCommandCompleteCbMsgHandler
</UL>

<P><STRONG><a name="[212]"></a>Host_MsgHandler</STRONG> (Thumb, 848 bytes, Stack size unknown bytes, host_hl_task.o(.text.Host_MsgHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = Host_MsgHandler &rArr; InternalGap_HandleSmCheckResult &rArr; gap_cm_signatureVerificationComplete &rArr; handleVerifiedSignedWriteCommand &rArr; DevDb_SetPeerSignCounter &rArr; App_NvmWrite &rArr; NvSaveOnIdle &rArr; __NvSaveOnIdle &rArr; NvAddSaveRequestToQueue &rArr; NvProcessFirstSaveInQueue &rArr;  NvAddSaveRequestToQueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferFree
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_PrivacyCallbackHandler
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_TimerCbEventHandler
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_LeSetPhy
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_LeReadPhy
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_LeScSendKeypressNotification
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_LeScSetPeerOobData
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_LeScGetLocalOobData
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_LeScValidateNumericValue
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_LeScRegeneratePublicKey
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_EnableControllerPrivacy
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_UpdateLeDataLength
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_EnableHostPrivacy
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_HandleSmCheckResult
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_SetRandomAddress
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_VerifyPrivateResolvableAddress
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_ReadRadioPowerLevel
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_ReadPublicAddress
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_CreateRandomAddress
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_RemoveDeviceFromWhiteList
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_AddDeviceToWhiteList
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_ClearWhiteList
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_ReadWhiteListSize
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_Disconnect
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_DenyLongTermKey
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_ProvideLongTermKey
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_RejectKeyExchangeRequest
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_SendSmpKeys
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_ProvideOob
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_RejectPairingRequest
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_AcceptPairingRequest
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_SendSlaveSecurityRequest
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_StopAdvertising
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_StartAdvertising
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_SetAdvertisingData
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_SetAdvertisingParameters
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGattServer_SendInstantIndication
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGattServer_SendInstantNotification
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGattServer_SendIndication
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGattServer_SendNotification
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGattServer_SendAttributeReadStatus
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGattServer_SendAttributeWrittenStatus
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_SendLeFlowControlCredit
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_ConnectionParameterUpdateResponse
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_ConnectionParameterUpdateRequest
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_SendSingleAdvertisement
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_DefaultPair
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGattServer_RegisterCallback
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_ConnectLePsm
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_HandleSendLeCbData
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_CancelConnection
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_DisconnectLePsm
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_TaskHandler
</UL>

<P><STRONG><a name="[244]"></a>Host_TaskHandler</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, host_hl_task.o(.text.Host_TaskHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = Host_TaskHandler &rArr; Host_MsgHandler &rArr; InternalGap_HandleSmCheckResult &rArr; gap_cm_signatureVerificationComplete &rArr; handleVerifiedSignedWriteCommand &rArr; DevDb_SetPeerSignCounter &rArr; App_NvmWrite &rArr; NvSaveOnIdle &rArr; __NvSaveOnIdle &rArr; NvAddSaveRequestToQueue &rArr; NvProcessFirstSaveInQueue &rArr;  NvAddSaveRequestToQueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventWait
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListRemoveHeadMsg
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci2Host_MsgHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Task
</UL>

<P><STRONG><a name="[1a2]"></a>InternalBle_Initialize</STRONG> (Thumb, 120 bytes, Stack size unknown bytes, gap.o(.text.InternalBle_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = InternalBle_Initialize &rArr; DevDb_Init &rArr; App_NvmRead
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_Init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Init
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_Reset
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_RegisterGenericEventCallback
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_RegisterCommandStatusEventCallback
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_RegisterCommandCompleteEventCallback
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_RegisterLeEventCallback
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_Init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_Init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_Init
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_HostInitialize
</UL>

<P><STRONG><a name="[226]"></a>InternalGap_AcceptPairingRequest</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_AcceptPairingRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = InternalGap_AcceptPairingRequest &rArr; Sm_SendCmd &rArr; SmStates_RunStateMachine &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deriveSmPairingParamsFromGapParams.isra.1
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerConnectionCallback
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[230]"></a>InternalGap_AddDeviceToWhiteList</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_AddDeviceToWhiteList))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeAddDeviceToWhiteList
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerGenericCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_addNextAutoConnectAddressInWhiteList
</UL>

<P><STRONG><a name="[251]"></a>InternalGap_AutoConnectWithPra</STRONG> (Thumb, 156 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_AutoConnectWithPra))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeCreateConnection
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_SaveMostRecentlyUsedAddressType
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerGenericCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCommandCompleteCbMsgHandler
</UL>

<P><STRONG><a name="[1ce]"></a>InternalGap_CheckIndicationStatus</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_CheckIndicationStatus))
<BR><BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_GetCccd
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_CheckIndicationStatus
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSendNotificationIndication
</UL>

<P><STRONG><a name="[1d0]"></a>InternalGap_CheckNotificationStatus</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_CheckNotificationStatus))
<BR><BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_GetCccd
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_CheckNotificationStatus
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSendNotificationIndication
</UL>

<P><STRONG><a name="[22f]"></a>InternalGap_ClearWhiteList</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_ClearWhiteList))
<BR><BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeClearWhiteList
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerGenericCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[255]"></a>InternalGap_Connect</STRONG> (Thumb, 172 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_Connect))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeCreateConnection
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_SaveMostRecentlyUsedAddressType
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerGenericCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_autoConnectIrkCheckComplete
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_checkForAutoConnect
</UL>

<P><STRONG><a name="[232]"></a>InternalGap_CreateRandomAddress</STRONG> (Thumb, 66 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_CreateRandomAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = InternalGap_CreateRandomAddress &rArr; Sm_SendCmd &rArr; SmStates_RunStateMachine &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerGenericCallback
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_PrivacyCallbackHandler
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCommandCompleteCbMsgHandler
</UL>

<P><STRONG><a name="[224]"></a>InternalGap_DefaultPair</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_DefaultPair))
<BR><BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deriveSmPairingParamsFromGapParams.isra.1
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[22c]"></a>InternalGap_DenyLongTermKey</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_DenyLongTermKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = InternalGap_DenyLongTermKey &rArr; Sm_SendCmd &rArr; SmStates_RunStateMachine &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerGenericCallback
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smCallback
</UL>

<P><STRONG><a name="[22d]"></a>InternalGap_Disconnect</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_Disconnect))
<BR><BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeCreateConnectionCancel
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_Disconnect
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerGenericCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[23a]"></a>InternalGap_EnableControllerPrivacy</STRONG> (Thumb, 148 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_EnableControllerPrivacy))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeSetAddressResolutionEnable
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeClearResolvingList
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerGenericCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[238]"></a>InternalGap_EnableHostPrivacy</STRONG> (Thumb, 116 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_EnableHostPrivacy))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = InternalGap_EnableHostPrivacy &rArr; EnableHostPrivacyTimer &rArr;  InternalGap_PrivacyCallbackHandler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerGenericCallback
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHostPrivacyTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[25a]"></a>InternalGap_EnterPasskey</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_EnterPasskey))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = InternalGap_EnterPasskey &rArr; Sm_SendCmd &rArr; SmStates_RunStateMachine &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerGenericCallback
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sendLocalPasskey
</UL>

<P><STRONG><a name="[237]"></a>InternalGap_HandleSmCheckResult</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, gap_sm_cb.o(.text.InternalGap_HandleSmCheckResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = InternalGap_HandleSmCheckResult &rArr; gap_cm_signatureVerificationComplete &rArr; handleVerifiedSignedWriteCommand &rArr; DevDb_SetPeerSignCounter &rArr; App_NvmWrite &rArr; NvSaveOnIdle &rArr; __NvSaveOnIdle &rArr; NvAddSaveRequestToQueue &rArr; NvProcessFirstSaveInQueue &rArr;  NvAddSaveRequestToQueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_signatureVerificationComplete
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_irkCheckComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[240]"></a>InternalGap_LeReadPhy</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_LeReadPhy))
<BR><BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeReadPhy
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[23d]"></a>InternalGap_LeScGetLocalOobData</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_LeScGetLocalOobData))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = InternalGap_LeScGetLocalOobData &rArr; Sm_SendCmd &rArr; SmStates_RunStateMachine &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerGenericCallback
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[23b]"></a>InternalGap_LeScRegeneratePublicKey</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_LeScRegeneratePublicKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = InternalGap_LeScRegeneratePublicKey &rArr; Sm_SendCmd &rArr; SmStates_RunStateMachine &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerGenericCallback
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[23f]"></a>InternalGap_LeScSendKeypressNotification</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_LeScSendKeypressNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = InternalGap_LeScSendKeypressNotification &rArr; Sm_SendCmd &rArr; SmStates_RunStateMachine &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerGenericCallback
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[23e]"></a>InternalGap_LeScSetPeerOobData</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_LeScSetPeerOobData))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = InternalGap_LeScSetPeerOobData &rArr; Sm_SendCmd &rArr; SmStates_RunStateMachine &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerGenericCallback
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[23c]"></a>InternalGap_LeScValidateNumericValue</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_LeScValidateNumericValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = InternalGap_LeScValidateNumericValue &rArr; Sm_SendCmd &rArr; SmStates_RunStateMachine &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerGenericCallback
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[241]"></a>InternalGap_LeSetPhy</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_LeSetPhy))
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeSetPhy
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeSetDefaultPhy
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[260]"></a>InternalGap_PostSmCheckResult</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, gap_api2msg.o(.text.InternalGap_PostSmCheckResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = InternalGap_PostSmCheckResult &rArr; MEM_BufferAllocWithId &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddHeadMsg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smCallback
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifySignature
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_checkNextIrk
</UL>

<P><STRONG><a name="[1c3]"></a>InternalGap_PrivacyCallbackHandler</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_PrivacyCallbackHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = InternalGap_PrivacyCallbackHandler &rArr; InternalGap_CreateRandomAddress &rArr; Sm_SendCmd &rArr; SmStates_RunStateMachine &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_CreateRandomAddress
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_StopAdvertising
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHostPrivacyTimer
</UL>

<P><STRONG><a name="[22b]"></a>InternalGap_ProvideLongTermKey</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_ProvideLongTermKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = InternalGap_ProvideLongTermKey &rArr; Sm_SendCmd &rArr; SmStates_RunStateMachine &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerGenericCallback
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smCallback
</UL>

<P><STRONG><a name="[228]"></a>InternalGap_ProvideOob</STRONG> (Thumb, 66 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_ProvideOob))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = InternalGap_ProvideOob &rArr; Sm_SendCmd &rArr; SmStates_RunStateMachine &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerGenericCallback
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[233]"></a>InternalGap_ReadPublicAddress</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_ReadPublicAddress))
<BR><BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_LoadPublicDeviceAddress
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerGenericCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[234]"></a>InternalGap_ReadRadioPowerLevel</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_ReadRadioPowerLevel))
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeReadAdvertisingChannelTxPower
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_ReadRssi
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_ReadTransmitPowerLevel
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerGenericCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[22e]"></a>InternalGap_ReadWhiteListSize</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_ReadWhiteListSize))
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeReadWhiteListSize
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerGenericCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[22a]"></a>InternalGap_RejectKeyExchangeRequest</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_RejectKeyExchangeRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = InternalGap_RejectKeyExchangeRequest &rArr; terminatePairing &rArr; Sm_SendCmd &rArr; SmStates_RunStateMachine &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminatePairing
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[227]"></a>InternalGap_RejectPairingRequest</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_RejectPairingRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = InternalGap_RejectPairingRequest &rArr; terminatePairing &rArr; Sm_SendCmd &rArr; SmStates_RunStateMachine &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminatePairing
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[231]"></a>InternalGap_RemoveDeviceFromWhiteList</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_RemoveDeviceFromWhiteList))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeRemoveDeviceFromWhiteList
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerGenericCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[243]"></a>InternalGap_SendSingleAdvertisement</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_SendSingleAdvertisement))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_SendSingleAdvertisement
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[225]"></a>InternalGap_SendSlaveSecurityRequest</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_SendSlaveSecurityRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = InternalGap_SendSlaveSecurityRequest &rArr; Sm_SendCmd &rArr; SmStates_RunStateMachine &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerGenericCallback
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[229]"></a>InternalGap_SendSmpKeys</STRONG> (Thumb, 254 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_SendSmpKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = InternalGap_SendSmpKeys &rArr; Sm_SendCmd &rArr; SmStates_RunStateMachine &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerGenericCallback
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendCmd
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[221]"></a>InternalGap_SetAdvertisingData</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_SetAdvertisingData))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeSetScanResponseData
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeSetAdvertisingData
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[220]"></a>InternalGap_SetAdvertisingParameters</STRONG> (Thumb, 252 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_SetAdvertisingParameters))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeSetAdvertisingParameters
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_SaveMostRecentlyUsedAddressType
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerGenericCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[236]"></a>InternalGap_SetRandomAddress</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_SetRandomAddress))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeSetRandomAddress
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_SaveMostRecentlyUsedRandomAddress
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerGenericCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smCallback
</UL>

<P><STRONG><a name="[222]"></a>InternalGap_StartAdvertising</STRONG> (Thumb, 120 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_StartAdvertising))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = InternalGap_StartAdvertising &rArr; TMR_StartSingleShotTimer &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_AllocateTimer
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StartSingleShotTimer
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeSetAdvertisingEnable
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerAdvertisingCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCommandCompleteCbMsgHandler
</UL>

<P><STRONG><a name="[223]"></a>InternalGap_StopAdvertising</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_StopAdvertising))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = InternalGap_StopAdvertising &rArr; EnableHostPrivacyTimer &rArr;  InternalGap_PrivacyCallbackHandler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StopTimer
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_FreeTimer
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeSetAdvertisingDisable
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerAdvertisingCallback
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHostPrivacyTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_PrivacyCallbackHandler
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[26e]"></a>InternalGap_StopScanning</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_StopScanning))
<BR><BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeSetScanEnable
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerScanningCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_autoConnectIrkCheckComplete
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_checkForAutoConnect
</UL>

<P><STRONG><a name="[239]"></a>InternalGap_UpdateLeDataLength</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_UpdateLeDataLength))
<BR><BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeSetDataLength
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerGenericCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[235]"></a>InternalGap_VerifyPrivateResolvableAddress</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, gap.o(.text.InternalGap_VerifyPrivateResolvableAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = InternalGap_VerifyPrivateResolvableAddress &rArr; gap_cm_verifyPraAtAppRequest &rArr; Sm_SendCmd &rArr; SmStates_RunStateMachine &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_verifyPraAtAppRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[273]"></a>InternalGattServer_Init</STRONG> (Thumb, 172 bytes, Stack size unknown bytes, gatt_server.o(.text.InternalGattServer_Init))
<BR><BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_RegisterTimeoutCallback
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_RegisterUnsupportedOpcodeCallback
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_RegisterOpcodeCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGatt_Init
</UL>

<P><STRONG><a name="[1f5]"></a>InternalGattServer_RegisterCallback</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, gatt_server.o(.text.InternalGattServer_RegisterCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattServer_RegisterCallback
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[1f7]"></a>InternalGattServer_RegisterHandlesForWriteNotifications</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, gatt_server.o(.text.InternalGattServer_RegisterHandlesForWriteNotifications))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattServer_RegisterHandlesForWriteNotifications
</UL>

<P><STRONG><a name="[21b]"></a>InternalGattServer_SendAttributeReadStatus</STRONG> (Thumb, 148 bytes, Stack size unknown bytes, gatt_server.o(.text.InternalGattServer_SendAttributeReadStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = InternalGattServer_SendAttributeReadStatus &rArr; AttServer_SendReadResponse &rArr; att_SendData &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferFree
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttServer_SendReadResponse
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttRead
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttServer_SendErrorResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[21a]"></a>InternalGattServer_SendAttributeWrittenStatus</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, gatt_server.o(.text.InternalGattServer_SendAttributeWrittenStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = InternalGattServer_SendAttributeWrittenStatus &rArr; AttServer_SendWriteResponse &rArr; att_SendData &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttServer_SendWriteResponse
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttServer_SendErrorResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[21d]"></a>InternalGattServer_SendIndication</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, gatt_server.o(.text.InternalGattServer_SendIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = InternalGattServer_SendIndication &rArr; handleSendNotificationIndication &rArr; AttServer_SendHandleValueIndication &rArr; att_SendData &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSendNotificationIndication
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[21f]"></a>InternalGattServer_SendInstantIndication</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, gatt_server.o(.text.InternalGattServer_SendInstantIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = InternalGattServer_SendInstantIndication &rArr; handleSendInstantNotificationIndication &rArr; AttServer_SendHandleValueIndication &rArr; att_SendData &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSendInstantNotificationIndication
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[21e]"></a>InternalGattServer_SendInstantNotification</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, gatt_server.o(.text.InternalGattServer_SendInstantNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = InternalGattServer_SendInstantNotification &rArr; handleSendInstantNotificationIndication &rArr; AttServer_SendHandleValueIndication &rArr; att_SendData &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSendInstantNotificationIndication
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[21c]"></a>InternalGattServer_SendNotification</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, gatt_server.o(.text.InternalGattServer_SendNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = InternalGattServer_SendNotification &rArr; handleSendNotificationIndication &rArr; AttServer_SendHandleValueIndication &rArr; att_SendData &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSendNotificationIndication
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[1df]"></a>InternalGatt_GetMtu</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, gatt.o(.text.InternalGatt_GetMtu))
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_GetMtu
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttPrepareNotificationIndication
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttFindInformation
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttReadByType
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttRead
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttReadBlob
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttReadMultiple
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttReadByGroupType
</UL>

<P><STRONG><a name="[1fc]"></a>InternalGatt_Init</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, gatt.o(.text.InternalGatt_Init))
<BR><BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGattServer_Init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Init
</UL>

<P><STRONG><a name="[1ae]"></a>IsNonZeroAddress</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, device_db.o(.text.IsNonZeroAddress))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLeCbMsgHandler
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_SignalDevicePaired
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_SaveKeys
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_CheckIfBondedDeviceAddressIsStatic
</UL>

<P><STRONG><a name="[215]"></a>L2caRm_CancelConnection</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, l2ca_resource_manager.o(.text.L2caRm_CancelConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = L2caRm_CancelConnection &rArr; L2ca_SendLeCbConnectionResponse &rArr; Hci_SendAclData &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_SendLeCbConnectionResponse
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_GetPendingCbChannel
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_DisconnectChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[213]"></a>L2caRm_ConnectLePsm</STRONG> (Thumb, 280 bytes, Stack size unknown bytes, l2ca_resource_manager.o(.text.L2caRm_ConnectLePsm))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = L2caRm_ConnectLePsm &rArr; TMR_StartSingleShotTimer &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_AllocateTimer
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StartSingleShotTimer
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_SendLeCbConnectionRequest
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_ReserveNextAvailableChannel
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_SendLeCbConnectionResponse
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_GetPendingCbChannel
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_GetLePsmIndex
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_DisconnectChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[27b]"></a>L2caRm_DisconnectChannel</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, l2ca_resource_manager.o(.text.L2caRm_DisconnectChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = L2caRm_DisconnectChannel &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemSet
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferFree
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_FreeTimer
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_NotifyDisconnection
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_ConnectLePsm
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_CancelConnection
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_HandleRecvLeCbData
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_LinkConnectionTimerCallback
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleLeCbConnectionResponse
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleDisconnectResponse
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleDisconnectRequest
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleCommandReject
</UL>

<P><STRONG><a name="[214]"></a>L2caRm_DisconnectLePsm</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, l2ca_resource_manager.o(.text.L2caRm_DisconnectLePsm))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = L2caRm_DisconnectLePsm &rArr; L2ca_SendDisconnectRequest &rArr; Hci_SendAclData &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_SendDisconnectRequest
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_GetCbChannelBySrcCid
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleLeFlowControlCredit
</UL>

<P><STRONG><a name="[28d]"></a>L2caRm_GetCbChannelByCids</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, l2ca_resource_manager.o(.text.L2caRm_GetCbChannelByCids))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleDisconnectResponse
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleDisconnectRequest
</UL>

<P><STRONG><a name="[289]"></a>L2caRm_GetCbChannelByDstCid</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, l2ca_resource_manager.o(.text.L2caRm_GetCbChannelByDstCid))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleLeFlowControlCredit
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleLeCbConnectionResponse
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleLeCbConnectionRequest
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleCommandReject
</UL>

<P><STRONG><a name="[27f]"></a>L2caRm_GetCbChannelBySrcCid</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, l2ca_resource_manager.o(.text.L2caRm_GetCbChannelBySrcCid))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_SendLeFlowControlCredit
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_HandleSendLeCbData
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_HandleRecvLeCbData
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_DisconnectLePsm
</UL>

<P><STRONG><a name="[27c]"></a>L2caRm_GetLePsmIndex</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, l2ca_resource_manager.o(.text.L2caRm_GetLePsmIndex))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_ConnectLePsm
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleLeCbConnectionRequest
</UL>

<P><STRONG><a name="[279]"></a>L2caRm_GetPendingCbChannel</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, l2ca_resource_manager.o(.text.L2caRm_GetPendingCbChannel))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_ConnectLePsm
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_CancelConnection
</UL>

<P><STRONG><a name="[205]"></a>L2caRm_HandleRecvData</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, l2ca_resource_manager.o(.text.L2caRm_HandleRecvData))
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_GetMtu
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_GetDeviceId
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci2Host_MsgHandler
</UL>

<P><STRONG><a name="[206]"></a>L2caRm_HandleRecvLeCbData</STRONG> (Thumb, 240 bytes, Stack size unknown bytes, l2ca_resource_manager.o(.text.L2caRm_HandleRecvLeCbData))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = L2caRm_HandleRecvLeCbData &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferFree
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_SendCommandReject
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_GetCbChannelBySrcCid
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_DisconnectChannel
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_GetDeviceId
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci2Host_MsgHandler
</UL>

<P><STRONG><a name="[283]"></a>L2caRm_HandleSendData</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, l2ca_resource_manager.o(.text.L2caRm_HandleSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = L2caRm_HandleSendData &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferFree
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_SendAclData
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_SendAttData
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_SendSmpData
</UL>

<P><STRONG><a name="[216]"></a>L2caRm_HandleSendLeCbData</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, l2ca_resource_manager.o(.text.L2caRm_HandleSendLeCbData))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = L2caRm_HandleSendLeCbData &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferFree
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_SendLeCbData
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_GetCbChannelBySrcCid
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[27d]"></a>L2caRm_ReserveNextAvailableChannel</STRONG> (Thumb, 120 bytes, Stack size unknown bytes, l2ca_resource_manager.o(.text.L2caRm_ReserveNextAvailableChannel))
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_ConnectLePsm
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleLeCbConnectionRequest
</UL>

<P><STRONG><a name="[287]"></a>L2caRm_ResumeChannelsOnConn</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, l2ca_resource_manager.o(.text.L2caRm_ResumeChannelsOnConn))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_ConnectionParameterUpdateResponse
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleLeConnectionUpdateComplete
</UL>

<P><STRONG><a name="[284]"></a>L2caRm_SendLeCbData</STRONG> (Thumb, 212 bytes, Stack size unknown bytes, l2ca_resource_manager.o(.text.L2caRm_SendLeCbData))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = L2caRm_SendLeCbData &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferFree
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_SendAclData
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_HandleSendLeCbData
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleLeFlowControlCredit
</UL>

<P><STRONG><a name="[286]"></a>L2caRm_SuspendChannelsOnConn</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, l2ca_resource_manager.o(.text.L2caRm_SuspendChannelsOnConn))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_ConnectionParameterUpdateRequest
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleLeRemoteConnectionParameterRequest
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleConnectionParameterUpdateRequest
</UL>

<P><STRONG><a name="[315]"></a>L2ca_Config</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, l2ca_resource_manager.o(.text.L2ca_Config))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLeCbMsgHandler
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCommandCompleteCbMsgHandler
</UL>

<P><STRONG><a name="[217]"></a>L2ca_ConnectionParameterUpdateRequest</STRONG> (Thumb, 292 bytes, Stack size unknown bytes, l2ca_signaling.o(.text.L2ca_ConnectionParameterUpdateRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = L2ca_ConnectionParameterUpdateRequest &rArr; Hci_SendAclData &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeConnectionUpdate
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_SuspendChannelsOnConn
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_SendAclData
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[218]"></a>L2ca_ConnectionParameterUpdateResponse</STRONG> (Thumb, 268 bytes, Stack size unknown bytes, l2ca_signaling.o(.text.L2ca_ConnectionParameterUpdateResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = L2ca_ConnectionParameterUpdateResponse &rArr; Hci_SendAclData &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeConnectionUpdate
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_ResumeChannelsOnConn
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_SendAclData
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleConnectionParameterUpdateRequest
</UL>

<P><STRONG><a name="[288]"></a>L2ca_HandleCommandReject</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, l2ca_signaling.o(.text.L2ca_HandleCommandReject))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = L2ca_HandleCommandReject &rArr; L2caRm_DisconnectChannel &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_GetCbChannelByDstCid
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_DisconnectChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleRecvSignaling
</UL>

<P><STRONG><a name="[28a]"></a>L2ca_HandleConnectionParameterUpdateRequest</STRONG> (Thumb, 188 bytes, Stack size unknown bytes, l2ca_signaling.o(.text.L2ca_HandleConnectionParameterUpdateRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = L2ca_HandleConnectionParameterUpdateRequest &rArr; L2ca_ConnectionParameterUpdateResponse &rArr; Hci_SendAclData &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_ConnectionParameterUpdateResponse
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_SuspendChannelsOnConn
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_SendCommandReject
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerConnectionCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleRecvSignaling
</UL>

<P><STRONG><a name="[28b]"></a>L2ca_HandleConnectionParameterUpdateResponse</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, l2ca_signaling.o(.text.L2ca_HandleConnectionParameterUpdateResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = L2ca_HandleConnectionParameterUpdateResponse &rArr; gap_triggerConnectionCallback &rArr; TMR_FreeTimer &rArr; TMR_StopTimer &rArr; StackTimer_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerConnectionCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleRecvSignaling
</UL>

<P><STRONG><a name="[28c]"></a>L2ca_HandleDisconnectRequest</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, l2ca_signaling.o(.text.L2ca_HandleDisconnectRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = L2ca_HandleDisconnectRequest &rArr; L2ca_SendCommandReject &rArr; Hci_SendAclData &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_SendCommandReject
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_GetCbChannelByCids
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_DisconnectChannel
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_SendDisconnectResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleRecvSignaling
</UL>

<P><STRONG><a name="[28f]"></a>L2ca_HandleDisconnectResponse</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, l2ca_signaling.o(.text.L2ca_HandleDisconnectResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = L2ca_HandleDisconnectResponse &rArr; L2ca_SendCommandReject &rArr; Hci_SendAclData &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_SendCommandReject
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_GetCbChannelByCids
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_DisconnectChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleRecvSignaling
</UL>

<P><STRONG><a name="[290]"></a>L2ca_HandleLeCbConnectionRequest</STRONG> (Thumb, 216 bytes, Stack size unknown bytes, l2ca_signaling.o(.text.L2ca_HandleLeCbConnectionRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = L2ca_HandleLeCbConnectionRequest &rArr; L2ca_SendLeCbConnectionResponse &rArr; Hci_SendAclData &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_ReserveNextAvailableChannel
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_SendLeCbConnectionResponse
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_GetCbChannelByDstCid
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_GetLePsmIndex
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_checkConnectionSecurity
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleRecvSignaling
</UL>

<P><STRONG><a name="[292]"></a>L2ca_HandleLeCbConnectionResponse</STRONG> (Thumb, 196 bytes, Stack size unknown bytes, l2ca_signaling.o(.text.L2ca_HandleLeCbConnectionResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = L2ca_HandleLeCbConnectionResponse &rArr; L2ca_SendCommandReject &rArr; Hci_SendAclData &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_IsTimerActive
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StopTimer
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_GetCbChannelByDstCid
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_SendCommandReject
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_DisconnectChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleRecvSignaling
</UL>

<P><STRONG><a name="[1fe]"></a>L2ca_HandleLeConnectionUpdateComplete</STRONG> (Thumb, 136 bytes, Stack size unknown bytes, l2ca_signaling.o(.text.L2ca_HandleLeConnectionUpdateComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = L2ca_HandleLeConnectionUpdateComplete &rArr; gap_triggerConnectionCallback &rArr; TMR_FreeTimer &rArr; TMR_StopTimer &rArr; StackTimer_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_ResumeChannelsOnConn
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_GetDeviceId
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerConnectionCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci2Host_MsgHandler
</UL>

<P><STRONG><a name="[293]"></a>L2ca_HandleLeFlowControlCredit</STRONG> (Thumb, 156 bytes, Stack size unknown bytes, l2ca_signaling.o(.text.L2ca_HandleLeFlowControlCredit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = L2ca_HandleLeFlowControlCredit &rArr; L2caRm_SendLeCbData &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_SendLeCbData
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_GetCbChannelByDstCid
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_SendCommandReject
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_DisconnectLePsm
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleRecvSignaling
</UL>

<P><STRONG><a name="[207]"></a>L2ca_HandleLeRemoteConnectionParameterRequest</STRONG> (Thumb, 196 bytes, Stack size unknown bytes, l2ca_signaling.o(.text.L2ca_HandleLeRemoteConnectionParameterRequest))
<BR><BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeRemoteConnectionParameterRequestNegativeReply
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeRemoteConnectionParameterRequestReply
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_SuspendChannelsOnConn
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_GetDeviceId
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci2Host_MsgHandler
</UL>

<P><STRONG><a name="[204]"></a>L2ca_HandleRecvSignaling</STRONG> (Thumb, 492 bytes, Stack size unknown bytes, l2ca_signaling.o(.text.L2ca_HandleRecvSignaling))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = L2ca_HandleRecvSignaling &rArr; L2ca_SendCommandReject &rArr; Hci_SendAclData &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_SendCommandReject
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_GetDeviceId
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleLeFlowControlCredit
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleLeCbConnectionResponse
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleLeCbConnectionRequest
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleConnectionParameterUpdateResponse
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleConnectionParameterUpdateRequest
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleDisconnectResponse
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleDisconnectRequest
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleCommandReject
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci2Host_MsgHandler
</UL>

<P><STRONG><a name="[7c]"></a>L2ca_HciEventCallback</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, l2ca_main.o(.text.L2ca_HciEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = L2ca_HciEventCallback &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddTailMsg
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferFree
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2ca_main.o(.text.L2ca_Init)
</UL>
<P><STRONG><a name="[24a]"></a>L2ca_Init</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, l2ca_main.o(.text.L2ca_Init))
<BR><BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_RegisterL2caCallback
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_InitRm
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_InitSignaling
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalBle_Initialize
</UL>

<P><STRONG><a name="[296]"></a>L2ca_InitRm</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, l2ca_resource_manager.o(.text.L2ca_InitRm))
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_Init
</UL>

<P><STRONG><a name="[297]"></a>L2ca_InitSignaling</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, l2ca_signaling.o(.text.L2ca_InitSignaling))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_Init
</UL>

<P><STRONG><a name="[299]"></a>L2ca_NotifyConnection</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, l2ca_resource_manager.o(.text.L2ca_NotifyConnection))
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_notifyConnectedDevice
</UL>

<P><STRONG><a name="[29a]"></a>L2ca_NotifyDisconnection</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, l2ca_resource_manager.o(.text.L2ca_NotifyDisconnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = L2ca_NotifyDisconnection &rArr; L2caRm_DisconnectChannel &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_DisconnectChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciGenericCbMsgHandler
</UL>

<P><STRONG><a name="[7b]"></a>L2ca_RecvDataCallback</STRONG> (Thumb, 136 bytes, Stack size unknown bytes, l2ca_main.o(.text.L2ca_RecvDataCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = L2ca_RecvDataCallback &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddTailMsg
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferFree
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2ca_main.o(.text.L2ca_Init)
</UL>
<P><STRONG><a name="[2e2]"></a>L2ca_RegisterAttCallback</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, l2ca_resource_manager.o(.text.L2ca_RegisterAttCallback))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_InitializeInternalCallback
</UL>

<P><STRONG><a name="[2df]"></a>L2ca_RegisterSmpCallback</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, l2ca_resource_manager.o(.text.L2ca_RegisterSmpCallback))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_Init
</UL>

<P><STRONG><a name="[29b]"></a>L2ca_SendAttData</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, l2ca_main.o(.text.L2ca_SendAttData))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = L2ca_SendAttData &rArr; L2caRm_HandleSendData &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_HandleSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_SendData
</UL>

<P><STRONG><a name="[282]"></a>L2ca_SendCommandReject</STRONG> (Thumb, 196 bytes, Stack size unknown bytes, l2ca_signaling.o(.text.L2ca_SendCommandReject))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = L2ca_SendCommandReject &rArr; Hci_SendAclData &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_GetDeviceId
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_SendAclData
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleRecvSignaling
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_HandleRecvLeCbData
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleLeFlowControlCredit
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleLeCbConnectionResponse
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleConnectionParameterUpdateRequest
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleDisconnectResponse
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleDisconnectRequest
</UL>

<P><STRONG><a name="[280]"></a>L2ca_SendDisconnectRequest</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, l2ca_signaling.o(.text.L2ca_SendDisconnectRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = L2ca_SendDisconnectRequest &rArr; Hci_SendAclData &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_SendAclData
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_DisconnectLePsm
</UL>

<P><STRONG><a name="[28e]"></a>L2ca_SendDisconnectResponse</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, l2ca_signaling.o(.text.L2ca_SendDisconnectResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = L2ca_SendDisconnectResponse &rArr; Hci_SendAclData &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_SendAclData
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleDisconnectRequest
</UL>

<P><STRONG><a name="[27e]"></a>L2ca_SendLeCbConnectionRequest</STRONG> (Thumb, 196 bytes, Stack size unknown bytes, l2ca_signaling.o(.text.L2ca_SendLeCbConnectionRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = L2ca_SendLeCbConnectionRequest &rArr; Hci_SendAclData &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_SendAclData
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_ConnectLePsm
</UL>

<P><STRONG><a name="[27a]"></a>L2ca_SendLeCbConnectionResponse</STRONG> (Thumb, 160 bytes, Stack size unknown bytes, l2ca_signaling.o(.text.L2ca_SendLeCbConnectionResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = L2ca_SendLeCbConnectionResponse &rArr; Hci_SendAclData &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_SendAclData
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_ConnectLePsm
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_CancelConnection
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleLeCbConnectionRequest
</UL>

<P><STRONG><a name="[219]"></a>L2ca_SendLeFlowControlCredit</STRONG> (Thumb, 136 bytes, Stack size unknown bytes, l2ca_signaling.o(.text.L2ca_SendLeFlowControlCredit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = L2ca_SendLeFlowControlCredit &rArr; Hci_SendAclData &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_GetCbChannelBySrcCid
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_SendAclData
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[29c]"></a>L2ca_SendSmpData</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, l2ca_main.o(.text.L2ca_SendSmpData))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = L2ca_SendSmpData &rArr; L2caRm_HandleSendData &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_HandleSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendPacketToL2cap
</UL>

<P><STRONG><a name="[1c8]"></a>MultiplyBigHexModP256</STRONG> (Thumb, 1030 bytes, Stack size unknown bytes, ecc_p256.o(.text.MultiplyBigHexModP256))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = MultiplyBigHexModP256 &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialModP256
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GF_Jacobian_Point_Addition256
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GF_Jacobian_Point_Double256
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_multiplication_event_handler
</UL>

<P><STRONG><a name="[c]"></a>OSC_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, nxp.o(.text.OSC_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_set (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[29d]"></a>SmBuildPacket_SmpKeyDistEncryptionInformation</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, sm_packet_op.o(.text.SmBuildPacket_SmpKeyDistEncryptionInformation))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_ResponderWaitForUlKeysetResponse
</UL>

<P><STRONG><a name="[29f]"></a>SmBuildPacket_SmpKeyDistIdentityAddressInformation</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, sm_packet_op.o(.text.SmBuildPacket_SmpKeyDistIdentityAddressInformation))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_ResponderWaitForUlKeysetResponse
</UL>

<P><STRONG><a name="[2a0]"></a>SmBuildPacket_SmpKeyDistIdentityInformation</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, sm_packet_op.o(.text.SmBuildPacket_SmpKeyDistIdentityInformation))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_ResponderWaitForUlKeysetResponse
</UL>

<P><STRONG><a name="[2a1]"></a>SmBuildPacket_SmpKeyDistMasterIdentification</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, sm_packet_op.o(.text.SmBuildPacket_SmpKeyDistMasterIdentification))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_ResponderWaitForUlKeysetResponse
</UL>

<P><STRONG><a name="[2a2]"></a>SmBuildPacket_SmpKeyDistSigningInformation</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, sm_packet_op.o(.text.SmBuildPacket_SmpKeyDistSigningInformation))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_ResponderWaitForUlKeysetResponse
</UL>

<P><STRONG><a name="[2a3]"></a>SmBuildPacket_SmpKeypressNotification</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, sm_packet_op.o(.text.SmBuildPacket_SmpKeypressNotification))
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForTKeyAndMconfirm
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScPkEPasskeyAndInitiatorCri
</UL>

<P><STRONG><a name="[2a4]"></a>SmBuildPacket_SmpPairingConfirm</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, sm_packet_op.o(.text.SmBuildPacket_SmpPairingConfirm))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForTKeyAndMconfirm
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForInitiatorPublicKey
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScPkEPasskeyAndInitiatorCri
</UL>

<P><STRONG><a name="[2a5]"></a>SmBuildPacket_SmpPairingDHKeyCheck</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, sm_packet_op.o(.text.SmBuildPacket_SmpPairingDHKeyCheck))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScKeyConfirmAndInitiatorDhKeyCheck
</UL>

<P><STRONG><a name="[2a6]"></a>SmBuildPacket_SmpPairingFailed</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, sm_packet_op.o(.text.SmBuildPacket_SmpPairingFailed))
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_GeneratePairingFailedPacketAndEvent
</UL>

<P><STRONG><a name="[2a7]"></a>SmBuildPacket_SmpPairingPublicKey</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, sm_packet_op.o(.text.SmBuildPacket_SmpPairingPublicKey))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForInitiatorPublicKey
</UL>

<P><STRONG><a name="[2a8]"></a>SmBuildPacket_SmpPairingRandom</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, sm_packet_op.o(.text.SmBuildPacket_SmpPairingRandom))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForMrand
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScJwInitiatorNonce
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScPkEInitiatorNoncei
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScOobDataAndInitiatorNonce
</UL>

<P><STRONG><a name="[2a9]"></a>SmBuildPacket_SmpPairingRequestRespose</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, sm_packet_op.o(.text.SmBuildPacket_SmpPairingRequestRespose))
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForPairingResponseParams
</UL>

<P><STRONG><a name="[2aa]"></a>SmBuildPacket_SmpSecurityRequest</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, sm_packet_op.o(.text.SmBuildPacket_SmpSecurityRequest))
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_Idle
</UL>

<P><STRONG><a name="[2ab]"></a>SmCrypto_AES128</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, sm_crypto.o(.text.SmCrypto_AES128))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = SmCrypto_AES128 &rArr; AES_128_Encrypt &rArr; sw_Aes128 &rArr; AES_InverseMixColumn
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_128_Encrypt
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpyReverseOrder
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_CallTbStateMachine
</UL>

<P><STRONG><a name="[2ac]"></a>SmCrypto_ComputeDataSignature</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, sm_crypto.o(.text.SmCrypto_ComputeDataSignature))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = SmCrypto_ComputeDataSignature &rArr; AES_128_CMAC_LsbFirstInput &rArr; AES_128_CMAC_Generate_Subkey &rArr; AES_128_Encrypt &rArr; sw_Aes128 &rArr; AES_InverseMixColumn
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_128_CMAC_LsbFirstInput
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpyReverseOrder
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_CallTbStateMachine
</UL>

<P><STRONG><a name="[2ae]"></a>SmCrypto_SmpAh</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, sm_crypto.o(.text.SmCrypto_SmpAh))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = SmCrypto_SmpAh &rArr; AES_128_Encrypt &rArr; sw_Aes128 &rArr; AES_InverseMixColumn
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_128_Encrypt
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpyReverseOrder
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_CallTbStateMachine
</UL>

<P><STRONG><a name="[2af]"></a>SmCrypto_SmpC1</STRONG> (Thumb, 190 bytes, Stack size unknown bytes, sm_crypto.o(.text.SmCrypto_SmpC1))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = SmCrypto_SmpC1 &rArr; AES_128_Encrypt &rArr; sw_Aes128 &rArr; AES_InverseMixColumn
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemSet
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_128_Encrypt
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpyReverseOrder
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecLib_XorN
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForTKeyAndMconfirm
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForMrand
</UL>

<P><STRONG><a name="[2b0]"></a>SmCrypto_SmpF4</STRONG> (Thumb, 98 bytes, Stack size unknown bytes, sm_crypto.o(.text.SmCrypto_SmpF4))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = SmCrypto_SmpF4 &rArr; AES_128_CMAC &rArr; AES_128_CMAC_Generate_Subkey &rArr; AES_128_Encrypt &rArr; sw_Aes128 &rArr; AES_InverseMixColumn
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_128_CMAC
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpyReverseOrder
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForInitiatorPublicKey
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScPkEPasskeyAndInitiatorCri
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScPkEInitiatorNoncei
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScOobDataAndInitiatorNonce
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_GenerateEcdhKeyPairAndOobRAndOobCr
</UL>

<P><STRONG><a name="[2b2]"></a>SmCrypto_SmpF5</STRONG> (Thumb, 248 bytes, Stack size unknown bytes, sm_crypto.o(.text.SmCrypto_SmpF5))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = SmCrypto_SmpF5 &rArr; AES_128_CMAC_LsbFirstInput &rArr; AES_128_CMAC_Generate_Subkey &rArr; AES_128_Encrypt &rArr; sw_Aes128 &rArr; AES_InverseMixColumn
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_128_CMAC_LsbFirstInput
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_128_CMAC
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpyReverseOrder
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScKeyConfirmAndInitiatorDhKeyCheck
</UL>

<P><STRONG><a name="[2b3]"></a>SmCrypto_SmpF6</STRONG> (Thumb, 154 bytes, Stack size unknown bytes, sm_crypto.o(.text.SmCrypto_SmpF6))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = SmCrypto_SmpF6 &rArr; AES_128_CMAC &rArr; AES_128_CMAC_Generate_Subkey &rArr; AES_128_Encrypt &rArr; sw_Aes128 &rArr; AES_InverseMixColumn
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_128_CMAC
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpyReverseOrder
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScKeyConfirmAndInitiatorDhKeyCheck
</UL>

<P><STRONG><a name="[2b4]"></a>SmCrypto_SmpG2</STRONG> (Thumb, 120 bytes, Stack size unknown bytes, sm_crypto.o(.text.SmCrypto_SmpG2))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = SmCrypto_SmpG2 &rArr; AES_128_CMAC &rArr; AES_128_CMAC_Generate_Subkey &rArr; AES_128_Encrypt &rArr; sw_Aes128 &rArr; AES_InverseMixColumn
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_128_CMAC
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpyReverseOrder
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScJwInitiatorNonce
</UL>

<P><STRONG><a name="[2b5]"></a>SmCrypto_SmpS1</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, sm_crypto.o(.text.SmCrypto_SmpS1))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = SmCrypto_SmpS1 &rArr; AES_128_Encrypt &rArr; sw_Aes128 &rArr; AES_InverseMixColumn
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_128_Encrypt
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpyReverseOrder
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForMasterStkEncryption
</UL>

<P><STRONG><a name="[29e]"></a>SmDebug_LogFnc</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, sm_debug.o(.text.SmDebug_LogFnc))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_TimerCbEventHandler
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_CmdRequiresDeviceHandle
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_GetActivePeerDeviceSecProperties
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendPacketToL2cap
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_RunStateMachine
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_AES128
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_ComputeDataSignature
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_SmpAh
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_CallTbStateMachine
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_CallLlStateMachine
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpPairingRequestRespose
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_SmpC1
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_SmpS1
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpKeyDistEncryptionInformation
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpKeyDistSigningInformation
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpKeyDistIdentityAddressInformation
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpKeyDistIdentityInformation
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpKeyDistMasterIdentification
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpKeyDistSigningInformation
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpKeyDistIdentityAddressInformation
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpKeyDistIdentityInformation
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpKeyDistMasterIdentification
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpKeyDistEncryptionInformation
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpPairingPublicKey
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpPairingPublicKey
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_SmpG2
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpPairingConfirm
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpKeypressNotification
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpPairingConfirm
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpPairingRandom
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpPairingRandom
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpPairingDHKeyCheck
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpPairingDHKeyCheck
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_SmpF6
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_SmpF5
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_SmpF4
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpSecurityRequest
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpPairingRequestResponse
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpSecurityRequest
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpPairingFailed
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpPairingFailed
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleSmDeviceGlobalMessages.isra.8
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_CallSmpStateMachine
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForPairingResponseParams
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForTKeyAndMconfirm
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForMrand
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForMasterStkEncryption
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_ResponderWaitForUlKeysetResponse
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForInitiatorKeysDist
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForInitiatorPublicKey
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScJwInitiatorNonce
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScPkEPasskeyAndInitiatorCri
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScPkEInitiatorNoncei
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScOobDataAndInitiatorNonce
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScKeyConfirmAndInitiatorDhKeyCheck
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_GenerateEcdhKeyPairAndOobRAndOobCr
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_Idle
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleRemotePairingFailure
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_GeneratePairingFailedPacketAndEvent
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_Unexpected
</UL>

<P><STRONG><a name="[2d1]"></a>SmStates_CallLlStateMachine</STRONG> (Thumb, 492 bytes, Stack size unknown bytes, sm_states_hci.o(.text.SmStates_CallLlStateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = SmStates_CallLlStateMachine &rArr; TMR_StopTimer &rArr; StackTimer_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_IsTimerActive
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StopTimer
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeStartEncryption
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeLongTermKeyRequestNegativeReply
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeLongTermKeyRequestReply
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_GetActivePeerDeviceSecProperties
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendEventToUpperLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_RunStateMachine
</UL>

<P><STRONG><a name="[2d7]"></a>SmStates_CallTbStateMachine</STRONG> (Thumb, 668 bytes, Stack size unknown bytes, sm_states_tb.o(.text.SmStates_CallTbStateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = SmStates_CallTbStateMachine &rArr; SmCrypto_ComputeDataSignature &rArr; AES_128_CMAC_LsbFirstInput &rArr; AES_128_CMAC_Generate_Subkey &rArr; AES_128_Encrypt &rArr; sw_Aes128 &rArr; AES_InverseMixColumn
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GetPseudoRandomNo
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCmp
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendEventToUpperLayer
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_AES128
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_ComputeDataSignature
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_SmpAh
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_RunStateMachine
</UL>

<P><STRONG><a name="[2d8]"></a>SmStates_CmdRequiresDeviceHandle</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, sm_states.o(.text.SmStates_CmdRequiresDeviceHandle))
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendCmd
</UL>

<P><STRONG><a name="[2dc]"></a>SmStates_RunStateMachine</STRONG> (Thumb, 524 bytes, Stack size unknown bytes, sm_states.o(.text.SmStates_RunStateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = SmStates_RunStateMachine &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemSet
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendEventToUpperLayer
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_CallTbStateMachine
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_CallLlStateMachine
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleSmDeviceGlobalMessages.isra.8
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_CallSmpStateMachine
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_GenerateEcdhKeyPairAndOobRAndOobCr
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_TimerCbEventHandler
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_HciCbEventHandler
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendCmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_L2caCbMsgHandler
</UL>

<P><STRONG><a name="[2c3]"></a>SmUnpack_SmpKeyDistEncryptionInformation</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, sm_packet_op.o(.text.SmUnpack_SmpKeyDistEncryptionInformation))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_ValidateSmpPacketTypeAndLength.isra.0
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForInitiatorKeysDist
</UL>

<P><STRONG><a name="[2c6]"></a>SmUnpack_SmpKeyDistIdentityAddressInformation</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, sm_packet_op.o(.text.SmUnpack_SmpKeyDistIdentityAddressInformation))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_ValidateSmpPacketTypeAndLength.isra.0
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForInitiatorKeysDist
</UL>

<P><STRONG><a name="[2c5]"></a>SmUnpack_SmpKeyDistIdentityInformation</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, sm_packet_op.o(.text.SmUnpack_SmpKeyDistIdentityInformation))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_ValidateSmpPacketTypeAndLength.isra.0
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForInitiatorKeysDist
</UL>

<P><STRONG><a name="[2c4]"></a>SmUnpack_SmpKeyDistMasterIdentification</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, sm_packet_op.o(.text.SmUnpack_SmpKeyDistMasterIdentification))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_ValidateSmpPacketTypeAndLength.isra.0
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForInitiatorKeysDist
</UL>

<P><STRONG><a name="[2c7]"></a>SmUnpack_SmpKeyDistSigningInformation</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, sm_packet_op.o(.text.SmUnpack_SmpKeyDistSigningInformation))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_ValidateSmpPacketTypeAndLength.isra.0
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForInitiatorKeysDist
</UL>

<P><STRONG><a name="[2ce]"></a>SmUnpack_SmpPairingConfirm</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, sm_packet_op.o(.text.SmUnpack_SmpPairingConfirm))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_ValidateSmpPacketTypeAndLength.isra.0
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForTKeyAndMconfirm
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScPkEPasskeyAndInitiatorCri
</UL>

<P><STRONG><a name="[2cc]"></a>SmUnpack_SmpPairingDHKeyCheck</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, sm_packet_op.o(.text.SmUnpack_SmpPairingDHKeyCheck))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_ValidateSmpPacketTypeAndLength.isra.0
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScKeyConfirmAndInitiatorDhKeyCheck
</UL>

<P><STRONG><a name="[2da]"></a>SmUnpack_SmpPairingFailed</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, sm_packet_op.o(.text.SmUnpack_SmpPairingFailed))
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_ValidateSmpPacketTypeAndLength.isra.0
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleRemotePairingFailure
</UL>

<P><STRONG><a name="[2c8]"></a>SmUnpack_SmpPairingPublicKey</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, sm_packet_op.o(.text.SmUnpack_SmpPairingPublicKey))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_ValidateSmpPacketTypeAndLength.isra.0
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForInitiatorPublicKey
</UL>

<P><STRONG><a name="[2cb]"></a>SmUnpack_SmpPairingRandom</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, sm_packet_op.o(.text.SmUnpack_SmpPairingRandom))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_ValidateSmpPacketTypeAndLength.isra.0
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForMrand
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScJwInitiatorNonce
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScPkEInitiatorNoncei
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScOobDataAndInitiatorNonce
</UL>

<P><STRONG><a name="[2b9]"></a>SmUnpack_SmpPairingRequestResponse</STRONG> (Thumb, 126 bytes, Stack size unknown bytes, sm_packet_op.o(.text.SmUnpack_SmpPairingRequestResponse))
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_ValidateSmpPacketTypeAndLength.isra.0
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_Idle
</UL>

<P><STRONG><a name="[2bd]"></a>SmUnpack_SmpSecurityRequest</STRONG> (Thumb, 82 bytes, Stack size unknown bytes, sm_packet_op.o(.text.SmUnpack_SmpSecurityRequest))
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_ValidateSmpPacketTypeAndLength.isra.0
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_Idle
</UL>

<P><STRONG><a name="[2d4]"></a>Sm_GetActivePeerDeviceSecProperties</STRONG> (Thumb, 66 bytes, Stack size unknown bytes, sm_core.o(.text.Sm_GetActivePeerDeviceSecProperties))
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_CallLlStateMachine
</UL>

<P><STRONG><a name="[200]"></a>Sm_HciCbEventHandler</STRONG> (Thumb, 228 bytes, Stack size unknown bytes, sm_core.o(.text.Sm_HciCbEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = Sm_HciCbEventHandler &rArr; SmStates_RunStateMachine &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_RunStateMachine
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendEventToUpperLayer
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_ConnHandleToDeviceHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci2Host_MsgHandler
</UL>

<P><STRONG><a name="[7f]"></a>Sm_HciEventCallback</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, sm_core.o(.text.Sm_HciEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = Sm_HciEventCallback &rArr; MEM_BufferAllocWithId &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddTailMsg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_core.o(.text.Sm_Init)
</UL>
<P><STRONG><a name="[24b]"></a>Sm_Init</STRONG> (Thumb, 124 bytes, Stack size unknown bytes, sm_core.o(.text.Sm_Init))
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemSet
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_RegisterSmCallback
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_RegisterSmpCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalBle_Initialize
</UL>

<P><STRONG><a name="[7e]"></a>Sm_L2caCbMsgHandler</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, sm_core.o(.text.Sm_L2caCbMsgHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = Sm_L2caCbMsgHandler &rArr; SmStates_RunStateMachine &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_RunStateMachine
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendEventToUpperLayer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_core.o(.text.Sm_Init)
</UL>
<P><STRONG><a name="[24f]"></a>Sm_SendCmd</STRONG> (Thumb, 532 bytes, Stack size unknown bytes, sm_core.o(.text.Sm_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = Sm_SendCmd &rArr; SmStates_RunStateMachine &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_CmdRequiresDeviceHandle
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_RunStateMachine
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_LeScSendKeypressNotification
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_LeScSetPeerOobData
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_LeScGetLocalOobData
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_LeScValidateNumericValue
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_LeScRegeneratePublicKey
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_CreateRandomAddress
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_DenyLongTermKey
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_ProvideLongTermKey
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_SendSmpKeys
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_ProvideOob
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_AcceptPairingRequest
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_SendSlaveSecurityRequest
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciGenericCbMsgHandler
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCommandCompleteCbMsgHandler
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_notifyConnectedDevice
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_EnterPasskey
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_verifyPraAtAppRequest
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smCallback
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminatePairing
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_autoConnectCheckNextIrk
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifySignature
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_checkNextIrk
</UL>

<P><STRONG><a name="[2bb]"></a>Sm_SendEventToUpperLayer</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, sm_core.o(.text.Sm_SendEventToUpperLayer))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_TimerCbEventHandler
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_HciCbEventHandler
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_RunStateMachine
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_L2caCbMsgHandler
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_CallTbStateMachine
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_CallLlStateMachine
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleSmDeviceGlobalMessages.isra.8
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForPairingResponseParams
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForTKeyAndMconfirm
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForMasterStkEncryption
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_ResponderWaitForUlKeysetResponse
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForInitiatorKeysDist
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForInitiatorPublicKey
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScJwInitiatorNonce
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScPkEPasskeyAndInitiatorCri
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_Idle
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleRemotePairingFailure
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_GeneratePairingFailedPacketAndEvent
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_BuildAndSendPairingCompleteEvent
</UL>

<P><STRONG><a name="[2b6]"></a>Sm_SendPacketToL2cap</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, sm_core.o(.text.Sm_SendPacketToL2cap))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = Sm_SendPacketToL2cap &rArr; L2ca_SendSmpData &rArr; L2caRm_HandleSendData &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_SendSmpData
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForPairingResponseParams
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForTKeyAndMconfirm
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForMrand
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_ResponderWaitForUlKeysetResponse
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForInitiatorPublicKey
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScJwInitiatorNonce
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScPkEPasskeyAndInitiatorCri
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScPkEInitiatorNoncei
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScOobDataAndInitiatorNonce
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScKeyConfirmAndInitiatorDhKeyCheck
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_Idle
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_GeneratePairingFailedPacketAndEvent
</UL>

<P><STRONG><a name="[7d]"></a>Sm_TimerCallback</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, sm_core.o(.text.Sm_TimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = Sm_TimerCallback &rArr; MEM_BufferAllocWithId &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddTailMsg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_states.o(.text.SmState_Idle)
</UL>
<P><STRONG><a name="[242]"></a>Sm_TimerCbEventHandler</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, sm_core.o(.text.Sm_TimerCbEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = Sm_TimerCbEventHandler &rArr; SmStates_RunStateMachine &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_RunStateMachine
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendEventToUpperLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
</UL>

<P><STRONG><a name="[1ca]"></a>SubtractBigHexMod256</STRONG> (Thumb, 3688 bytes, Stack size unknown bytes, ecc_p256.o(.text.SubtractBigHexMod256))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = SubtractBigHexMod256 &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GF_Jacobian_Point_Addition256
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GF_Jacobian_Point_Double256
</UL>

<P><STRONG><a name="[2e1]"></a>SubtractFromSelfBigHexSign256</STRONG> (Thumb, 2644 bytes, Stack size unknown bytes, ecc_p256.o(.text.SubtractFromSelfBigHexSign256))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = SubtractFromSelfBigHexSign256 &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigHexInversion256
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialModP256
</UL>

<P><STRONG><a name="[189]"></a>att_InitializeInternalCallback</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, att_cb.o(.text.att_InitializeInternalCallback))
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_RegisterAttCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Init
</UL>

<P><STRONG><a name="[2e3]"></a>att_ResponseReceived</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, att.o(.text.att_ResponseReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = att_ResponseReceived &rArr; TMR_StopTimer &rArr; StackTimer_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_IsTimerActive
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StopTimer
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_indexForDeviceId
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_l2caCbMsgHandler
</UL>

<P><STRONG><a name="[81]"></a>att_TimerCallback</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, att_cb.o(.text.att_TimerCallback))
<BR>[Address Reference Count : 1]<UL><LI> att.o(.text.att_SendData)
</UL>
<P><STRONG><a name="[80]"></a>att_l2caCbMsgHandler</STRONG> (Thumb, 756 bytes, Stack size unknown bytes, att_cb.o(.text.att_l2caCbMsgHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = att_l2caCbMsgHandler &rArr; att_ResponseReceived &rArr; TMR_StopTimer &rArr; StackTimer_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_ResponseReceived
</UL>
<BR>[Address Reference Count : 1]<UL><LI> att_cb.o(.text.att_InitializeInternalCallback)
</UL>
<P><STRONG><a name="[2e4]"></a>bigHexInversion256</STRONG> (Thumb, 3560 bytes, Stack size unknown bytes, ecc_p256.o(.text.bigHexInversion256))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = bigHexInversion256 &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialModP256
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractFromSelfBigHexSign256
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPdiv2_256
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_multiplication_event_handler
</UL>

<P><STRONG><a name="[1e2]"></a>checkAttributeAccess</STRONG> (Thumb, 180 bytes, Stack size unknown bytes, gatt_db_att.o(.text.checkAttributeAccess))
<BR><BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_checkSecurityForDatabaseAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttWriteCommand
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttPrepareNotificationIndication
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttReadByType
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttRead
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttReadBlob
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttReadMultiple
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttReadByGroupType
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttWrite
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateAttWriteParams
</UL>

<P><STRONG><a name="[2e8]"></a>ecc_gen_new_secret_key</STRONG> (Thumb, 208 bytes, Stack size unknown bytes, ecc_p256.o(.text.ecc_gen_new_secret_key))
<BR><BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_init
</UL>

<P><STRONG><a name="[2ea]"></a>ecc_init</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, ecc_p256.o(.text.ecc_init))
<BR><BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_callback_set (via Veneer)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_reset
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
</UL>

<P><STRONG><a name="[2f4]"></a>em_buf_init</STRONG> (Thumb, 412 bytes, Stack size unknown bytes, em_buf.o(.text.em_buf_init))
<BR><BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_reset
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_init
</UL>

<P><STRONG><a name="[2f6]"></a>gap_addNextAutoConnectAddressInWhiteList</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, gap.o(.text.gap_addNextAutoConnectAddressInWhiteList))
<BR><BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_AddDeviceToWhiteList
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_enableScanning
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCommandCompleteCbMsgHandler
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_scanningParametersSet
</UL>

<P><STRONG><a name="[2f8]"></a>gap_advertisingDataSet</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, gap.o(.text.gap_advertisingDataSet))
<BR><BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeSetScanResponseData
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_scanRspDataSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCommandCompleteCbMsgHandler
</UL>

<P><STRONG><a name="[2fb]"></a>gap_autoConnectIrkCheckComplete</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, gap.o(.text.gap_autoConnectIrkCheckComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = gap_autoConnectIrkCheckComplete &rArr; gap_autoConnectCheckNextIrk &rArr; Sm_SendCmd &rArr; SmStates_RunStateMachine &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_StopScanning
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_Connect
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_autoConnectCheckNextIrk
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smCallback
</UL>

<P><STRONG><a name="[291]"></a>gap_checkConnectionSecurity</STRONG> (Thumb, 120 bytes, Stack size unknown bytes, gap.o(.text.gap_checkConnectionSecurity))
<BR><BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleLeCbConnectionRequest
</UL>

<P><STRONG><a name="[2fc]"></a>gap_checkForAutoConnect</STRONG> (Thumb, 164 bytes, Stack size unknown bytes, gap.o(.text.gap_checkForAutoConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = gap_checkForAutoConnect &rArr; gap_autoConnectCheckNextIrk &rArr; Sm_SendCmd &rArr; SmStates_RunStateMachine &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_StopScanning
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_Connect
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_GetNbBondedDevices
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_autoConnectCheckNextIrk
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLeCbMsgHandler
</UL>

<P><STRONG><a name="[2e5]"></a>gap_checkSecurityForDatabaseAccess</STRONG> (Thumb, 476 bytes, Stack size unknown bytes, gap.o(.text.gap_checkSecurityForDatabaseAccess))
<BR><BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_GetServiceHandleForAttributeIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_handleSignedWriteCommand
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAttributeAccess
</UL>

<P><STRONG><a name="[302]"></a>gap_cm_handleSignedWriteCommand</STRONG> (Thumb, 128 bytes, Stack size unknown bytes, gap_cm.o(.text.gap_cm_handleSignedWriteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = gap_cm_handleSignedWriteCommand &rArr; gap_cm_checkNextCsrk &rArr; verifySignature &rArr; Sm_SendCmd &rArr; SmStates_RunStateMachine &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_GetIndexOfHandle
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_checkSecurityForDatabaseAccess
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_checkNextCsrk
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifySignature
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientSignedWriteCommand
</UL>

<P><STRONG><a name="[25b]"></a>gap_cm_irkCheckComplete</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, gap_cm.o(.text.gap_cm_irkCheckComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = gap_cm_irkCheckComplete &rArr; gap_cm_checkNextIrk &rArr; Sm_SendCmd &rArr; SmStates_RunStateMachine &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_MarkDeviceAsBonded
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerGenericCallback
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerConnectionCallback
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_checkNextIrk
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_HandleSmCheckResult
</UL>

<P><STRONG><a name="[303]"></a>gap_cm_notifyConnectedDevice</STRONG> (Thumb, 280 bytes, Stack size unknown bytes, gap_cm.o(.text.gap_cm_notifyConnectedDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = gap_cm_notifyConnectedDevice &rArr; Sm_SendCmd &rArr; SmStates_RunStateMachine &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_NotifyConnection
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_NotifyConnection
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_CheckIfBondedDeviceIsActive
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_MarkDeviceAsBonded
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_GetNbBondedDevices
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_GetBondedDeviceAddress
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_CheckIfBondedDeviceAddressIsStatic
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerConnectionCallback
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendCmd
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_checkNextIrk
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLeCbMsgHandler
</UL>

<P><STRONG><a name="[25c]"></a>gap_cm_signatureVerificationComplete</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, gap_cm.o(.text.gap_cm_signatureVerificationComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = gap_cm_signatureVerificationComplete &rArr; handleVerifiedSignedWriteCommand &rArr; DevDb_SetPeerSignCounter &rArr; App_NvmWrite &rArr; NvSaveOnIdle &rArr; __NvSaveOnIdle &rArr; NvAddSaveRequestToQueue &rArr; NvProcessFirstSaveInQueue &rArr;  NvAddSaveRequestToQueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_MarkDeviceAsBonded
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleVerifiedSignedWriteCommand
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_checkNextCsrk
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_HandleSmCheckResult
</UL>

<P><STRONG><a name="[272]"></a>gap_cm_verifyPraAtAppRequest</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, gap_cm.o(.text.gap_cm_verifyPraAtAppRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = gap_cm_verifyPraAtAppRequest &rArr; Sm_SendCmd &rArr; SmStates_RunStateMachine &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerGenericCallback
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_GetBondedDeviceIrk
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_VerifyPrivateResolvableAddress
</UL>

<P><STRONG><a name="[305]"></a>gap_discoveryFilterMatch</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, gap.o(.text.gap_discoveryFilterMatch))
<BR><BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findFlagsAdValue
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLeCbMsgHandler
</UL>

<P><STRONG><a name="[2f7]"></a>gap_enableScanning</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, gap.o(.text.gap_enableScanning))
<BR><BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeSetScanEnable
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerScanningCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_scanningParametersSet
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_addNextAutoConnectAddressInWhiteList
</UL>

<P><STRONG><a name="[2f9]"></a>gap_scanRspDataSet</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, gap.o(.text.gap_scanRspDataSet))
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerGenericCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCommandCompleteCbMsgHandler
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_advertisingDataSet
</UL>

<P><STRONG><a name="[307]"></a>gap_scanningParametersSet</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, gap.o(.text.gap_scanningParametersSet))
<BR><BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_addNextAutoConnectAddressInWhiteList
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_enableScanning
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCommandCompleteCbMsgHandler
</UL>

<P><STRONG><a name="[308]"></a>gap_sendLocalPasskey</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, gap.o(.text.gap_sendLocalPasskey))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = gap_sendLocalPasskey &rArr; InternalGap_EnterPasskey &rArr; Sm_SendCmd &rArr; SmStates_RunStateMachine &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_EnterPasskey
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerConnectionCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smCallback
</UL>

<P><STRONG><a name="[26b]"></a>gap_triggerAdvertisingCallback</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, gap.o(.text.gap_triggerAdvertisingCallback))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_StopAdvertising
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_StartAdvertising
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCommandCompleteCbMsgHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldmTimeout
</UL>

<P><STRONG><a name="[250]"></a>gap_triggerConnectionCallback</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, gap.o(.text.gap_triggerConnectionCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = gap_triggerConnectionCallback &rArr; TMR_FreeTimer &rArr; TMR_StopTimer &rArr; StackTimer_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StopTimer
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_FreeTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_AcceptPairingRequest
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciGenericCbMsgHandler
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLeCbMsgHandler
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCommandCompleteCbMsgHandler
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleLeConnectionUpdateComplete
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_irkCheckComplete
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_notifyConnectedDevice
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sendLocalPasskey
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smCallback
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleConnectionParameterUpdateResponse
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleConnectionParameterUpdateRequest
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_checkNextIrk
</UL>

<P><STRONG><a name="[1c1]"></a>gap_triggerGenericCallback</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, gap.o(.text.gap_triggerGenericCallback))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_LeScSendKeypressNotification
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_LeScSetPeerOobData
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_LeScGetLocalOobData
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_LeScValidateNumericValue
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_LeScRegeneratePublicKey
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_EnableControllerPrivacy
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_UpdateLeDataLength
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_EnableHostPrivacy
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_SetRandomAddress
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_ReadRadioPowerLevel
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_ReadPublicAddress
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_CreateRandomAddress
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_RemoveDeviceFromWhiteList
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_AddDeviceToWhiteList
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_ClearWhiteList
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_ReadWhiteListSize
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_Disconnect
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_DenyLongTermKey
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_ProvideLongTermKey
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_SendSmpKeys
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_ProvideOob
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_SendSlaveSecurityRequest
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_SetAdvertisingParameters
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCommandStatusCbMsgHandler
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLeCbMsgHandler
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCommandCompleteCbMsgHandler
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_irkCheckComplete
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_AutoConnectWithPra
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_scanRspDataSet
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_Connect
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_EnterPasskey
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_verifyPraAtAppRequest
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smCallback
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHostPrivacyTimer
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminatePairing
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifySignature
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_checkNextIrk
</UL>

<P><STRONG><a name="[270]"></a>gap_triggerScanningCallback</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, gap.o(.text.gap_triggerScanningCallback))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLeCbMsgHandler
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCommandCompleteCbMsgHandler
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_enableScanning
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_StopScanning
</UL>

<P><STRONG><a name="[320]"></a>gattServer_resetProcedureForDeviceId</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, gatt_server.o(.text.gattServer_resetProcedureForDeviceId))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciGenericCbMsgHandler
</UL>

<P><STRONG><a name="[30d]"></a>h4tl_init</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, h4tl.o(.text.h4tl_init))
<BR><BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_clear (via Veneer)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_callback_set (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
</UL>

<P><STRONG><a name="[3ec]"></a>h4tl_start</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, h4tl.o(.text.h4tl_start))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup
</UL>

<P><STRONG><a name="[311]"></a>h4tl_write</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, h4tl.o(.text.h4tl_write))
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_set (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tl_send
</UL>

<P><STRONG><a name="[79]"></a>handleClientTimeout</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, gatt_server.o(.text.handleClientTimeout))
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.text.InternalGattServer_Init)
</UL>
<P><STRONG><a name="[304]"></a>handleVerifiedSignedWriteCommand</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, gatt_server.o(.text.handleVerifiedSignedWriteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = handleVerifiedSignedWriteCommand &rArr; DevDb_SetPeerSignCounter &rArr; App_NvmWrite &rArr; NvSaveOnIdle &rArr; __NvSaveOnIdle &rArr; NvAddSaveRequestToQueue &rArr; NvProcessFirstSaveInQueue &rArr;  NvAddSaveRequestToQueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttSignedWriteCommand
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_SetPeerSignCounter
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isControlPointHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_signatureVerificationComplete
</UL>

<P><STRONG><a name="[67]"></a>hciCommandCompleteCallback</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, gap_hci_cb.o(.text.hciCommandCompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = hciCommandCompleteCallback &rArr; MEM_BufferAllocWithId &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddTailMsg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap.o(.text.InternalBle_Initialize)
</UL>
<P><STRONG><a name="[1ff]"></a>hciCommandCompleteCbMsgHandler</STRONG> (Thumb, 1668 bytes, Stack size unknown bytes, gap_hci_cb.o(.text.hciCommandCompleteCbMsgHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = hciCommandCompleteCbMsgHandler &rArr; InternalGap_CreateRandomAddress &rArr; Sm_SendCmd &rArr; SmStates_RunStateMachine &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_CreateRandomAddress
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_StartAdvertising
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeSetResolvablePrivateAddressTimeout
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeSetAddressResolutionEnable
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeReadPeerResolvableAddress
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeClearResolvingList
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeAddDeviceToResolvingList
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeWriteSuggestedDefaultDataLength
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeReadSuggestedDefaultDataLength
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeSetEventMask
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_SetEventMask
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeReadLocalSupportedFeatures
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_ReadBdAddr
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeReadBufferSize
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_GetDeviceId
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_Config
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_SaveLocalPublicAddress
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_AutoConnectWithPra
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_scanningParametersSet
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_addNextAutoConnectAddressInWhiteList
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerScanningCallback
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerAdvertisingCallback
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_advertisingDataSet
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_scanRspDataSet
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerGenericCallback
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerConnectionCallback
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci2Host_MsgHandler
</UL>

<P><STRONG><a name="[68]"></a>hciCommandStatusCallback</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, gap_hci_cb.o(.text.hciCommandStatusCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = hciCommandStatusCallback &rArr; MEM_BufferAllocWithId &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddTailMsg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap.o(.text.InternalBle_Initialize)
</UL>
<P><STRONG><a name="[202]"></a>hciCommandStatusCbMsgHandler</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, gap_hci_cb.o(.text.hciCommandStatusCbMsgHandler))
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerGenericCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci2Host_MsgHandler
</UL>

<P><STRONG><a name="[69]"></a>hciGenericCallback</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, gap_hci_cb.o(.text.hciGenericCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = hciGenericCallback &rArr; MEM_BufferAllocWithId &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddTailMsg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap.o(.text.InternalBle_Initialize)
</UL>
<P><STRONG><a name="[203]"></a>hciGenericCbMsgHandler</STRONG> (Thumb, 82 bytes, Stack size unknown bytes, gap_hci_cb.o(.text.hciGenericCbMsgHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = hciGenericCbMsgHandler &rArr; Sm_SendCmd &rArr; SmStates_RunStateMachine &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_NotifyDisconnection
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_GetDeviceId
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_ReleaseConnection
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_NotifyDisconnection
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServer_resetProcedureForDeviceId
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerConnectionCallback
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci2Host_MsgHandler
</UL>

<P><STRONG><a name="[66]"></a>hciLeCallback</STRONG> (Thumb, 128 bytes, Stack size unknown bytes, gap_hci_cb.o(.text.hciLeCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = hciLeCallback &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddTailMsg
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferFree
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap.o(.text.InternalBle_Initialize)
</UL>
<P><STRONG><a name="[201]"></a>hciLeCbMsgHandler</STRONG> (Thumb, 1024 bytes, Stack size unknown bytes, gap_hci_cb.o(.text.hciLeCbMsgHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = hciLeCbMsgHandler &rArr; gap_cm_notifyConnectedDevice &rArr; Sm_SendCmd &rArr; SmStates_RunStateMachine &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferFree
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_GetDeviceId
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_Config
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNonZeroAddress
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_notifyConnectedDevice
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_AddConnection
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_discoveryFilterMatch
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_checkForAutoConnect
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerScanningCallback
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerGenericCallback
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerConnectionCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci2Host_MsgHandler
</UL>

<P><STRONG><a name="[30f]"></a>hci_acl_tx_data_received</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, hci_tl.o(.text.hci_acl_tx_data_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = hci_acl_tx_data_received &rArr; ke_msg_send &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_rx_done
</UL>

<P><STRONG><a name="[309]"></a>hci_cmd_get_max_param_size</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, hci_tl.o(.text.hci_cmd_get_max_param_size))
<BR><BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_look_for_cmd_desc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_cmd_hdr_rx_evt_handler
</UL>

<P><STRONG><a name="[30c]"></a>hci_cmd_received</STRONG> (Thumb, 360 bytes, Stack size unknown bytes, hci_tl.o(.text.hci_cmd_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = hci_cmd_received &rArr; ke_msg_send &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_util_unpack (via Veneer)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_look_for_cmd_desc (via Veneer)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_reject (via Veneer)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_cmd_hdr_rx_evt_handler
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_rx_done
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_cmd_pld_rx_evt_handler
</UL>

<P><STRONG><a name="[f3]"></a>hci_command_handler</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, llm_hci.o(.text.hci_command_handler))
<BR>[Address Reference Count : 1]<UL><LI> llm_task.o(.rodata.llm_default_state)
</UL>
<P><STRONG><a name="[30a]"></a>hci_send_2_host</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, hci.o(.text.hci_send_2_host))
<BR><BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free (via Veneer)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tl_send
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_test_mode_mngt_cmd_handler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_local_ver_info_cmd_handler
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_common_cmd_complete_send
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_le_adv_report_ind
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_encryption_done
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_data_ind_handler
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_phy_update_finished
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_phy_update_complete_send
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_update_ind
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_update_complete_send
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_cmd_hdr_rx_evt_handler
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_rx_done
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_length_rsp_handler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_length_req_handler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_unknown_rsp_handler
</UL>

<P><STRONG><a name="[33d]"></a>hci_tl_send</STRONG> (Thumb, 584 bytes, Stack size unknown bytes, hci_tl.o(.text.hci_tl_send))
<BR><BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_util_pack (via Veneer)
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_look_for_le_evt_desc (via Veneer)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_look_for_evt_desc (via Veneer)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_look_for_cmd_desc (via Veneer)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_fc_check_host_available_nb_acl_packets (via Veneer)
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_buf_rx_buff_addr_get (via Veneer)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_write
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>

<P><STRONG><a name="[2f2]"></a>ke_event_set</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, rtos.o(.text.ke_event_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Semaphore_Give
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_encryption_start
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_canceled
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_insert
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_rx_isr
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_end_isr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_rx_done
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_tx_done
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_multiplication_event_handler
</UL>

<P><STRONG><a name="[2f1]"></a>ke_msg_send</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, rtos.o(.text.ke_msg_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ke_msg_send &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Semaphore_Give
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_slave
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_encryption_done
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_enc_mgt_ind_handler
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_rx_handler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_deffered_elt_handler
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_tx_data_received
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_received
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_multiplication_event_handler
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_req_handler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_phy_req_handler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_rsp_handler
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_phy_upd_ind_handler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_phy_rsp_handler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_unknown_rsp_handler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_reject_ind_ext_handler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enc_rsp_handler
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_anchor_point_move
</UL>

<P><STRONG><a name="[345]"></a>llc_ch_assess_get_local_ch_map</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, llc_ch_asses.o(.text.llc_ch_assess_get_local_ch_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = llc_ch_assess_get_local_ch_map &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_chnl_assess_timer_handler
</UL>

<P><STRONG><a name="[34a]"></a>llc_ch_assess_reass_ch</STRONG> (Thumb, 196 bytes, Stack size unknown bytes, llc_ch_asses.o(.text.llc_ch_assess_reass_ch))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_chnl_assess_timer_handler
</UL>

<P><STRONG><a name="[352]"></a>llc_con_update_complete_send</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, llc.o(.text.llc_con_update_complete_send))
<BR><BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_stop_ind_handler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_rsp_handler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_unknown_rsp_handler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_reject_ind_ext_handler
</UL>

<P><STRONG><a name="[353]"></a>llc_con_update_finished</STRONG> (Thumb, 144 bytes, Stack size unknown bytes, llc.o(.text.llc_con_update_finished))
<BR><BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode (via Veneer)
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_clear_operation_ptr (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_deffered_elt_handler
</UL>

<P><STRONG><a name="[355]"></a>llc_con_update_ind</STRONG> (Thumb, 168 bytes, Stack size unknown bytes, llc.o(.text.llc_con_update_ind))
<BR><BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_check_evt_mask (via Veneer)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_deffered_elt_handler
</UL>

<P><STRONG><a name="[361]"></a>llc_end_evt_defer</STRONG> (Thumb, 252 bytes, Stack size unknown bytes, llc_util.o(.text.llc_end_evt_defer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llc_end_evt_defer &rArr; lld_util_anchor_point_move &rArr; ke_msg_send &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode (via Veneer)
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_stop (via Veneer)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_get_nb_active_link (via Veneer)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_anchor_point_move
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_deffered_elt_handler
</UL>

<P><STRONG><a name="[365]"></a>llc_init</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, llc.o(.text.llc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = llc_init &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_create (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_init
</UL>

<P><STRONG><a name="[347]"></a>llc_llcp_ch_map_update_pdu_send</STRONG> (Thumb, 208 bytes, Stack size unknown bytes, llc_llcp.o(.text.llc_llcp_ch_map_update_pdu_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llc_llcp_ch_map_update_pdu_send &rArr; lld_evt_schedule_next &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_instant_get
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_chmap_update_req_ind_handler
</UL>

<P><STRONG><a name="[34f]"></a>llc_llcp_con_param_req_pdu_send</STRONG> (Thumb, 248 bytes, Stack size unknown bytes, llc_llcp.o(.text.llc_llcp_con_param_req_pdu_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llc_llcp_con_param_req_pdu_send &rArr; lld_evt_schedule_next &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler
</UL>

<P><STRONG><a name="[36a]"></a>llc_llcp_con_param_rsp_pdu_send</STRONG> (Thumb, 248 bytes, Stack size unknown bytes, llc_llcp.o(.text.llc_llcp_con_param_rsp_pdu_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llc_llcp_con_param_rsp_pdu_send &rArr; lld_evt_schedule_next &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_req_handler
</UL>

<P><STRONG><a name="[34d]"></a>llc_llcp_con_update_pdu_send</STRONG> (Thumb, 212 bytes, Stack size unknown bytes, llc_llcp.o(.text.llc_llcp_con_update_pdu_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llc_llcp_con_update_pdu_send &rArr; lld_evt_schedule_next &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler
</UL>

<P><STRONG><a name="[35f]"></a>llc_llcp_enc_req_pdu_send</STRONG> (Thumb, 240 bytes, Stack size unknown bytes, llc_llcp.o(.text.llc_llcp_enc_req_pdu_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llc_llcp_enc_req_pdu_send &rArr; llc_llcp_send &rArr; lld_evt_schedule_next &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set (via Veneer)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_enc_mgt_ind_handler
</UL>

<P><STRONG><a name="[358]"></a>llc_llcp_enc_rsp_pdu_send</STRONG> (Thumb, 136 bytes, Stack size unknown bytes, llc_llcp.o(.text.llc_llcp_enc_rsp_pdu_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llc_llcp_enc_rsp_pdu_send &rArr; llc_llcp_send &rArr; lld_evt_schedule_next &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_enc_mgt_ind_handler
</UL>

<P><STRONG><a name="[3cb]"></a>llc_llcp_get_autorize</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, llc_llcp.o(.text.llc_llcp_get_autorize))
<BR><BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_prog
</UL>

<P><STRONG><a name="[367]"></a>llc_llcp_length_req_pdu_send</STRONG> (Thumb, 204 bytes, Stack size unknown bytes, llc_llcp.o(.text.llc_llcp_length_req_pdu_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llc_llcp_length_req_pdu_send &rArr; lld_evt_schedule_next &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_length_req_ind_handler
</UL>

<P><STRONG><a name="[35d]"></a>llc_llcp_pause_enc_req_pdu_send</STRONG> (Thumb, 192 bytes, Stack size unknown bytes, llc_llcp.o(.text.llc_llcp_pause_enc_req_pdu_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llc_llcp_pause_enc_req_pdu_send &rArr; lld_evt_schedule_next &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set (via Veneer)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_enc_mgt_ind_handler
</UL>

<P><STRONG><a name="[35c]"></a>llc_llcp_pause_enc_rsp_pdu_send</STRONG> (Thumb, 208 bytes, Stack size unknown bytes, llc_llcp.o(.text.llc_llcp_pause_enc_rsp_pdu_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llc_llcp_pause_enc_rsp_pdu_send &rArr; lld_evt_schedule_next &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_enc_mgt_ind_handler
</UL>

<P><STRONG><a name="[36c]"></a>llc_llcp_phy_req_pdu_send</STRONG> (Thumb, 188 bytes, Stack size unknown bytes, llc_llcp.o(.text.llc_llcp_phy_req_pdu_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llc_llcp_phy_req_pdu_send &rArr; lld_evt_schedule_next &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_phy_upd_req_ind_handler
</UL>

<P><STRONG><a name="[36d]"></a>llc_llcp_phy_upd_ind_pdu_send</STRONG> (Thumb, 192 bytes, Stack size unknown bytes, llc_llcp.o(.text.llc_llcp_phy_upd_ind_pdu_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llc_llcp_phy_upd_ind_pdu_send &rArr; lld_evt_schedule_next &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_phy_upd_req_ind_handler
</UL>

<P><STRONG><a name="[344]"></a>llc_llcp_ping_req_pdu_send</STRONG> (Thumb, 164 bytes, Stack size unknown bytes, llc_llcp.o(.text.llc_llcp_ping_req_pdu_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llc_llcp_ping_req_pdu_send &rArr; lld_evt_schedule_next &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_auth_payl_nearly_to_ind_handler
</UL>

<P><STRONG><a name="[36e]"></a>llc_llcp_recv_handler</STRONG> (Thumb, 180 bytes, Stack size unknown bytes, llc_llcp.o(.text.llc_llcp_recv_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llc_llcp_recv_handler &rArr; llc_llcp_send &rArr; lld_evt_schedule_next &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_recv_ind_handler
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_rx_handler
</UL>

<P><STRONG><a name="[35b]"></a>llc_llcp_reject_ind_pdu_send</STRONG> (Thumb, 244 bytes, Stack size unknown bytes, llc_llcp.o(.text.llc_llcp_reject_ind_pdu_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llc_llcp_reject_ind_pdu_send &rArr; lld_evt_schedule_next &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_enc_mgt_ind_handler
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_req_handler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_phy_req_handler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_upd_ind_handler
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_channel_map_ind_handler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_rsp_handler
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_phy_upd_ind_handler
</UL>

<P><STRONG><a name="[35a]"></a>llc_llcp_start_enc_req_pdu_send</STRONG> (Thumb, 264 bytes, Stack size unknown bytes, llc_llcp.o(.text.llc_llcp_start_enc_req_pdu_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llc_llcp_start_enc_req_pdu_send &rArr; lld_evt_schedule_next &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_enc_mgt_ind_handler
</UL>

<P><STRONG><a name="[35e]"></a>llc_llcp_start_enc_rsp_pdu_send</STRONG> (Thumb, 228 bytes, Stack size unknown bytes, llc_llcp.o(.text.llc_llcp_start_enc_rsp_pdu_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llc_llcp_start_enc_rsp_pdu_send &rArr; lld_evt_schedule_next &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_compute_ce_max (via Veneer)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_enc_mgt_ind_handler
</UL>

<P><STRONG><a name="[360]"></a>llc_llcp_terminate_ind_pdu_send</STRONG> (Thumb, 248 bytes, Stack size unknown bytes, llc_llcp.o(.text.llc_llcp_terminate_ind_pdu_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llc_llcp_terminate_ind_pdu_send &rArr; lld_evt_schedule_next &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_enc_mgt_ind_handler
</UL>

<P><STRONG><a name="[370]"></a>llc_lsto_con_update</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, llc.o(.text.llc_lsto_con_update))
<BR><BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_restart
</UL>

<P><STRONG><a name="[371]"></a>llc_pdu_defer</STRONG> (Thumb, 324 bytes, Stack size unknown bytes, llc_util.o(.text.llc_pdu_defer))
<BR><BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_stop (via Veneer)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_ch_assess_local (via Veneer)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set (via Veneer)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_check
</UL>

<P><STRONG><a name="[373]"></a>llc_pdu_llcp_tx_ack_defer</STRONG> (Thumb, 436 bytes, Stack size unknown bytes, llc_util.o(.text.llc_pdu_llcp_tx_ack_defer))
<BR><BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_get_tx_pkt_cnt (via Veneer)
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_stop (via Veneer)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send_basic (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_check
</UL>

<P><STRONG><a name="[379]"></a>llc_phy_update_complete_send</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, llc.o(.text.llc_phy_update_complete_send))
<BR><BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_stop_ind_handler
</UL>

<P><STRONG><a name="[375]"></a>llc_phy_update_finished</STRONG> (Thumb, 220 bytes, Stack size unknown bytes, llc.o(.text.llc_phy_update_finished))
<BR><BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_phy_upd_req_ind_handler
</UL>

<P><STRONG><a name="[37a]"></a>llc_reset</STRONG> (Thumb, 160 bytes, Stack size unknown bytes, llc.o(.text.llc_reset))
<BR><BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bl_rem (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free (via Veneer)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_reset
</UL>

<P><STRONG><a name="[37c]"></a>llc_start</STRONG> (Thumb, 488 bytes, Stack size unknown bytes, llc.o(.text.llc_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = llc_start &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_get_supp_features (via Veneer)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_get_channel_map (via Veneer)
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_set_auth_payl_to_margin (via Veneer)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_le_con_cmp_evt_send (via Veneer)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_con_req_tx_cfm
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_con_req_ind
</UL>

<P><STRONG><a name="[380]"></a>llc_stop</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, llc.o(.text.llc_stop))
<BR><BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bl_rem (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free (via Veneer)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_stop_ind_handler
</UL>

<P><STRONG><a name="[357]"></a>llc_util_dicon_procedure</STRONG> (Thumb, 116 bytes, Stack size unknown bytes, llc_util.o(.text.llc_util_dicon_procedure))
<BR><BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_stop (via Veneer)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_recv_handler
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_data_ind_handler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_link_sup_to_ind_handler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_rsp_to_ind_handler
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_req_handler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_phy_req_handler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_upd_ind_handler
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_channel_map_ind_handler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_rsp_handler
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_phy_upd_ind_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_length_rsp_handler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_ping_req_handler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_phy_rsp_handler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_feats_rsp_handler
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_reject_ind_handler
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pause_enc_rsp_handler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_start_enc_rsp_handler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_length_req_handler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_unknown_rsp_handler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enc_req_handler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_start_enc_req_handler
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pause_enc_req_handler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_vers_ind_handler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_reject_ind_ext_handler
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_terminate_ind_handler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enc_rsp_handler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_feats_req_handler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_ping_rsp_handler
</UL>

<P><STRONG><a name="[38a]"></a>lld_adv_start</STRONG> (Thumb, 1038 bytes, Stack size unknown bytes, lld.o(.text.lld_adv_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = lld_adv_start &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bd_addr_in_ral (via Veneer)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_push (via Veneer)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_loop (via Veneer)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_insert
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_adv_create
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_adv_en
</UL>

<P><STRONG><a name="[382]"></a>lld_ch_map_ind</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, lld.o(.text.lld_ch_map_ind))
<BR><BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_map_update_ind (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_channel_map_ind_handler
</UL>

<P><STRONG><a name="[34e]"></a>lld_con_param_req</STRONG> (Thumb, 196 bytes, Stack size unknown bytes, lld.o(.text.lld_con_param_req))
<BR><BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_get_peer_offset (via Veneer)
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_offset_req (via Veneer)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_interval_duration_req (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler
</UL>

<P><STRONG><a name="[383]"></a>lld_con_param_rsp</STRONG> (Thumb, 266 bytes, Stack size unknown bytes, lld.o(.text.lld_con_param_rsp))
<BR><BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_get_peer_offset (via Veneer)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_get_local_offset (via Veneer)
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_offset_req (via Veneer)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_interval_duration_req (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_req_handler
</UL>

<P><STRONG><a name="[395]"></a>lld_con_start</STRONG> (Thumb, 2026 bytes, Stack size unknown bytes, lld.o(.text.lld_con_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = lld_con_start &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_get_channel_map (via Veneer)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_check_map_validity (via Veneer)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bd_addr_in_ral (via Veneer)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_apply_bd_addr (via Veneer)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_connection_param_set (via Veneer)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_push (via Veneer)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_adv_pack (via Veneer)
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_init_evt (via Veneer)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_time_get_halfslot_rounded (via Veneer)
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_offset_req (via Veneer)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_interval_duration_req (via Veneer)
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_elt_create (via Veneer)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_priority_set
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_insert
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_create_con
</UL>

<P><STRONG><a name="[34c]"></a>lld_con_update_after_param_req</STRONG> (Thumb, 608 bytes, Stack size unknown bytes, lld.o(.text.lld_con_update_after_param_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = lld_con_update_after_param_req &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_get_peer_offset (via Veneer)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_get_local_offset (via Veneer)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_compute_ce_max (via Veneer)
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_init_evt (via Veneer)
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_offset_req (via Veneer)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_interval_duration_req (via Veneer)
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_elt_create (via Veneer)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler
</UL>

<P><STRONG><a name="[384]"></a>lld_con_update_ind</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, lld.o(.text.lld_con_update_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = lld_con_update_ind &rArr; lld_evt_slave_update &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_slave_update
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_upd_ind_handler
</UL>

<P><STRONG><a name="[351]"></a>lld_con_update_req</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, lld.o(.text.lld_con_update_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = lld_con_update_req &rArr; lld_evt_update_create &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_update_create
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler
</UL>

<P><STRONG><a name="[38b]"></a>lld_evt_adv_create</STRONG> (Thumb, 148 bytes, Stack size unknown bytes, lld_evt.o(.text.lld_evt_adv_create))
<BR><BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_init_evt (via Veneer)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_time_get_halfslot_rounded (via Veneer)
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_elt_create (via Veneer)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_priority_set
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_adv_start
</UL>

<P><STRONG><a name="[93]"></a>lld_evt_canceled</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, lld_evt.o(.text.lld_evt_canceled))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = lld_evt_canceled &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_extract (via Veneer)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_insert
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_restart
</UL>
<BR>[Address Reference Count : 4]<UL><LI> lld.o(.text.lld_con_start)
<LI> lld_evt.o(.text.lld_evt_scan_create)
<LI> lld_evt.o(.text.lld_evt_move_to_slave)
<LI> lld_evt.o(.text.lld_evt_adv_create)
</UL>
<P><STRONG><a name="[9a]"></a>lld_evt_deffered_elt_handler</STRONG> (Thumb, 380 bytes, Stack size unknown bytes, lld_evt.o(.text.lld_evt_deffered_elt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = lld_evt_deffered_elt_handler &rArr; ke_msg_send &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_end_evt_defer (via Veneer)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_delete_elt_push (via Veneer)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_map_update_finished (via Veneer)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_clear (via Veneer)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_buf_tx_free (via Veneer)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_update_finished
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_update_ind
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_check
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_end_evt_defer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lld_evt.o(.text.lld_evt_init)
</UL>
<P><STRONG><a name="[38e]"></a>lld_evt_elt_insert</STRONG> (Thumb, 188 bytes, Stack size unknown bytes, lld_evt.o(.text.lld_evt_elt_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_elt_insert (via Veneer)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_restart
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_canceled
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_start
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_scan_start
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_adv_start
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_move_to_master
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_move_to_slave
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_end_isr
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next
</UL>

<P><STRONG><a name="[192]"></a>lld_evt_end_isr</STRONG> (Thumb, 608 bytes, Stack size unknown bytes, lld_evt.o(.text.lld_evt_end_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = lld_evt_end_isr &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_delete_elt_push (via Veneer)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_elt_remove (via Veneer)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_elt_insert (via Veneer)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_insert
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_rx_handler
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_restart
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler
</UL>

<P><STRONG><a name="[3ab]"></a>lld_evt_init</STRONG> (Thumb, 400 bytes, Stack size unknown bytes, lld_evt.o(.text.lld_evt_init))
<BR><BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_clear (via Veneer)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_flush_list (via Veneer)
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_flush (via Veneer)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_callback_set (via Veneer)
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_interval_remove (via Veneer)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_init
</UL>

<P><STRONG><a name="[3af]"></a>lld_evt_move_to_master</STRONG> (Thumb, 356 bytes, Stack size unknown bytes, lld_evt.o(.text.lld_evt_move_to_master))
<BR><BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_scan_stop (via Veneer)
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_channel_next (via Veneer)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_time_get_halfslot_rounded (via Veneer)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_interval_insert (via Veneer)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_interval_create (via Veneer)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_priority_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_move_to_master
</UL>

<P><STRONG><a name="[3b4]"></a>lld_evt_move_to_slave</STRONG> (Thumb, 998 bytes, Stack size unknown bytes, lld_evt.o(.text.lld_evt_move_to_slave))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = lld_evt_move_to_slave &rArr; ke_msg_send &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_get_peer_offset (via Veneer)
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_init_evt (via Veneer)
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_drift_compute (via Veneer)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_delete_elt_push (via Veneer)
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_channel_next (via Veneer)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_offset_req (via Veneer)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_interval_insert (via Veneer)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_interval_duration_req (via Veneer)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_interval_create (via Veneer)
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_elt_create (via Veneer)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_priority_set
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_winsize_change
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_move_to_slave
</UL>

<P><STRONG><a name="[3a0]"></a>lld_evt_restart</STRONG> (Thumb, 2736 bytes, Stack size unknown bytes, lld_evt.o(.text.lld_evt_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = lld_evt_restart &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_phy_update_ind (via Veneer)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_compute_ce_max (via Veneer)
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_drift_compute (via Veneer)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_delete_elt_push (via Veneer)
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_channel_next (via Veneer)
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_map_update_ind (via Veneer)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_priority_set
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_lsto_con_update
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_deferred_elt_push
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_winsize_change
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_canceled
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_insert
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_end_isr
</UL>

<P><STRONG><a name="[193]"></a>lld_evt_rx_isr</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, lld_evt.o(.text.lld_evt_rx_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = lld_evt_rx_isr &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_rx_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler
</UL>

<P><STRONG><a name="[3b8]"></a>lld_evt_scan_create</STRONG> (Thumb, 144 bytes, Stack size unknown bytes, lld_evt.o(.text.lld_evt_scan_create))
<BR><BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_init_evt (via Veneer)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_time_get_halfslot_rounded (via Veneer)
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_elt_create (via Veneer)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_priority_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_scan_start
</UL>

<P><STRONG><a name="[92]"></a>lld_evt_schedule</STRONG> (Thumb, 548 bytes, Stack size unknown bytes, lld_evt.o(.text.lld_evt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = lld_evt_schedule &rArr; lld_pdu_tx_prog &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_ral_force_rpa_renew (via Veneer)
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_dle_set_cs_fields (via Veneer)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_extract (via Veneer)
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_prog
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_adv_data_update
</UL>
<BR>[Address Reference Count : 4]<UL><LI> lld.o(.text.lld_con_start)
<LI> lld_evt.o(.text.lld_evt_scan_create)
<LI> lld_evt.o(.text.lld_evt_move_to_slave)
<LI> lld_evt.o(.text.lld_evt_adv_create)
</UL>
<P><STRONG><a name="[369]"></a>lld_evt_schedule_next</STRONG> (Thumb, 808 bytes, Stack size unknown bytes, lld_evt.o(.text.lld_evt_schedule_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = lld_evt_schedule_next &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_compute_ce_max (via Veneer)
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_drift_compute (via Veneer)
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_channel_next (via Veneer)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_time_get_halfslot_rounded (via Veneer)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_elt_remove (via Veneer)
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_find (via Veneer)
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_extract (via Veneer)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_insert
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_winsize_change
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_terminate_ind_pdu_send
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_start_enc_rsp_pdu_send
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_pause_enc_req_pdu_send
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_pause_enc_rsp_pdu_send
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_reject_ind_pdu_send
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_start_enc_req_pdu_send
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_ping_req_pdu_send
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_length_req_pdu_send
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_con_param_req_pdu_send
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_con_update_pdu_send
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_ch_map_update_pdu_send
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_phy_req_pdu_send
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_phy_upd_ind_pdu_send
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_con_param_rsp_pdu_send
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_req_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_length_rsp_handler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_ping_req_handler
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
</UL>

<P><STRONG><a name="[39d]"></a>lld_evt_slave_update</STRONG> (Thumb, 312 bytes, Stack size unknown bytes, lld_evt.o(.text.lld_evt_slave_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = lld_evt_slave_update &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_init_evt (via Veneer)
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_drift_compute (via Veneer)
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_elt_create (via Veneer)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_update_ind
</UL>

<P><STRONG><a name="[39e]"></a>lld_evt_update_create</STRONG> (Thumb, 312 bytes, Stack size unknown bytes, lld_evt.o(.text.lld_evt_update_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = lld_evt_update_create &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_connection_param_set (via Veneer)
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_init_evt (via Veneer)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_delete_elt_push (via Veneer)
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_offset_req (via Veneer)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_interval_duration_req (via Veneer)
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_elt_create (via Veneer)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_update_req
</UL>

<P><STRONG><a name="[3bd]"></a>lld_init</STRONG> (Thumb, 1116 bytes, Stack size unknown bytes, lld.o(.text.lld_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = lld_init &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_wlcoex_set (via Veneer)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_init (via Veneer)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_create (via Veneer)
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_init
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_gen_new_secret_key
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_reset
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_init
</UL>

<P><STRONG><a name="[3c0]"></a>lld_move_to_master</STRONG> (Thumb, 308 bytes, Stack size unknown bytes, lld.o(.text.lld_move_to_master))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = lld_move_to_master &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_eff_tx_time_set (via Veneer)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_compute_ce_max (via Veneer)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_master
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_con_req_tx_cfm
</UL>

<P><STRONG><a name="[3c1]"></a>lld_move_to_slave</STRONG> (Thumb, 624 bytes, Stack size unknown bytes, lld.o(.text.lld_move_to_slave))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = lld_move_to_slave &rArr; lld_evt_move_to_slave &rArr; ke_msg_send &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_check_map_validity (via Veneer)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_eff_tx_time_set (via Veneer)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_compute_ce_max (via Veneer)
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_slave
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_con_req_ind
</UL>

<P><STRONG><a name="[3a2]"></a>lld_pdu_check</STRONG> (Thumb, 648 bytes, Stack size unknown bytes, lld_pdu.o(.text.lld_pdu_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = lld_pdu_check &rArr; llm_pdu_defer &rArr; llm_con_req_tx_cfm &rArr; lld_move_to_master &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_pdu_acl_tx_ack_defer (via Veneer)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_buf_tx_free (via Veneer)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_merge (via Veneer)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init (via Veneer)
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_pdu_defer
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_pdu_defer
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_pdu_llcp_tx_ack_defer
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_deffered_elt_handler
</UL>

<P><STRONG><a name="[3aa]"></a>lld_pdu_rx_handler</STRONG> (Thumb, 644 bytes, Stack size unknown bytes, lld_pdu.o(.text.lld_pdu_rx_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = lld_pdu_rx_handler &rArr; ke_msg_send &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_buf_rx_free (via Veneer)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_recv_handler
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_rx_isr
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_end_isr
</UL>

<P><STRONG><a name="[3c5]"></a>lld_pdu_send_packet</STRONG> (Thumb, 268 bytes, Stack size unknown bytes, lld_pdu.o(.text.lld_pdu_send_packet))
<BR><BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_data_tx_push (via Veneer)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_prog
</UL>

<P><STRONG><a name="[3ba]"></a>lld_pdu_tx_prog</STRONG> (Thumb, 856 bytes, Stack size unknown bytes, lld_pdu.o(.text.lld_pdu_tx_prog))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = lld_pdu_tx_prog &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_push_front (via Veneer)
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_push_back (via Veneer)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_pop_front (via Veneer)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_pack (via Veneer)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_size (via Veneer)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_merge (via Veneer)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init (via Veneer)
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_extract (via Veneer)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_send_packet
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_get_autorize
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule
</UL>

<P><STRONG><a name="[3cd]"></a>lld_scan_start</STRONG> (Thumb, 756 bytes, Stack size unknown bytes, lld.o(.text.lld_scan_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = lld_scan_start &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_connection_param_set (via Veneer)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_push (via Veneer)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_loop (via Veneer)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_delete_elt_push (via Veneer)
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_offset_req (via Veneer)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_interval_duration_req (via Veneer)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_scan_create
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_scan_en
</UL>

<P><STRONG><a name="[3ce]"></a>lld_sleep_wakeup</STRONG> (Thumb, 184 bytes, Stack size unknown bytes, lld_sleep.o(.text.lld_sleep_wakeup))
<BR><BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_lpcycles_2_us
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup
</UL>

<P><STRONG><a name="[363]"></a>lld_util_anchor_point_move</STRONG> (Thumb, 232 bytes, Stack size unknown bytes, lld_util.o(.text.lld_util_anchor_point_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = lld_util_anchor_point_move &rArr; ke_msg_send &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_get_peer_offset (via Veneer)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_offset_req (via Veneer)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_end_evt_defer
</UL>

<P><STRONG><a name="[368]"></a>lld_util_instant_get</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, lld_util.o(.text.lld_util_instant_get))
<BR><BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_ch_map_update_pdu_send
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_phy_upd_req_ind_handler
</UL>

<P><STRONG><a name="[378]"></a>lld_util_phy_update_req</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, lld_util.o(.text.lld_util_phy_update_req))
<BR><BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_phy_update_ind (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_phy_upd_req_ind_handler
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_phy_upd_ind_handler
</UL>

<P><STRONG><a name="[398]"></a>lld_util_priority_set</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, lld_util.o(.text.lld_util_priority_set))
<BR><BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_slave
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_master
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_scan_create
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_adv_create
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_start
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_restart
</UL>

<P><STRONG><a name="[328]"></a>llm_common_cmd_complete_send</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, llm.o(.text.llm_common_cmd_complete_send))
<BR><BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_param_cmd_handler
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_data_cmd_handler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_en_cmd_handler
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_rsp_data_cmd_handler
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_en_cmd_handler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_host_ch_class_cmd_handler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_test_mode_mngt_cmd_handler
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset_cmd_handler
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enh_privacy_mgmt_cmd_handler
</UL>

<P><STRONG><a name="[3d1]"></a>llm_con_req_ind</STRONG> (Thumb, 400 bytes, Stack size unknown bytes, llm.o(.text.llm_con_req_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llm_con_req_ind &rArr; lld_move_to_slave &rArr; lld_evt_move_to_slave &rArr; ke_msg_send &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bl_check (via Veneer)
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bl_add (via Veneer)
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_update_channel_map (via Veneer)
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_get_free_conhdl (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_move_to_slave
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_start
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_pdu_defer
</UL>

<P><STRONG><a name="[3d6]"></a>llm_con_req_tx_cfm</STRONG> (Thumb, 344 bytes, Stack size unknown bytes, llm.o(.text.llm_con_req_tx_cfm))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llm_con_req_tx_cfm &rArr; lld_move_to_master &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bl_add (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_move_to_master
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_start
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_pdu_defer
</UL>

<P><STRONG><a name="[326]"></a>llm_create_con</STRONG> (Thumb, 344 bytes, Stack size unknown bytes, llm.o(.text.llm_create_con))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llm_create_con &rArr; lld_con_start &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bl_check (via Veneer)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bd_addr_in_ral (via Veneer)
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_ral_update (via Veneer)
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_get_free_conhdl (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_bdaddr_compare (via Veneer)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_start
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_create_con_cmd_handler
</UL>

<P><STRONG><a name="[9f]"></a>llm_encryption_done</STRONG> (Thumb, 144 bytes, Stack size unknown bytes, llm.o(.text.llm_encryption_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llm_encryption_done &rArr; llm_encryption_start &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_encryption_start
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_clear (via Veneer)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free (via Veneer)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_clear (via Veneer)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm.o(.text.llm_init)
</UL>
<P><STRONG><a name="[327]"></a>llm_encryption_start</STRONG> (Thumb, 284 bytes, Stack size unknown bytes, llm.o(.text.llm_encryption_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llm_encryption_start &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_set (via Veneer)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_aes
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_enc_req_handler
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enc_cmd_handler
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_encryption_done
</UL>

<P><STRONG><a name="[3da]"></a>llm_init</STRONG> (Thumb, 556 bytes, Stack size unknown bytes, llm.o(.text.llm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = llm_init &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_wl_clr (via Veneer)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_ral_clear (via Veneer)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_flush_list (via Veneer)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_create (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free (via Veneer)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_callback_set (via Veneer)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init (via Veneer)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_reset
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_init
</UL>

<P><STRONG><a name="[3dc]"></a>llm_le_adv_report_ind</STRONG> (Thumb, 1008 bytes, Stack size unknown bytes, llm.o(.text.llm_le_adv_report_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = llm_le_adv_report_ind &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_check_evt_mask (via Veneer)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bd_addr_in_ral (via Veneer)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free (via Veneer)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_size (via Veneer)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_bdaddr_compare (via Veneer)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_pdu_defer
</UL>

<P><STRONG><a name="[3c3]"></a>llm_pdu_defer</STRONG> (Thumb, 176 bytes, Stack size unknown bytes, llm_util.o(.text.llm_pdu_defer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llm_pdu_defer &rArr; llm_con_req_tx_cfm &rArr; lld_move_to_master &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_buf_rx_free (via Veneer)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_le_adv_report_ind
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_con_req_tx_cfm
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_con_req_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_check
</UL>

<P><STRONG><a name="[333]"></a>llm_set_adv_en</STRONG> (Thumb, 400 bytes, Stack size unknown bytes, llm.o(.text.llm_set_adv_en))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llm_set_adv_en &rArr; lld_adv_start &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_apply_bd_addr (via Veneer)
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_ral_update (via Veneer)
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_adv_stop (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_bdaddr_compare (via Veneer)
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_adv_start
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_en_cmd_handler
</UL>

<P><STRONG><a name="[334]"></a>llm_set_adv_param</STRONG> (Thumb, 460 bytes, Stack size unknown bytes, llm.o(.text.llm_set_adv_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = llm_set_adv_param &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_check_map_validity (via Veneer)
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_check_address_validity (via Veneer)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_param_cmd_handler
</UL>

<P><STRONG><a name="[329]"></a>llm_set_privacy_mode</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, llm.o(.text.llm_set_privacy_mode))
<BR><BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bd_addr_in_ral (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enh_privacy_mgmt_cmd_handler
</UL>

<P><STRONG><a name="[336]"></a>llm_set_scan_en</STRONG> (Thumb, 200 bytes, Stack size unknown bytes, llm.o(.text.llm_set_scan_en))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llm_set_scan_en &rArr; lld_scan_start &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_apply_bd_addr (via Veneer)
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_ral_update (via Veneer)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_flush_list (via Veneer)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_scan_stop (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_bdaddr_compare (via Veneer)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_scan_start
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_en_cmd_handler
</UL>

<P><STRONG><a name="[339]"></a>llm_test_mode_start_rx</STRONG> (Thumb, 236 bytes, Stack size unknown bytes, llm.o(.text.llm_test_mode_start_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = llm_test_mode_start_rx &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_test_mode_rx (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_test_mode_mngt_cmd_handler
</UL>

<P><STRONG><a name="[338]"></a>llm_test_mode_start_tx</STRONG> (Thumb, 712 bytes, Stack size unknown bytes, llm.o(.text.llm_test_mode_start_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = llm_test_mode_start_tx &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_test_mode_tx (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_test_mode_mngt_cmd_handler
</UL>

<P><STRONG><a name="[3b9]"></a>llm_util_adv_data_update</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, llm_util.o(.text.llm_util_adv_data_update))
<BR><BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_scan_rsp_data (via Veneer)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_adv_data (via Veneer)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule
</UL>

<P><STRONG><a name="[3e1]"></a>rwble_init</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, rwble.o(.text.rwble_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = rwble_init &rArr; llm_init &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_init
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_init
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_buf_init
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
</UL>

<P><STRONG><a name="[3e2]"></a>rwble_reset</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, rwble.o(.text.rwble_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = rwble_reset &rArr; llm_init &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_core_reset (via Veneer)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_init
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_init
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_buf_init
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_reset
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_reset
</UL>

<P><STRONG><a name="[19c]"></a>rwip_init</STRONG> (Thumb, 152 bytes, Stack size unknown bytes, nxp.o(.text.rwip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = rwip_init &rArr; rwble_init &rArr; llm_init &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init (via Veneer)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_init (via Veneer)
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init (via Veneer)
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_init (via Veneer)
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_platform_reset_complete (via Veneer)
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_init (via Veneer)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_init
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_init
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_init
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
</UL>

<P><STRONG><a name="[3cf]"></a>rwip_lpcycles_2_us</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, nxp.o(.text.rwip_lpcycles_2_us))
<BR><BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_wakeup
</UL>

<P><STRONG><a name="[33c]"></a>rwip_reset</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, nxp.o(.text.rwip_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = rwip_reset &rArr; rwble_reset &rArr; llm_init &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_flush (via Veneer)
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset (via Veneer)
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_init (via Veneer)
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_reset
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset_cmd_handler
</UL>

<P><STRONG><a name="[197]"></a>rwip_wakeup</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, nxp.o(.text.rwip_wakeup))
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_set (via Veneer)
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_start
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler
</UL>

<P><STRONG><a name="[6a]"></a>smCallback</STRONG> (Thumb, 892 bytes, Stack size unknown bytes, gap_sm_cb.o(.text.smCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = smCallback &rArr; DevDb_SignalDevicePairedAndBonded &rArr; App_NvmWrite &rArr; NvSaveOnIdle &rArr; __NvSaveOnIdle &rArr; NvAddSaveRequestToQueue &rArr; NvProcessFirstSaveInQueue &rArr;  NvAddSaveRequestToQueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_SetRandomAddress
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_DenyLongTermKey
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_ProvideLongTermKey
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_PostSmCheckResult
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_SignalDevicePaired
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_SignalDevicePairedAndBonded
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_SaveKeys
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertPairingParamsSm2Gap
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_autoConnectIrkCheckComplete
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sendLocalPasskey
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerGenericCallback
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerConnectionCallback
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap.o(.text.InternalBle_Initialize)
</UL>
<P><STRONG><a name="[1cb]"></a>specialModP256</STRONG> (Thumb, 2018 bytes, Stack size unknown bytes, ecc_p256.o(.text.specialModP256))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = specialModP256 &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractFromSelfBigHexSign256
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigHexInversion256
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GF_Jacobian_Point_Addition256
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GF_Jacobian_Point_Double256
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiplyBigHexModP256
</UL>

<P><STRONG><a name="[3d9]"></a>sw_aes</STRONG> (Thumb, 524 bytes, Stack size unknown bytes, aes.o(.text.sw_aes))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = sw_aes &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_encryption_start
</UL>

<P><STRONG><a name="[414]"></a>ADC_GetBandgapCalibrationResult</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, fsl_adc.o(i.ADC_GetBandgapCalibrationResult))
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitAdc
</UL>

<P><STRONG><a name="[412]"></a>ADC_GetDefaultConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fsl_adc.o(i.ADC_GetDefaultConfig))
<BR><BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Drv_Init
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitAdc
</UL>

<P><STRONG><a name="[413]"></a>ADC_GetSdDefaultConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fsl_adc.o(i.ADC_GetSdDefaultConfig))
<BR><BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Drv_Init
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitAdc
</UL>

<P><STRONG><a name="[3f1]"></a>ADC_GetVinnCalibrationResult</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fsl_adc.o(i.ADC_GetVinnCalibrationResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ADC_GetVinnCalibrationResult &rArr; ADC_GetChannelConversionResult &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetChannelConversionResult
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitAdc
</UL>

<P><STRONG><a name="[3f2]"></a>ADC_Init</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, fsl_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = ADC_Init &rArr; ADC_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Drv_Init
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitAdc
</UL>

<P><STRONG><a name="[3f4]"></a>ADC_SetSdConfig</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, fsl_adc.o(i.ADC_SetSdConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADC_SetSdConfig &rArr; ADC_GetClockIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetClockIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Drv_Init
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitAdc
</UL>

<P><STRONG><a name="[2b1]"></a>AES_128_CMAC</STRONG> (Thumb, 240 bytes, Stack size 128 bytes, seclib.o(i.AES_128_CMAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = AES_128_CMAC &rArr; AES_128_CMAC_Generate_Subkey &rArr; AES_128_Encrypt &rArr; sw_Aes128 &rArr; AES_InverseMixColumn
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_128_Encrypt
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecLib_Xor128
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecLib_Padding
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_128_CMAC_Generate_Subkey
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_SmpG2
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_SmpF6
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_SmpF5
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_SmpF4
</UL>

<P><STRONG><a name="[2ad]"></a>AES_128_CMAC_LsbFirstInput</STRONG> (Thumb, 268 bytes, Stack size 144 bytes, seclib.o(i.AES_128_CMAC_LsbFirstInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = AES_128_CMAC_LsbFirstInput &rArr; AES_128_CMAC_Generate_Subkey &rArr; AES_128_Encrypt &rArr; sw_Aes128 &rArr; AES_InverseMixColumn
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_128_Encrypt
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecLib_Xor128
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecLib_Padding
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_128_CMAC_Generate_Subkey
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpyReverseOrder
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_ComputeDataSignature
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_SmpF5
</UL>

<P><STRONG><a name="[148]"></a>AES_128_Encrypt</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, seclib.o(i.AES_128_Encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = AES_128_Encrypt &rArr; sw_Aes128 &rArr; AES_InverseMixColumn
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_Aes128
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_128_CMAC_LsbFirstInput
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_128_CMAC
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_128_CMAC_Generate_Subkey
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_AES128_CCM
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_aes128_encrypt
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_AES128
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_SmpAh
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_SmpC1
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_SmpS1
</UL>

<P><STRONG><a name="[1b3]"></a>App_NvmRead</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, applmain.o(i.App_NvmRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = App_NvmRead
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_GetBondedDeviceSignCounter
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_GetBondedDeviceCsrk
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_LoadBondingInformation
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_Init
</UL>

<P><STRONG><a name="[1bb]"></a>App_NvmWrite</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, applmain.o(i.App_NvmWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = App_NvmWrite &rArr; NvSaveOnIdle &rArr; __NvSaveOnIdle &rArr; NvAddSaveRequestToQueue &rArr; NvProcessFirstSaveInQueue &rArr;  NvAddSaveRequestToQueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvSaveOnIdle
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvMoveToRam
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_SignalDevicePairedAndBonded
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_SetPeerSignCounter
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_SaveCccd
</UL>

<P><STRONG><a name="[403]"></a>App_PostCallbackMessage</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, applmain.o(i.App_PostCallbackMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = App_PostCallbackMessage &rArr; MEM_BufferAllocWithId &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddTailMsg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_task_post
</UL>

<P><STRONG><a name="[404]"></a>App_RegisterGattServerCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, applmain.o(i.App_RegisterGattServerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = App_RegisterGattServerCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattServer_RegisterCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_Config
</UL>

<P><STRONG><a name="[405]"></a>App_StartAdvertising</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, applmain.o(i.App_StartAdvertising))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = App_StartAdvertising &rArr; Gap_StartAdvertising &rArr; MEM_BufferAllocWithId &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_StartAdvertising
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_GenericCallback
</UL>

<P><STRONG><a name="[18f]"></a>BLE_Semaphore_Give</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ble_controller_task.o(i.BLE_Semaphore_Give))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
</UL>

<P><STRONG><a name="[407]"></a>BOARD_BootClockRUN</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, clock_config.o(i.BOARD_BootClockRUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BOARD_BootClockRUN &rArr; CLOCK_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetClkDiv
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootClocks
</UL>

<P><STRONG><a name="[40a]"></a>BOARD_GetMCUUid</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, board.o(i.BOARD_GetMCUUid))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BOARD_GetMCUUid &rArr; RNG_GetRandomNo &rArr; SecLib_get_random &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put (via Veneer)
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get (via Veneer)
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GetRandomNo
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleConnManager_MCUInfoToSmpKeys
</UL>

<P><STRONG><a name="[40e]"></a>BOARD_GetUsartClock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board.o(i.BOARD_GetUsartClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BOARD_GetUsartClock &rArr; CLOCK_GetFreq &rArr; CLOCK_GetWdtFreq &rArr; CLOCK_GetApbClkFreq &rArr; CLOCK_GetAhbClkFreq &rArr; CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Initialize
</UL>

<P><STRONG><a name="[410]"></a>BOARD_InitAdc</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, board.o(i.BOARD_InitAdc))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = BOARD_InitAdc &rArr; ADC_Init &rArr; ADC_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_EnableADC
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetSdConfig
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetVinnCalibrationResult
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetSdDefaultConfig
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetDefaultConfig
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetBandgapCalibrationResult
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_Init
</UL>

<P><STRONG><a name="[415]"></a>BOARD_InitBootClocks</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, clock_config.o(i.BOARD_InitBootClocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BOARD_InitBootClocks &rArr; BOARD_BootClockRUN &rArr; CLOCK_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[416]"></a>BOARD_InitButtons</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, pin_mux.o(i.BOARD_InitButtons))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = BOARD_InitButtons &rArr; IOCON_PinMuxSet &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_PinMuxSet
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBD_Init
</UL>

<P><STRONG><a name="[418]"></a>BOARD_InitLEDs</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, pin_mux.o(i.BOARD_InitLEDs))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = BOARD_InitLEDs &rArr; IOCON_PinMuxSet &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_PinMuxSet
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[530]"></a>BOARD_InitPins</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pin_mux.o(i.BOARD_InitPins))
<BR><BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[3fe]"></a>BleApp_GenericCallback</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mijia_profile_server.o(i.BleApp_GenericCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 828 + Unknown Stack Size
<LI>Call Chain = BleApp_GenericCallback &rArr; BleApp_Config &rArr; mible_server_miservice_init &rArr; Log_Printf &rArr; Serial_AsyncWrite &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleConnManager_GenericEvent
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartAdvertising
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_HandleHostMessageInput
</UL>

<P><STRONG><a name="[400]"></a>BleApp_HandleKeys</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, mijia_profile_server.o(i.BleApp_HandleKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = BleApp_HandleKeys &rArr; BleApp_Start &rArr; Log_Hexdump &rArr; Serial_PrintHex &rArr; Serial_SyncWrite &rArr; Serial_AsyncWrite &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_Disconnect
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_KeyboardCallBack
</UL>

<P><STRONG><a name="[426]"></a>BleApp_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mijia_profile_server.o(i.BleApp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = BleApp_Init &rArr; Serial_InitInterface &rArr; USART_Initialize &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_SetBaudRate
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_InitInterface
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Init
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Printf
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitAdc
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_record_create
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[425]"></a>BleApp_Start</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mijia_profile_server.o(i.BleApp_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = BleApp_Start &rArr; Log_Hexdump &rArr; Serial_PrintHex &rArr; Serial_SyncWrite &rArr; Serial_AsyncWrite &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Printf
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Hexdump
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mibeacon_Advertise
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_gap_address_get
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_HandleKeys
</UL>

<P><STRONG><a name="[42f]"></a>BleConnManager_GapPeripheralConfig</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_conn_manager.o(i.BleConnManager_GapPeripheralConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = BleConnManager_GapPeripheralConfig &rArr; BleConnManager_GapCommonConfig &rArr; Gap_ReadPublicDeviceAddress &rArr; MEM_BufferAllocWithId &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_SetAdvertisingData
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleConnManager_GapCommonConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_gap_adv_data_set
</UL>

<P><STRONG><a name="[420]"></a>BleConnManager_GapPeripheralEvent</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ble_conn_manager.o(i.BleConnManager_GapPeripheralEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = BleConnManager_GapPeripheralEvent &rArr; Gap_RejectPairing &rArr; MEM_BufferAllocWithId &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_RejectPairing
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_EnableUpdateConnectionParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_ConnectionCallback
</UL>

<P><STRONG><a name="[424]"></a>BleConnManager_GenericEvent</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ble_conn_manager.o(i.BleConnManager_GenericEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = BleConnManager_GenericEvent &rArr; BleConnManager_MCUInfoToSmpKeys &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;panic
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleConnManager_MCUInfoToSmpKeys
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_GenericCallback
</UL>

<P><STRONG><a name="[432]"></a>Ble_HostTaskInit</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ble_host_tasks.o(i.Ble_HostTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Ble_HostTaskInit &rArr; OSA_TaskCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;panic
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_TaskCreate
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventCreate
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Initialize
</UL>

<P><STRONG><a name="[435]"></a>Ble_Initialize</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ble_init.o(i.Ble_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Ble_Initialize &rArr; Ble_HostInitialize &rArr; InternalBle_Initialize &rArr; DevDb_Init &rArr; App_NvmRead
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_HostInitialize
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_TaskInit
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_HostTaskInit
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[43f]"></a>CALIB_CalibMainBangap</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fsl_calibration.o(i.CALIB_CalibMainBangap))
<BR><BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIB_SystemCalib
</UL>

<P><STRONG><a name="[43c]"></a>CALIB_SystemCalib</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, fsl_calibration.o(i.CALIB_SystemCalib))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CALIB_SystemCalib &rArr; CALIB_CalibOSC32M &rArr; POWER_WritePmuCtrl1
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetClkDiv
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIB_CalibMainBangap
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIB_PowerOn
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIB_CalibXTAL
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIB_CalibRCO32K
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIB_CalibRC
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIB_CalibOSC32M
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[408]"></a>CLOCK_AttachClk</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_AttachClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_AttachClk
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkXTALConfig
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkWdtConfig
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkSysConfig
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkBleConfig
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk32KConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIB_SystemCalib
</UL>

<P><STRONG><a name="[3f3]"></a>CLOCK_EnableClock</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGlobalIRQ
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableGlobalIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
</UL>

<P><STRONG><a name="[40f]"></a>CLOCK_GetFreq</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLOCK_GetFreq &rArr; CLOCK_GetWdtFreq &rArr; CLOCK_GetApbClkFreq &rArr; CLOCK_GetAhbClkFreq &rArr; CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetXinFreq
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetWdtFreq
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetRco32MFreq
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetApbClkFreq
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAhbClkFreq
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_Get32KFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetDefaultConfig
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_GetUsartClock
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackTimer_GetInputFrequency
</UL>

<P><STRONG><a name="[409]"></a>CLOCK_SetClkDiv</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_SetClkDiv))
<BR><BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIB_SystemCalib
</UL>

<P><STRONG><a name="[51]"></a>CTIMER0_DriverIRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_ctimer.o(i.CTIMER0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CTIMER0_DriverIRQHandler &rArr; CTIMER_GenericIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[52]"></a>CTIMER1_DriverIRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_ctimer.o(i.CTIMER1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CTIMER1_DriverIRQHandler &rArr; CTIMER_GenericIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[53]"></a>CTIMER2_DriverIRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_ctimer.o(i.CTIMER2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CTIMER2_DriverIRQHandler &rArr; CTIMER_GenericIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>CTIMER3_DriverIRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_ctimer.o(i.CTIMER3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CTIMER3_DriverIRQHandler &rArr; CTIMER_GenericIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[44e]"></a>CTIMER_GenericIRQHandler</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, fsl_ctimer.o(i.CTIMER_GenericIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CTIMER_GenericIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER3_DriverIRQHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER2_DriverIRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER1_DriverIRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER0_DriverIRQHandler
</UL>

<P><STRONG><a name="[436]"></a>Controller_TaskInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ble_controller_task.o(i.Controller_TaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Controller_TaskInit &rArr; OSA_TaskCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;panic
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_TaskCreate
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Initialize
</UL>

<P><STRONG><a name="[457]"></a>DbgConsole_Printf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, fsl_debug_console.o(i.DbgConsole_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[a8]"></a>DbgConsole_Putchar</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fsl_debug_console.o(i.DbgConsole_Putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DbgConsole_Putchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(i.DbgConsole_Printf)
</UL>
<P><STRONG><a name="[2c9]"></a>ECDH_P256_ComputeDhKey</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, seclib.o(i.ECDH_P256_ComputeDhKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = ECDH_P256_ComputeDhKey &rArr; Ecdh_ComputeDhKey &rArr; EcP256_PointMult &rArr; EcP256_FieldInv &rArr; Bi_Add
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferFree
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecdh_ComputeDhKey
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForInitiatorPublicKey
</UL>

<P><STRONG><a name="[2d9]"></a>ECDH_P256_GenerateKeys</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, seclib.o(i.ECDH_P256_GenerateKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferFree
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecdh_GenerateNewKeys
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_GenerateEcdhKeyPairAndOobRAndOobCr
</UL>

<P><STRONG><a name="[45d]"></a>FLASH_Erase</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, fsl_flash.o(i.FLASH_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FLASH_Erase &rArr; FLASH_PageErase &rArr; FLASH_BusyStatusCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_FlashEraseSector
</UL>

<P><STRONG><a name="[45f]"></a>FLASH_GetDefaultConfig</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fsl_flash.o(i.FLASH_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FLASH_GetDefaultConfig &rArr; CLOCK_GetFreq &rArr; CLOCK_GetWdtFreq &rArr; CLOCK_GetApbClkFreq &rArr; CLOCK_GetAhbClkFreq &rArr; CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_Init
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[460]"></a>FLASH_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fsl_flash.o(i.FLASH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBusyStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_Init
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[45e]"></a>FLASH_PageErase</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fsl_flash.o(i.FLASH_PageErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_PageErase &rArr; FLASH_BusyStatusCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_StatusCheck
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BusyStatusCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
</UL>

<P><STRONG><a name="[462]"></a>FLASH_Program</STRONG> (Thumb, 418 bytes, Stack size 64 bytes, fsl_flash.o(i.FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FLASH_Program &rArr; FLASH_BusyStatusCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_StatusCheck
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BusyStatusCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_FlashProgramAdaptation
</UL>

<P><STRONG><a name="[49]"></a>FLEXCOMM0_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_flexcomm.o(i.FLEXCOMM0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = FLEXCOMM0_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[4a]"></a>FLEXCOMM1_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_flexcomm.o(i.FLEXCOMM1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = FLEXCOMM1_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[4b]"></a>FLEXCOMM2_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_flexcomm.o(i.FLEXCOMM2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = FLEXCOMM2_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[4c]"></a>FLEXCOMM3_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_flexcomm.o(i.FLEXCOMM3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = FLEXCOMM3_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[463]"></a>FLEXCOMM_GetInstance</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fsl_flexcomm.o(i.FLEXCOMM_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = FLEXCOMM_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
</UL>

<P><STRONG><a name="[464]"></a>FLEXCOMM_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fsl_flexcomm.o(i.FLEXCOMM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = FLEXCOMM_Init &rArr; FLEXCOMM_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_SetPeriph
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[465]"></a>FLEXCOMM_SetPeriph</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fsl_flexcomm.o(i.FLEXCOMM_SetPeriph))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLEXCOMM_SetPeriph &rArr; FLEXCOMM_PeripheralIsPresent
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_PeripheralIsPresent
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
</UL>

<P><STRONG><a name="[149]"></a>FLib_MemCmp</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, functionlib.o(i.FLib_MemCmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLib_MemCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_AES128_CCM
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_CallTbStateMachine
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForMrand
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScPkEInitiatorNoncei
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScOobDataAndInitiatorNonce
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScKeyConfirmAndInitiatorDhKeyCheck
</UL>

<P><STRONG><a name="[140]"></a>FLib_MemCpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, functionlib.o(i.FLib_MemCpy))
<BR><BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_FlashProgramUnaligned
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_FlashProgramAdaptation
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_ConnectionCallback
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleConnManager_GenericEvent
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvmMoveToRam
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeLegacyTable
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvUpdateLastMetaInfoAddress
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvIsRecordCopied
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvIsRamTableUpdated
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvInternalDefragmentedCopy
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvInternalCopy
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvInitStorageSystem
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvGetTableEntry
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvGetMetaInfo
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvGetFlashTableSize
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_SetPseudoRandomNoSeed
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GetRandomNo
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_GetMCUUid
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_SendPacketToController
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_HciRecv
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NvmWrite
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NvmRead
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GenericCallback
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GattServerCallback
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ConnectionCallback
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_TaskHandler
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleConnManager_MCUInfoToSmpKeys
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_AES128_CCM
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_HashUpdate
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_HashFinish
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattServer_SendInstantValueNotification
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattServer_SendInstantValueIndication
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_SetAdvertisingParameters
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_gap_address_get
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_aes128_encrypt
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_LeScSetPeerOobData
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_EnableControllerPrivacy
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_EnableHostPrivacy
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_SetRandomAddress
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_RemoveDeviceFromWhiteList
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_AddDeviceToWhiteList
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_ProvideLongTermKey
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_SendSmpKeys
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_SetAdvertisingData
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_SetAdvertisingParameters
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLeCbMsgHandler
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCommandCompleteCbMsgHandler
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_SendSingleAdvertisement
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_SendAclDataWithSegmentation
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeRemoveDeviceFromWhiteList
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeAddDeviceToWhiteList
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeCreateConnection
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeSetScanResponseData
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeSetRandomAddress
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeSetAdvertisingParameters
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeSetAdvertisingData
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_RecvFragmentOfPacket
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_HandleRecvLeCbData
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_SendAclData
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_HandleSendData
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_GetBondedDeviceCsrk
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_MarkDeviceAsBonded
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_LoadBondingInformation
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_SignalDevicePaired
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_SaveKeys
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_notifyConnectedDevice
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_AddConnection
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_AutoConnectWithPra
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_Connect
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_verifyPraAtAppRequest
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smCallback
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciGenericCallback
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCommandStatusCallback
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCommandCompleteCallback
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLeCallback
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_GetBondedDeviceIrk
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_autoConnectCheckNextIrk
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_handleSignedWriteCommand
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSendInstantNotificationIndication
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_RunStateMachine
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_HciEventCallback
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_CreateA0
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifySignature
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_checkNextIrk
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HciEventCallback
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_RecvDataCallback
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_CallTbStateMachine
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_CallLlStateMachine
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpKeyDistEncryptionInformation
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpKeyDistSigningInformation
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpKeyDistIdentityAddressInformation
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpKeyDistIdentityInformation
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpKeyDistMasterIdentification
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpKeyDistSigningInformation
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpKeyDistIdentityAddressInformation
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpKeyDistIdentityInformation
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpKeyDistMasterIdentification
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpKeyDistEncryptionInformation
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpPairingPublicKey
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpPairingPublicKey
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpPairingConfirm
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpPairingConfirm
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpPairingRandom
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpPairingRandom
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpPairingDHKeyCheck
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpPairingDHKeyCheck
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_SmpF5
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForPairingResponseParams
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForTKeyAndMconfirm
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForMasterStkEncryption
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForInitiatorKeysDist
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForInitiatorPublicKey
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScPkEPasskeyAndInitiatorCri
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScOobDataAndInitiatorNonce
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_GenerateLeScPkERi
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_Idle
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_BuildAndSendPairingCompleteEvent
</UL>

<P><STRONG><a name="[14a]"></a>FLib_MemCpyReverseOrder</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, functionlib.o(i.FLib_MemCpyReverseOrder))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_128_CMAC_LsbFirstInput
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_AES128_CCM
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_HashFinish
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_AES128
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_ComputeDataSignature
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_SmpAh
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_SmpC1
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_SmpS1
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_SmpG2
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_SmpF6
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_SmpF5
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_SmpF4
</UL>

<P><STRONG><a name="[141]"></a>FLib_MemSet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, functionlib.o(i.FLib_MemSet))
<BR><BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Init
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvInternalDefragmentedCopy
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_AES128_CCM
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_HashFinish
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_gatts_service_init
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeSetScanResponseData
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeSetAdvertisingData
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_Init
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_NotifyConnection
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_DisconnectChannel
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_InitRm
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_ReleaseConnection
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_Init
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deriveSmPairingParamsFromGapParams.isra.1
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_Init
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_RunStateMachine
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_CreateA0
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_SmpC1
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForPairingResponseParams
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForMasterStkEncryption
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForInitiatorPublicKey
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_GeneratePairingFailedPacketAndEvent
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_BuildAndSendPairingCompleteEvent
</UL>

<P><STRONG><a name="[13]"></a>GPIOA_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, board.o(i.GPIOA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIOA_IRQHandler &rArr; Gpio_CommonIsr
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_CommonIsr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[46d]"></a>GPIO_PinInit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, fsl_gpio.o(i.GPIO_PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioOutputPinInit
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInputPinInit
</UL>

<P><STRONG><a name="[1e1]"></a>GattDb_GetIndexOfHandle</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, gatt_database.o(i.GattDb_GetIndexOfHandle))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_WriteAttribute
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_FindCharValueHandleInService
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_FindCccdHandleForCharValueHandle
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_FindServiceHandle
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttSignedWriteCommand
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttWriteCommand
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttPrepareNotificationIndication
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttRead
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttReadBlob
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttReadMultiple
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttWrite
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_handleSignedWriteCommand
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientWriteRequest
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateAttWriteParams
</UL>

<P><STRONG><a name="[24c]"></a>GattDb_Init</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, gatt_database.o(i.GattDb_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalBle_Initialize
</UL>

<P><STRONG><a name="[467]"></a>GetFlashTableVersion</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nv_flash.o(i.GetFlashTableVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = GetFlashTableVersion &rArr; InitNVMConfig &rArr; UpgradeLegacyTable &rArr; NV_FlashProgram &rArr; NV_FlashProgramAdaptation &rArr; FLASH_Program &rArr; FLASH_BusyStatusCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNVMConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvModuleInit
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvCopyPage
</UL>

<P><STRONG><a name="[4fb]"></a>GpioClearPinIntFlag</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gpio_adapter.o(i.GpioClearPinIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GpioClearPinIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_CheckIRQ
</UL>

<P><STRONG><a name="[487]"></a>GpioClearPinOutput</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gpio_adapter.o(i.GpioClearPinOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GpioClearPinOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GpioSet
</UL>

<P><STRONG><a name="[46a]"></a>GpioInputPinInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, gpio_adapter.o(i.GpioInputPinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = GpioInputPinInit &rArr; GpioSetPinPullMode &rArr; IOCON_PullSet &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetPinPullMode
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetPinMux
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetPinInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbGpioInit
</UL>

<P><STRONG><a name="[46f]"></a>GpioInstallIsr</STRONG> (Thumb, 392 bytes, Stack size 56 bytes, gpio_adapter.o(i.GpioInstallIsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = GpioInstallIsr &rArr; Gpio_InstallPortISR &rArr; OSA_InstallIntHandler &rArr; InstallIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_InstallPortISR
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptEnable
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBD_Init
</UL>

<P><STRONG><a name="[4fa]"></a>GpioIsPinIntPending</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gpio_adapter.o(i.GpioIsPinIntPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GpioIsPinIntPending
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_CheckIRQ
</UL>

<P><STRONG><a name="[472]"></a>GpioOutputPinInit</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, gpio_adapter.o(i.GpioOutputPinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = GpioOutputPinInit &rArr; GpioSetPinMux &rArr; IOCON_FuncSet &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetPinMux
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetDriveStrength
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[474]"></a>GpioReadPinInput</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gpio_adapter.o(i.GpioReadPinInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GpioReadPinInput
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadPinInput
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBD_KeyCheck
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBD_KeySwitchPortGet
</UL>

<P><STRONG><a name="[473]"></a>GpioSetDriveStrength</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gpio_adapter.o(i.GpioSetDriveStrength))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = GpioSetDriveStrength &rArr; IOCON_DriveSet &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_DriveSet
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioOutputPinInit
</UL>

<P><STRONG><a name="[477]"></a>GpioSetInterruptType</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, gpio_adapter.o(i.GpioSetInterruptType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GpioSetInterruptType
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetPinInterrupt
</UL>

<P><STRONG><a name="[46e]"></a>GpioSetPinInterrupt</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gpio_adapter.o(i.GpioSetPinInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GpioSetPinInterrupt &rArr; GpioSetInterruptType
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetInterruptType
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInputPinInit
</UL>

<P><STRONG><a name="[46c]"></a>GpioSetPinMux</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gpio_adapter.o(i.GpioSetPinMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = GpioSetPinMux &rArr; IOCON_FuncSet &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_FuncSet
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioOutputPinInit
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInputPinInit
</UL>

<P><STRONG><a name="[486]"></a>GpioSetPinOutput</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gpio_adapter.o(i.GpioSetPinOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GpioSetPinOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GpioSet
</UL>

<P><STRONG><a name="[46b]"></a>GpioSetPinPullMode</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gpio_adapter.o(i.GpioSetPinPullMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = GpioSetPinPullMode &rArr; IOCON_PullSet &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_PullSet
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInputPinInit
</UL>

<P><STRONG><a name="[488]"></a>GpioTogglePinOutput</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gpio_adapter.o(i.GpioTogglePinOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GpioTogglePinOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GpioSet
</UL>

<P><STRONG><a name="[a9]"></a>Gpio_CommonIsr</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, gpio_adapter.o(i.Gpio_CommonIsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Gpio_CommonIsr
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_adapter.o(i.Gpio_InstallPortISR)
</UL>
<P><STRONG><a name="[4d3]"></a>InstallIRQHandler</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, fsl_common.o(i.InstallIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = InstallIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InstallIntHandler
</UL>

<P><STRONG><a name="[47f]"></a>KBD_Init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, keyboard.o(i.KBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = KBD_Init &rArr; KbGpioInit &rArr; GpioInputPinInit &rArr; GpioSetPinPullMode &rArr; IOCON_PullSet &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInstallIsr
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_AllocateTimer
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbGpioInit
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitButtons
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[489]"></a>LED_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, led.o(i.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = LED_Init &rArr; GpioOutputPinInit &rArr; GpioSetPinMux &rArr; IOCON_FuncSet &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioOutputPinInit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_AllocateTimer
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitLEDs
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[422]"></a>LED_Operate</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, led.o(i.LED_Operate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LED_Operate &rArr; LED_GpioSet &rArr; GpioTogglePinOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GpioSet
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_ConnectionCallback
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_TurnOnLed
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_TurnOffLed
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ToggleLed
</UL>

<P><STRONG><a name="[48a]"></a>LED_SetLed</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, led.o(i.LED_SetLed))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LED_SetLed &rArr; LED_StartBlip &rArr; LED_StartFlashWithPeriod &rArr; TMR_StartIntervalTimer &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_StartFlashWithPeriod
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_TurnOnLed
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_TurnOffLed
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ToggleLed
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_StopSerialFlash
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_StopFlash
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_StartBlip
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_StopFlashingAllLeds
</UL>

<P><STRONG><a name="[48c]"></a>LED_StartBlip</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, led.o(i.LED_StartBlip))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LED_StartBlip &rArr; LED_StartFlashWithPeriod &rArr; TMR_StartIntervalTimer &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_StartFlashWithPeriod
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SetLed
</UL>

<P><STRONG><a name="[41b]"></a>LED_StartFlashWithPeriod</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, led.o(i.LED_StartFlashWithPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LED_StartFlashWithPeriod &rArr; TMR_StartIntervalTimer &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_IsTimerActive
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StartIntervalTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_AdvertisingCallback
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_StartBlip
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SetLed
</UL>

<P><STRONG><a name="[48d]"></a>LED_StopFlash</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, led.o(i.LED_StopFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LED_StopFlash &rArr; LED_TurnOffLed &rArr; LED_Operate &rArr; LED_GpioSet &rArr; GpioTogglePinOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_TurnOffLed
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StopTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SetLed
</UL>

<P><STRONG><a name="[41a]"></a>LED_StopFlashingAllLeds</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, led.o(i.LED_StopFlashingAllLeds))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LED_StopFlashingAllLeds &rArr; LED_SetLed &rArr; LED_StartBlip &rArr; LED_StartFlashWithPeriod &rArr; TMR_StartIntervalTimer &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SetLed
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_ConnectionCallback
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_AdvertisingCallback
</UL>

<P><STRONG><a name="[48b]"></a>LED_StopSerialFlash</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, led.o(i.LED_StopSerialFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LED_StopSerialFlash &rArr; LED_TurnOffAllLeds &rArr; LED_TurnOffLed &rArr; LED_Operate &rArr; LED_GpioSet &rArr; GpioTogglePinOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_TurnOffAllLeds
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StopTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SetLed
</UL>

<P><STRONG><a name="[484]"></a>LED_ToggleLed</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(i.LED_ToggleLed))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LED_ToggleLed &rArr; LED_Operate &rArr; LED_GpioSet &rArr; GpioTogglePinOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Operate
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SetLed
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_FlashTimeout
</UL>

<P><STRONG><a name="[491]"></a>LED_TurnOffAllLeds</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, led.o(i.LED_TurnOffAllLeds))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LED_TurnOffAllLeds &rArr; LED_TurnOffLed &rArr; LED_Operate &rArr; LED_GpioSet &rArr; GpioTogglePinOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_TurnOffLed
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_StopSerialFlash
</UL>

<P><STRONG><a name="[48f]"></a>LED_TurnOffLed</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(i.LED_TurnOffLed))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LED_TurnOffLed &rArr; LED_Operate &rArr; LED_GpioSet &rArr; GpioTogglePinOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Operate
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_TurnOffAllLeds
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_StopFlash
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SetLed
</UL>

<P><STRONG><a name="[48e]"></a>LED_TurnOnLed</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(i.LED_TurnOnLed))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LED_TurnOnLed &rArr; LED_Operate &rArr; LED_GpioSet &rArr; GpioTogglePinOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Operate
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SetLed
</UL>

<P><STRONG><a name="[492]"></a>ListAddHead</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, genericlist.o(i.ListAddHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ListAddHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptEnable
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddHeadMsg
</UL>

<P><STRONG><a name="[261]"></a>ListAddHeadMsg</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, messaging.o(i.ListAddHeadMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ListAddHeadMsg &rArr; ListAddHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddHead
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_PostSmCheckResult
</UL>

<P><STRONG><a name="[493]"></a>ListAddTail</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, genericlist.o(i.ListAddTail))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptEnable
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddTailMsg
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferFree
</UL>

<P><STRONG><a name="[1d2]"></a>ListAddTailMsg</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, messaging.o(i.ListAddTailMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ListAddTailMsg &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddTail
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattServer_SendAttributeWrittenStatus
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_Disconnect
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_StartAdvertising
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PostCallbackMessage
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GenericCallback
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GattServerCallback
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ConnectionCallback
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_AdvertisingCallback
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_SetAdvertisingData
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_RejectPairing
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_ReadPublicDeviceAddress
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_LeSetPhy
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_EnableUpdateConnectionParameters
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattServer_SendInstantValueNotification
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattServer_SendInstantValueIndication
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_UpdateConnectionParameters
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_SetAdvertisingParameters
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciGenericCallback
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCommandStatusCallback
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCommandCompleteCallback
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLeCallback
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacyTimeout
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_TimerCallback
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_HciEventCallback
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HciEventCallback
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_RecvDataCallback
</UL>

<P><STRONG><a name="[434]"></a>ListInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, genericlist.o(i.ListInit))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_Init
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_HostTaskInit
</UL>

<P><STRONG><a name="[494]"></a>ListRemoveHead</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, genericlist.o(i.ListRemoveHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptEnable
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListRemoveHeadMsg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
</UL>

<P><STRONG><a name="[245]"></a>ListRemoveHeadMsg</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, messaging.o(i.ListRemoveHeadMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ListRemoveHeadMsg &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListRemoveHead
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Thread
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_TaskHandler
</UL>

<P><STRONG><a name="[42d]"></a>Log_Hexdump</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, qn908x_api.o(i.Log_Hexdump))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = Log_Hexdump &rArr; Serial_PrintHex &rArr; Serial_SyncWrite &rArr; Serial_AsyncWrite &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PrintHex
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_info_init
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mibeacon_Set_AdvData
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_Start
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_server_gatts_evt_write
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibeacon_timer_handler
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_bonding_handler
</UL>

<P><STRONG><a name="[42b]"></a>Log_Printf</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, qn908x_api.o(i.Log_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Log_Printf &rArr; Serial_AsyncWrite &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferFree
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_AsyncWrite
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_service_data_set
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_miservice_init
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_info_init
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_service_init_cmp
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_disconnected
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_connected
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_bonding_evt_callback
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mibeacon_Set_AdvData
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_Start
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_Init
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mibeacon_Advertise
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_server_record_write_cmp
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_server_gatts_evt_write
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_server_gap_evt_disconnected
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_server_gap_evt_connected
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_server_arch_service_init_complete
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_manu_data_set
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibeacon_timer_handler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_wait_t2_ack_handler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_wait_t1_handler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_wait_login_ack_handler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_wait_did_handler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_wait_cloud_ack_handler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_timeout_handler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_start_handler
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_login_succ_handler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_init_handler
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_bonding_handler
</UL>

<P><STRONG><a name="[19f]"></a>MEM_BufferAllocWithId</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, memmanager.o(i.MEM_BufferAllocWithId))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MEM_BufferAllocWithId &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptEnable
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptDisable
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListRemoveHead
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Printf
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattServer_SendAttributeWrittenStatus
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_Disconnect
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvmMoveToRam
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDH_P256_ComputeDhKey
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_SendPacketToController
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_HciRecv
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_StartAdvertising
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PostCallbackMessage
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GenericCallback
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GattServerCallback
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ConnectionCallback
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_AdvertisingCallback
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_SetAdvertisingData
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_RejectPairing
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_ReadPublicDeviceAddress
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_LeSetPhy
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_EnableUpdateConnectionParameters
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDH_P256_GenerateKeys
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattServer_SendInstantValueNotification
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattServer_SendInstantValueIndication
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_UpdateConnectionParameters
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_SetAdvertisingParameters
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGattServer_SendAttributeReadStatus
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_PostSmCheckResult
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_SendAclDataWithSegmentation
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_RecvFragmentOfPacket
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_HandleRecvLeCbData
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_SendAclData
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_HandleSendData
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciGenericCallback
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCommandStatusCallback
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCommandCompleteCallback
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLeCallback
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacyTimeout
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSendInstantNotificationIndication
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSendNotificationIndication
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientFindInformationRequest
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientFindByTypeValueRequest
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientReadByTypeRequest
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientReadRequest
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientReadBlobRequest
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientReadMultipleRequest
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientReadByGroupTypeRequest
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_TimerCallback
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_HciEventCallback
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HciEventCallback
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_RecvDataCallback
</UL>

<P><STRONG><a name="[1a0]"></a>MEM_BufferFree</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, memmanager.o(i.MEM_BufferFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptEnable
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptDisable
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddTail
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Printf
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvWriteRecord
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDH_P256_ComputeDhKey
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_HciRecv
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Thread
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_TaskHandler
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDH_P256_GenerateKeys
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGattServer_SendAttributeReadStatus
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_MsgHandler
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLeCbMsgHandler
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci2Host_MsgHandler
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_SendAclDataWithSegmentation
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_RecvFragmentOfPacket
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_HandleSendLeCbData
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_SendLeCbData
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_HandleRecvLeCbData
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_DisconnectChannel
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_SendAclData
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_HandleSendData
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLeCallback
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSendInstantNotificationIndication
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSendNotificationIndication
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientFindInformationRequest
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientFindByTypeValueRequest
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientReadByTypeRequest
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientReadRequest
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientReadBlobRequest
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientReadMultipleRequest
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientReadByGroupTypeRequest
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HciEventCallback
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_RecvDataCallback
</UL>

<P><STRONG><a name="[498]"></a>MEM_Init</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, memmanager.o(i.MEM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MEM_Init &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListInit
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddTail
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[41f]"></a>Mibeacon_Set_AdvData</STRONG> (Thumb, 186 bytes, Stack size 104 bytes, mijia_profile_server.o(i.Mibeacon_Set_AdvData))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = Mibeacon_Set_AdvData &rArr; mible_service_data_set &rArr; mibeacon_data_set &rArr; aes_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; aes_ecb_encrypt &rArr; mible_aes128_encrypt &rArr; AES_128_Encrypt &rArr; sw_Aes128 &rArr; AES_InverseMixColumn
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_service_data_set
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Printf
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Hexdump
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_gap_adv_data_set
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_gap_address_get
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_Config
</UL>

<P><STRONG><a name="[49e]"></a>NV_FlashEraseSector</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, flash_adapter.o(i.NV_FlashEraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = NV_FlashEraseSector &rArr; FLASH_Erase &rArr; FLASH_PageErase &rArr; FLASH_BusyStatusCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_Flash_WaitForCSEndAndDisableInterrupts
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearStatusFlags
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvIdle
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvEraseVirtualPage
</UL>

<P><STRONG><a name="[4a1]"></a>NV_FlashProgram</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, flash_adapter.o(i.NV_FlashProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = NV_FlashProgram &rArr; NV_FlashProgramAdaptation &rArr; FLASH_Program &rArr; FLASH_BusyStatusCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_FlashProgramAdaptation
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeLegacyTable
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvWriteRecord
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvSaveRamTable
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvInternalDefragmentedCopy
</UL>

<P><STRONG><a name="[4a3]"></a>NV_FlashProgramUnaligned</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, flash_adapter.o(i.NV_FlashProgramUnaligned))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = NV_FlashProgramUnaligned &rArr; NV_FlashProgramAdaptation &rArr; FLASH_Program &rArr; FLASH_BusyStatusCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_FlashProgramAdaptation
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvWriteRecord
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvInternalCopy
</UL>

<P><STRONG><a name="[4a4]"></a>NV_FlashVerifyErase</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, flash_adapter.o(i.NV_FlashVerifyErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = NV_FlashVerifyErase &rArr; SwFlashVerifyErase
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwFlashVerifyErase
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_Flash_WaitForCSEndAndDisableInterrupts
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvIdle
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvVirtualPageBlankCheck
</UL>

<P><STRONG><a name="[4ac]"></a>NV_Flash_ClearCriticalSection</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flash_adapter.o(i.NV_Flash_ClearCriticalSection))
<BR><BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvClearCriticalSection
</UL>

<P><STRONG><a name="[47b]"></a>NV_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, flash_adapter.o(i.NV_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NV_Init &rArr; FLASH_GetDefaultConfig &rArr; CLOCK_GetFreq &rArr; CLOCK_GetWdtFreq &rArr; CLOCK_GetApbClkFreq &rArr; CLOCK_GetAhbClkFreq &rArr; CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetDefaultConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNVMConfig
</UL>

<P><STRONG><a name="[199]"></a>NXP_InitBleCfg</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, controller_config.o(i.NXP_InitBleCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = NXP_InitBleCfg &rArr; RNG_Init &rArr; RNG_Drv_Init &rArr; ADC_Init &rArr; ADC_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Init
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_HwGetRandomNo
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
</UL>

<P><STRONG><a name="[4ab]"></a>NvClearCriticalSection</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nv_flash.o(i.NvClearCriticalSection))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NvClearCriticalSection &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_Flash_ClearCriticalSection
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptEnable
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_TxNotify
</UL>

<P><STRONG><a name="[3ff]"></a>NvIdle</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nv_flash.o(i.NvIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = NvIdle &rArr; __NvIdle &rArr; __NvTimerTick &rArr; NvAddSaveRequestToQueue &rArr; NvProcessFirstSaveInQueue &rArr;  NvAddSaveRequestToQueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_TaskGetId
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexUnlock
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexLock
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Idle_Task
</UL>

<P><STRONG><a name="[4b3]"></a>NvIsRecordErased</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, nv_flash.o(i.NvIsRecordErased))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NvIsRecordErased &rArr; NvGetMetaInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvGetMetaInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvCopyPage
</UL>

<P><STRONG><a name="[4c3]"></a>NvModuleInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nv_flash.o(i.NvModuleInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = NvModuleInit &rArr; __NvModuleInit &rArr; NvCopyPage &rArr; NvInternalCopy &rArr; NV_FlashProgramUnaligned &rArr; NV_FlashProgramAdaptation &rArr; FLASH_Program &rArr; FLASH_BusyStatusCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexCreate
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvModuleInit
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[401]"></a>NvMoveToRam</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nv_flash.o(i.NvMoveToRam))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = NvMoveToRam &rArr; __NvmMoveToRam &rArr; MEM_BufferAllocWithId &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexUnlock
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexLock
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvmMoveToRam
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NvmWrite
</UL>

<P><STRONG><a name="[402]"></a>NvSaveOnIdle</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nv_flash.o(i.NvSaveOnIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = NvSaveOnIdle &rArr; __NvSaveOnIdle &rArr; NvAddSaveRequestToQueue &rArr; NvProcessFirstSaveInQueue &rArr;  NvAddSaveRequestToQueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexUnlock
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexLock
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvSaveOnIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NvmWrite
</UL>

<P><STRONG><a name="[4cf]"></a>OSA_DisableIRQGlobal</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fsl_os_abstraction_bm.o(i.OSA_DisableIRQGlobal))
<BR><BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexUnlock
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexLock
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptDisable
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventWait
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
</UL>

<P><STRONG><a name="[4d0]"></a>OSA_EnableIRQGlobal</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fsl_os_abstraction_bm.o(i.OSA_EnableIRQGlobal))
<BR><BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexUnlock
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexLock
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptEnable
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventWait
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
</UL>

<P><STRONG><a name="[433]"></a>OSA_EventCreate</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_os_abstraction_bm.o(i.OSA_EventCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OSA_EventCreate &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptEnable
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptDisable
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osObjectAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Init
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_TaskInit
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_HostTaskInit
</UL>

<P><STRONG><a name="[1d3]"></a>OSA_EventSet</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, fsl_os_abstraction_bm.o(i.OSA_EventSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EnableIRQGlobal
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_DisableIRQGlobal
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osObjectIsAllocated
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattServer_SendAttributeWrittenStatus
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_Disconnect
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackTimer_ISR
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_TxNotify
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_RxNotify
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_WriteInternal
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_EnableTimer
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_SendPacketToController
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_StartAdvertising
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PostCallbackMessage
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GenericCallback
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GattServerCallback
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ConnectionCallback
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_AdvertisingCallback
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Semaphore_Give
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_SetAdvertisingData
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_RejectPairing
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_ReadPublicDeviceAddress
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_LeSetPhy
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_EnableUpdateConnectionParameters
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattServer_SendInstantValueNotification
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattServer_SendInstantValueIndication
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_UpdateConnectionParameters
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_SetAdvertisingParameters
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_PostSmCheckResult
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciGenericCallback
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCommandStatusCallback
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCommandCompleteCallback
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLeCallback
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacyTimeout
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_TimerCallback
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_HciEventCallback
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HciEventCallback
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_RecvDataCallback
</UL>

<P><STRONG><a name="[1a6]"></a>OSA_EventWait</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, fsl_os_abstraction_bm.o(i.OSA_EventWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OSA_EventWait &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_TaskGetId
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EnableIRQGlobal
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_DisableIRQGlobal
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osObjectIsAllocated
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManagerTask
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Task
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Thread
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_TaskHandler
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_TaskHandler
</UL>

<P><STRONG><a name="[4d1]"></a>OSA_Init</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, fsl_os_abstraction_bm.o(i.OSA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = OSA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47a]"></a>OSA_InstallIntHandler</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, fsl_os_abstraction_bm.o(i.OSA_InstallIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OSA_InstallIntHandler &rArr; InstallIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InstallIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_InstallPortISR
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Initialize
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackTimer_Init
</UL>

<P><STRONG><a name="[1a8]"></a>OSA_InterruptDisable</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, fsl_os_abstraction_bm.o(i.OSA_InterruptDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = OSA_InterruptDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_DisableIRQGlobal
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInstallIsr
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_Flash_WaitForCSEndAndDisableInterrupts
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_InitInterface
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexCreate
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventCreate
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvmMoveToRam
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvCopyPage
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddHead
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListRemoveHead
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddTail
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferFree
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StopTimer
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_AsyncWrite
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_TxNotify
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManagerTask
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_WriteInternal
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_TxQueueMaintenance
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvClearCriticalSection
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Task
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_EnableTimer
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_TaskHandler
</UL>

<P><STRONG><a name="[1a9]"></a>OSA_InterruptEnable</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, fsl_os_abstraction_bm.o(i.OSA_InterruptEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EnableIRQGlobal
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInstallIsr
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_FlashVerifyErase
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_FlashEraseSector
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_FlashProgramAdaptation
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_InitInterface
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexCreate
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventCreate
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvmMoveToRam
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvCopyPage
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddHead
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListRemoveHead
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddTail
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferFree
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StopTimer
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_AsyncWrite
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_TxNotify
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManagerTask
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_WriteInternal
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_TxQueueMaintenance
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvClearCriticalSection
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Task
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_EnableTimer
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_TaskHandler
</UL>

<P><STRONG><a name="[4c5]"></a>OSA_MutexCreate</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fsl_os_abstraction_bm.o(i.OSA_MutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OSA_MutexCreate &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptEnable
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptDisable
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osObjectAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvModuleInit
</UL>

<P><STRONG><a name="[4bd]"></a>OSA_MutexLock</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fsl_os_abstraction_bm.o(i.OSA_MutexLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OSA_MutexLock &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EnableIRQGlobal
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_DisableIRQGlobal
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osObjectIsAllocated
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvSaveOnIdle
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvMoveToRam
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvIdle
</UL>

<P><STRONG><a name="[4bf]"></a>OSA_MutexUnlock</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fsl_os_abstraction_bm.o(i.OSA_MutexUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OSA_MutexUnlock &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EnableIRQGlobal
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_DisableIRQGlobal
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osObjectIsAllocated
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvSaveOnIdle
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvMoveToRam
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvIdle
</UL>

<P><STRONG><a name="[532]"></a>OSA_Start</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, fsl_os_abstraction_bm.o(i.OSA_Start))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3fb]"></a>OSA_TaskCreate</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, fsl_os_abstraction_bm.o(i.OSA_TaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OSA_TaskCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InsertTaskBefore
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Init
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIdle_TaskInit
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_TaskInit
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_HostTaskInit
</UL>

<P><STRONG><a name="[4bc]"></a>OSA_TaskGetId</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_os_abstraction_bm.o(i.OSA_TaskGetId))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventWait
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvIdle
</UL>

<P><STRONG><a name="[531]"></a>OSA_TimeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fsl_os_abstraction_bm.o(i.OSA_TimeInit))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d5]"></a>POWER_DisablePD</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, fsl_power.o(i.POWER_DisablePD))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = POWER_DisablePD &rArr; POWER_WritePmuCtrl1
</UL>
<BR>[Calls]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGlobalIRQ
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableGlobalIRQ
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_WritePmuCtrl1
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_EnableADC
</UL>

<P><STRONG><a name="[411]"></a>POWER_EnableADC</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, fsl_power.o(i.POWER_EnableADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = POWER_EnableADC &rArr; POWER_EnablePD &rArr; POWER_WritePmuCtrl1
</UL>
<BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_EnablePD
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_DisablePD
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Init
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_HwGetRandomNo
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitAdc
</UL>

<P><STRONG><a name="[4d9]"></a>POWER_EnableDCDC</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_power.o(i.POWER_EnableDCDC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = POWER_EnableDCDC &rArr; POWER_WritePmuCtrl1
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_WritePmuCtrl1
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[4d8]"></a>POWER_EnablePD</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fsl_power.o(i.POWER_EnablePD))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = POWER_EnablePD &rArr; POWER_WritePmuCtrl1
</UL>
<BR>[Calls]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGlobalIRQ
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableGlobalIRQ
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_WritePmuCtrl1
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_EnableADC
</UL>

<P><STRONG><a name="[439]"></a>POWER_WritePmuCtrl1</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fsl_power.o(i.POWER_WritePmuCtrl1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = POWER_WritePmuCtrl1
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_EnableDCDC
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_EnablePD
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_DisablePD
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIB_CalibXTAL
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIB_CalibRCO32K
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIB_CalibOSC32M
</UL>

<P><STRONG><a name="[52d]"></a>RF_ConfigRxMode</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fsl_rf.o(i.RF_ConfigRxMode))
<BR><BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[4da]"></a>RNG_Drv_Init</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, fsl_rng.o(i.RNG_Drv_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = RNG_Drv_Init &rArr; ADC_Init &rArr; ADC_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetSdConfig
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetSdDefaultConfig
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetDefaultConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Init
</UL>

<P><STRONG><a name="[136]"></a>RNG_GetPseudoRandomNo</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, rng.o(i.RNG_GetPseudoRandomNo))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Hash
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecdh_GenerateNewKeys
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_CallTbStateMachine
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForTKeyAndMconfirm
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForInitiatorPublicKey
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScPkEPasskeyAndInitiatorCri
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScOobDataAndInitiatorNonce
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_GenerateEcdhKeyPairAndOobRAndOobCr
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_GeneratePasskey
</UL>

<P><STRONG><a name="[4dc]"></a>RNG_GetRandomData</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, fsl_rng.o(i.RNG_GetRandomData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RNG_GetRandomData
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Init
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_HwGetRandomNo
</UL>

<P><STRONG><a name="[40c]"></a>RNG_GetRandomNo</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rng.o(i.RNG_GetRandomNo))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RNG_GetRandomNo &rArr; SecLib_get_random &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecLib_get_random
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRandomRange
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_SetPseudoRandomNoSeed
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_GetMCUUid
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_rand_num_generator
</UL>

<P><STRONG><a name="[4a7]"></a>RNG_HwGetRandomNo</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rng.o(i.RNG_HwGetRandomNo))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RNG_HwGetRandomNo &rArr; POWER_EnableADC &rArr; POWER_EnablePD &rArr; POWER_WritePmuCtrl1
</UL>
<BR>[Calls]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GetRandomData
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Enable
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_EnableADC
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NXP_InitBleCfg
</UL>

<P><STRONG><a name="[4a6]"></a>RNG_Init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rng.o(i.RNG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = RNG_Init &rArr; RNG_Drv_Init &rArr; ADC_Init &rArr; ADC_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecLib_set_rng_seed
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GetRandomData
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Drv_Init
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Enable
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_EnableADC
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NXP_InitBleCfg
</UL>

<P><STRONG><a name="[4de]"></a>RNG_SetPseudoRandomNoSeed</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, rng.o(i.RNG_SetPseudoRandomNoSeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RNG_SetPseudoRandomNoSeed &rArr; RNG_GetRandomNo &rArr; SecLib_get_random &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GetRandomNo
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[4f0]"></a>RTC_ClearStatusFlags</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_rtc.o(i.RTC_ClearStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackTimer_ClearIntFlag
</UL>

<P><STRONG><a name="[4f6]"></a>RTC_EnableInterrupts</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, fsl_rtc.o(i.RTC_EnableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackTimer_Init
</UL>

<P><STRONG><a name="[10]"></a>RTC_FR_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, board.o(i.RTC_FR_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC_FR_IRQHandler &rArr; StackTimer_ISR &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackTimer_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(RESET)
</UL>
<P><STRONG><a name="[4f2]"></a>RTC_FreeRunningEnable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fsl_rtc.o(i.RTC_FreeRunningEnable))
<BR><BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackTimer_Enable
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackTimer_Disable
</UL>

<P><STRONG><a name="[4f8]"></a>RTC_SetFreeRunningInterruptThreshold</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_rtc.o(i.RTC_SetFreeRunningInterruptThreshold))
<BR><BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackTimer_SetOffsetTicks
</UL>

<P><STRONG><a name="[431]"></a>SHA256_Hash</STRONG> (Thumb, 38 bytes, Stack size 120 bytes, seclib.o(i.SHA256_Hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Init
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_HashUpdate
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_HashFinish
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GetPseudoRandomNo
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleConnManager_MCUInfoToSmpKeys
</UL>

<P><STRONG><a name="[4e1]"></a>SHA256_HashFinish</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, seclib.o(i.SHA256_HashFinish))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SHA256_HashFinish &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemSet
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_hash_n
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpyReverseOrder
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Hash
</UL>

<P><STRONG><a name="[4e0]"></a>SHA256_HashUpdate</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, seclib.o(i.SHA256_HashUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_hash_n
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Hash
</UL>

<P><STRONG><a name="[4df]"></a>SHA256_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, seclib.o(i.SHA256_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SHA256_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_sha256_initialize_output
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Hash
</UL>

<P><STRONG><a name="[533]"></a>SecLib_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, seclib.o(i.SecLib_Init))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[147]"></a>SecLib_XorN</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, seclib.o(i.SecLib_XorN))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SecLib_XorN
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_AES128_CCM
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_SmpC1
</UL>

<P><STRONG><a name="[129]"></a>SerialManagerTask</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, serialmanager.o(i.SerialManagerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SerialManagerTask &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptEnable
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptDisable
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventWait
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_WriteInternal
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_TxQueueMaintenance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialmanager.o(.data)
</UL>
<P><STRONG><a name="[427]"></a>SerialManager_Init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, serialmanager.o(i.SerialManager_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SerialManager_Init &rArr; OSA_TaskCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;panic
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_TaskCreate
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventCreate
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_Init
</UL>

<P><STRONG><a name="[4e6]"></a>SerialManager_RxNotify</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, serialmanager.o(i.SerialManager_RxNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SerialManager_RxNotify &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartRxCb
</UL>

<P><STRONG><a name="[4e7]"></a>SerialManager_TxNotify</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, serialmanager.o(i.SerialManager_TxNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SerialManager_TxNotify &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptEnable
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptDisable
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_WriteInternal
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvClearCriticalSection
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartTxCb
</UL>

<P><STRONG><a name="[497]"></a>Serial_AsyncWrite</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, serialmanager.o(i.Serial_AsyncWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Serial_AsyncWrite &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptEnable
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptDisable
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_WriteInternal
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_TxQueueMaintenance
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Printf
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_SyncWrite
</UL>

<P><STRONG><a name="[428]"></a>Serial_InitInterface</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, serialmanager.o(i.Serial_InitInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = Serial_InitInterface &rArr; USART_Initialize &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptEnable
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptDisable
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InstallTxCalback
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InstallRxCalback
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_Init
</UL>

<P><STRONG><a name="[495]"></a>Serial_PrintHex</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, serialmanager.o(i.Serial_PrintHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Serial_PrintHex &rArr; Serial_SyncWrite &rArr; Serial_AsyncWrite &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_SyncWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Hexdump
</UL>

<P><STRONG><a name="[429]"></a>Serial_SetBaudRate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, serialmanager.o(i.Serial_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = Serial_SetBaudRate &rArr; USART_SetBaudrate &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_Init
</UL>

<P><STRONG><a name="[4eb]"></a>Serial_SyncWrite</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, serialmanager.o(i.Serial_SyncWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Serial_SyncWrite &rArr; Serial_AsyncWrite &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IsTxActive
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_AsyncWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PrintHex
</UL>

<P><STRONG><a name="[4ef]"></a>StackTimer_ClearIntFlag</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tmr_adapter.o(i.StackTimer_ClearIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StackTimer_ClearIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackTimer_ISR
</UL>

<P><STRONG><a name="[4f1]"></a>StackTimer_Disable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tmr_adapter.o(i.StackTimer_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StackTimer_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_FreeRunningEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StopTimer
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Task
</UL>

<P><STRONG><a name="[4f3]"></a>StackTimer_Enable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tmr_adapter.o(i.StackTimer_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StackTimer_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_FreeRunningEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Task
</UL>

<P><STRONG><a name="[503]"></a>StackTimer_GetCounterValue</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tmr_adapter.o(i.StackTimer_GetCounterValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StackTimer_GetCounterValue
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Task
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StartTimer
</UL>

<P><STRONG><a name="[4f4]"></a>StackTimer_GetInputFrequency</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tmr_adapter.o(i.StackTimer_GetInputFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = StackTimer_GetInputFrequency &rArr; CLOCK_GetFreq &rArr; CLOCK_GetWdtFreq &rArr; CLOCK_GetApbClkFreq &rArr; CLOCK_GetAhbClkFreq &rArr; CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_NotifyClkChanged
</UL>

<P><STRONG><a name="[af]"></a>StackTimer_ISR</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timersmanager.o(i.StackTimer_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = StackTimer_ISR &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackTimer_ClearIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_FR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timersmanager.o(i.TMR_Init)
</UL>
<P><STRONG><a name="[4f5]"></a>StackTimer_Init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, tmr_adapter.o(i.StackTimer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = StackTimer_Init &rArr; OSA_InstallIntHandler &rArr; InstallIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InstallIntHandler
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Init
</UL>

<P><STRONG><a name="[4f7]"></a>StackTimer_SetOffsetTicks</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tmr_adapter.o(i.StackTimer_SetOffsetTicks))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StackTimer_SetOffsetTicks
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetFreeRunningInterruptThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Task
</UL>

<P><STRONG><a name="[aa]"></a>Switch_Press_ISR</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, keyboard.o(i.Switch_Press_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Switch_Press_ISR &rArr; TMR_StartIntervalTimer &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StartIntervalTimer
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_CheckIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(i.KBD_Init)
</UL>
<P><STRONG><a name="[36]"></a>SystemInit</STRONG> (Thumb, 222 bytes, Stack size 0 bytes, system_qn908xc.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908xc.o(.text)
</UL>
<P><STRONG><a name="[18b]"></a>TMR_AllocateTimer</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, timersmanager.o(i.TMR_AllocateTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR_AllocateTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SetTimerStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBD_Init
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_timer_create
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_StartAdvertising
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_ConnectLePsm
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_NotifyConnection
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHostPrivacyTimer
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleSmDeviceGlobalMessages.isra.8
</UL>

<P><STRONG><a name="[4fd]"></a>TMR_EnableTimer</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, timersmanager.o(i.TMR_EnableTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TMR_EnableTimer &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptEnable
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptDisable
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SetTimerStatus
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_GetTimerType
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_GetTimerStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StartTimer
</UL>

<P><STRONG><a name="[18d]"></a>TMR_FreeTimer</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, timersmanager.o(i.TMR_FreeTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TMR_FreeTimer &rArr; TMR_StopTimer &rArr; StackTimer_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StopTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_StopAdvertising
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_DisconnectChannel
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_NotifyDisconnection
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHostPrivacyTimer
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldmTimeout
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerConnectionCallback
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleSmDeviceGlobalMessages.isra.8
</UL>

<P><STRONG><a name="[50f]"></a>TMR_GetTimestamp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timersmanager.o(i.TMR_GetTimestamp))
<BR><BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvIdle
</UL>

<P><STRONG><a name="[500]"></a>TMR_Init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, timersmanager.o(i.TMR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TMR_Init &rArr; TMR_NotifyClkChanged &rArr; StackTimer_GetInputFrequency &rArr; CLOCK_GetFreq &rArr; CLOCK_GetWdtFreq &rArr; CLOCK_GetApbClkFreq &rArr; CLOCK_GetAhbClkFreq &rArr; CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;panic
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_TaskCreate
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventCreate
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackTimer_Init
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_NotifyClkChanged
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timersmanager.o(i.TMR_Init)
</UL>
<P><STRONG><a name="[1c4]"></a>TMR_IsTimerActive</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timersmanager.o(i.TMR_IsTimerActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR_IsTimerActive
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_GetTimerStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_StartFlashWithPeriod
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_ResponseReceived
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHostPrivacyTimer
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleLeCbConnectionResponse
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_CallLlStateMachine
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleSmDeviceGlobalMessages.isra.8
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_SmpIdleStateCleanup
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_Idle
</UL>

<P><STRONG><a name="[1c6]"></a>TMR_IsTimerReady</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timersmanager.o(i.TMR_IsTimerReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR_IsTimerReady
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_GetTimerStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHostPrivacyTimer
</UL>

<P><STRONG><a name="[501]"></a>TMR_NotifyClkChanged</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timersmanager.o(i.TMR_NotifyClkChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TMR_NotifyClkChanged &rArr; StackTimer_GetInputFrequency &rArr; CLOCK_GetFreq &rArr; CLOCK_GetWdtFreq &rArr; CLOCK_GetApbClkFreq &rArr; CLOCK_GetAhbClkFreq &rArr; CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackTimer_GetInputFrequency
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmrTicksFromMilliseconds
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Init
</UL>

<P><STRONG><a name="[490]"></a>TMR_StartIntervalTimer</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, timersmanager.o(i.TMR_StartIntervalTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TMR_StartIntervalTimer &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_StartFlashWithPeriod
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_Press_ISR
</UL>

<P><STRONG><a name="[1c2]"></a>TMR_StartLowPowerTimer</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, timersmanager.o(i.TMR_StartLowPowerTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TMR_StartLowPowerTimer &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_timer_start
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHostPrivacyTimer
</UL>

<P><STRONG><a name="[26c]"></a>TMR_StartSingleShotTimer</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, timersmanager.o(i.TMR_StartSingleShotTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TMR_StartSingleShotTimer &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_StartAdvertising
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_ConnectLePsm
</UL>

<P><STRONG><a name="[2b7]"></a>TMR_StartTimer</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, timersmanager.o(i.TMR_StartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StopTimer
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackTimer_GetCounterValue
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmrTicksFromMilliseconds
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_EnableTimer
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SetTimerType
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StartIntervalTimer
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StartSingleShotTimer
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StartLowPowerTimer
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_SendData
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_Idle
</UL>

<P><STRONG><a name="[1c5]"></a>TMR_StopTimer</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, timersmanager.o(i.TMR_StopTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMR_StopTimer &rArr; StackTimer_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptEnable
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptDisable
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackTimer_Disable
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SetTimerStatus
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_GetTimerType
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_GetTimerStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_StopSerialFlash
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_StopFlash
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_DecrementBlip
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_FreeTimer
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Task
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StartTimer
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_timer_stop
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_StopAdvertising
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_ResponseReceived
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHostPrivacyTimer
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_HandleLeCbConnectionResponse
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerConnectionCallback
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_CallLlStateMachine
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleSmDeviceGlobalMessages.isra.8
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_SmpIdleStateCleanup
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_Idle
</UL>

<P><STRONG><a name="[12a]"></a>TMR_Task</STRONG> (Thumb, 500 bytes, Stack size 48 bytes, timersmanager.o(i.TMR_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TMR_Task &rArr; OSA_EventWait &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptEnable
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptDisable
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventWait
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StopTimer
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackTimer_SetOffsetTicks
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackTimer_GetCounterValue
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackTimer_Enable
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackTimer_Disable
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SetTimerStatus
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_GetTimerType
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_GetTimerStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timersmanager.o(.data)
</UL>
<P><STRONG><a name="[502]"></a>TmrTicksFromMilliseconds</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, timersmanager.o(i.TmrTicksFromMilliseconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StartTimer
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_NotifyClkChanged
</UL>

<P><STRONG><a name="[505]"></a>USART_GetDefaultConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_usart.o(i.USART_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = USART_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Initialize
</UL>

<P><STRONG><a name="[509]"></a>USART_Init</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, fsl_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudRate
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Initialize
</UL>

<P><STRONG><a name="[4e8]"></a>USART_Initialize</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, uart_adapter.o(i.USART_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = USART_Initialize &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InstallIntHandler
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_GetUsartClock
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetDefaultConfig
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_InitInterface
</UL>

<P><STRONG><a name="[4e9]"></a>USART_InstallRxCalback</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uart_adapter.o(i.USART_InstallRxCalback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_InstallRxCalback
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_InitInterface
</UL>

<P><STRONG><a name="[4ea]"></a>USART_InstallTxCalback</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uart_adapter.o(i.USART_InstallTxCalback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_InstallTxCalback
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_InitInterface
</UL>

<P><STRONG><a name="[4ed]"></a>USART_IsTxActive</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uart_adapter.o(i.USART_IsTxActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_IsTxActive
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_SyncWrite
</UL>

<P><STRONG><a name="[4ee]"></a>USART_SendData</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, uart_adapter.o(i.USART_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptEnable
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptDisable
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteByte
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatusFlags
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EnableInterrupts
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_WriteInternal
</UL>

<P><STRONG><a name="[50a]"></a>USART_SetBaudRate</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, fsl_usart.o(i.USART_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[4ec]"></a>USART_SetBaudrate</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, uart_adapter.o(i.USART_SetBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = USART_SetBaudrate &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_GetUsartClock
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_SetBaudRate
</UL>

<P><STRONG><a name="[50c]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[579]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[57a]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[57b]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[496]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Printf
</UL>

<P><STRONG><a name="[51e]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[3f0]"></a>__aeabi_assert</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_common.o(i.__aeabi_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_PullSet
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_FuncSet
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_DriveSet
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_PinMuxSet
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudRate
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetDefaultConfig
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetInstance
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_GetInstance
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_DriverIRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM2_DriverIRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM1_DriverIRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM0_DriverIRQHandler
</UL>

<P><STRONG><a name="[557]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc2.o(i.__free$2region))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_server_gatts_evt_write
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_server_arch_service_init_complete
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_wait_t2_ack_handler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_wait_t1_handler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_wait_login_ack_handler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_wait_did_handler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_wait_cloud_ack_handler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_start_handler
</UL>

<P><STRONG><a name="[452]"></a>__hardfp_modf</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, modf.o(i.__hardfp_modf))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __hardfp_modf &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[454]"></a>__hardfp_pow</STRONG> (Thumb, 3072 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[51c]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[556]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc2.o(i.__malloc$2region))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_miservice_init
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_server_gatts_evt_write
</UL>

<P><STRONG><a name="[516]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[514]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[51a]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[517]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[51b]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[57c]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[57d]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[57e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[515]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[523]"></a>aes_ccm_encrypt_and_tag</STRONG> (Thumb, 52 bytes, Stack size 64 bytes, ccm.o(i.aes_ccm_encrypt_and_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = aes_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; aes_ecb_encrypt &rArr; mible_aes128_encrypt &rArr; AES_128_Encrypt &rArr; sw_Aes128 &rArr; AES_InverseMixColumn
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibeacon_data_set
</UL>

<P><STRONG><a name="[52a]"></a>dequeue</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, queue.o(i.dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dequeue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibeacon_timer_handler
</UL>

<P><STRONG><a name="[519]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[565]"></a>find_empty_timer</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, qn908x_api.o(i.find_empty_timer))
<BR><BR>[Called By]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_timer_create
</UL>

<P><STRONG><a name="[566]"></a>find_exist_timer</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, qn908x_api.o(i.find_exist_timer))
<BR><BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_timer_start
</UL>

<P><STRONG><a name="[52c]"></a>hardware_init</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, board.o(i.hardware_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hardware_init &rArr; FLASH_GetDefaultConfig &rArr; CLOCK_GetFreq &rArr; CLOCK_GetWdtFreq &rArr; CLOCK_GetApbClkFreq &rArr; CLOCK_GetAhbClkFreq &rArr; CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init (via Veneer)
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get (via Veneer)
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ConfigRxMode
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_EnableDCDC
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetDefaultConfig
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIB_SystemCalib
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootClocks
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCON_SetLoadCap
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_os_abstraction_bm.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = main &rArr; hardware_init &rArr; FLASH_GetDefaultConfig &rArr; CLOCK_GetFreq &rArr; CLOCK_GetWdtFreq &rArr; CLOCK_GetApbClkFreq &rArr; CLOCK_GetAhbClkFreq &rArr; CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_TimeInit
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_TaskCreate
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_Start
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_Init
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[128]"></a>main_task</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, applmain.o(i.main_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 876 + Unknown Stack Size
<LI>Call Chain = main_task &rArr; App_Thread &rArr; App_HandleHostMessageInput &rArr; BleApp_GenericCallback &rArr; BleApp_Config &rArr; mible_server_miservice_init &rArr; Log_Printf &rArr; Serial_AsyncWrite &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;panic
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_StartFlashWithPeriod
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_Init
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventCreate
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_SetPseudoRandomNoSeed
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Init
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListInit
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_Init
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBD_Init
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvModuleInit
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Init
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Initialize
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Thread
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIdle_TaskInit
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecLib_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_os_abstraction_bm.o(.data)
</UL>
<P><STRONG><a name="[534]"></a>mibeacon_data_set</STRONG> (Thumb, 394 bytes, Stack size 72 bytes, mible_beacon.o(i.mibeacon_data_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = mibeacon_data_set &rArr; aes_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; aes_ecb_encrypt &rArr; mible_aes128_encrypt &rArr; AES_128_Encrypt &rArr; sw_Aes128 &rArr; AES_InverseMixColumn
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_encode
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_objs_bytes
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_encrypt_and_tag
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_rand_num_generator
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_service_data_set
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_manu_data_set
</UL>

<P><STRONG><a name="[537]"></a>mibeacon_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mible_beacon.o(i.mibeacon_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mibeacon_init &rArr; mible_timer_create &rArr; TMR_AllocateTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_init
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_beacon_key
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_info_init
</UL>

<P><STRONG><a name="[421]"></a>mible_ConnectionCallback</STRONG> (Thumb, 150 bytes, Stack size 64 bytes, qn908x_evt.o(i.mible_ConnectionCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mible_ConnectionCallback &rArr; mible_gap_event_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_gap_event_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_ConnectionCallback
</UL>

<P><STRONG><a name="[562]"></a>mible_FSM_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mible_fsm.o(i.mible_FSM_init))
<BR><BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_server_arch_service_init_complete
</UL>

<P><STRONG><a name="[551]"></a>mible_FSM_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mible_fsm.o(i.mible_FSM_set))
<BR><BR>[Called By]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_server_gap_evt_disconnected
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_server_gap_evt_connected
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_wait_t2_ack_handler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_wait_t1_handler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_wait_login_ack_handler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_wait_did_handler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_wait_cloud_ack_handler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_timeout_handler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_start_handler
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_login_succ_handler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_init_handler
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_bonding_handler
</UL>

<P><STRONG><a name="[563]"></a>mible_FSM_transition</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, mible_fsm.o(i.mible_FSM_transition))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mible_FSM_transition
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_server_gatts_evt_write
</UL>

<P><STRONG><a name="[423]"></a>mible_GattServerCallback</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, qn908x_evt.o(i.mible_GattServerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mible_GattServerCallback &rArr; mible_gatts_event_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_gatts_event_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_GattServerCallback
</UL>

<P><STRONG><a name="[526]"></a>mible_aes128_encrypt</STRONG> (Thumb, 74 bytes, Stack size 56 bytes, qn908x_api.o(i.mible_aes128_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = mible_aes128_encrypt &rArr; AES_128_Encrypt &rArr; sw_Aes128 &rArr; AES_InverseMixColumn
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_128_Encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ecb_encrypt
</UL>

<P><STRONG><a name="[548]"></a>mible_arch_event_callback</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mible_api.o(i.mible_arch_event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mible_arch_event_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_record_write
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_gatts_service_init
</UL>

<P><STRONG><a name="[554]"></a>mible_arch_register</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, mible_api.o(i.mible_arch_register))
<BR><BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_info_init
</UL>

<P><STRONG><a name="[541]"></a>mible_bonding_evt_callback</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, mijia_profile_server.o(i.mible_bonding_evt_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = mible_bonding_evt_callback &rArr; Log_Printf &rArr; Serial_AsyncWrite &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Printf
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_gap_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_timeout_handler
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_login_succ_handler
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_bonding_handler
</UL>

<P><STRONG><a name="[543]"></a>mible_connected</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mijia_profile_server.o(i.mible_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = mible_connected &rArr; Log_Printf &rArr; Serial_AsyncWrite &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_server_gap_evt_connected
</UL>

<P><STRONG><a name="[544]"></a>mible_disconnected</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mijia_profile_server.o(i.mible_disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = mible_disconnected &rArr; Mibeacon_Advertise &rArr; Log_Printf &rArr; Serial_AsyncWrite &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Printf
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mibeacon_Advertise
</UL>
<BR>[Called By]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_server_gap_evt_disconnected
</UL>

<P><STRONG><a name="[42c]"></a>mible_gap_address_get</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, qn908x_api.o(i.mible_gap_address_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mible_gap_address_get
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_info_init
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mibeacon_Set_AdvData
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_Start
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_beacon_key
</UL>

<P><STRONG><a name="[49d]"></a>mible_gap_adv_data_set</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, qn908x_api.o(i.mible_gap_adv_data_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = mible_gap_adv_data_set &rArr; BleConnManager_GapPeripheralConfig &rArr; BleConnManager_GapCommonConfig &rArr; Gap_ReadPublicDeviceAddress &rArr; MEM_BufferAllocWithId &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleConnManager_GapPeripheralConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mibeacon_Set_AdvData
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibeacon_timer_handler
</UL>

<P><STRONG><a name="[499]"></a>mible_gap_adv_start</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, qn908x_api.o(i.mible_gap_adv_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = mible_gap_adv_start &rArr; Gap_SetAdvertisingParameters &rArr; MEM_BufferAllocWithId &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_SetAdvertisingParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mibeacon_Advertise
</UL>

<P><STRONG><a name="[542]"></a>mible_gap_disconnect</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, qn908x_api.o(i.mible_gap_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = mible_gap_disconnect &rArr; Gap_Disconnect &rArr; MEM_BufferAllocWithId &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_Disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_bonding_evt_callback
</UL>

<P><STRONG><a name="[53f]"></a>mible_gap_event_callback</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mible_api.o(i.mible_gap_event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mible_gap_event_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_ConnectionCallback
</UL>

<P><STRONG><a name="[552]"></a>mible_gap_register</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, mible_api.o(i.mible_gap_register))
<BR><BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_info_init
</UL>

<P><STRONG><a name="[545]"></a>mible_gap_update_conn_params</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, qn908x_api.o(i.mible_gap_update_conn_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = mible_gap_update_conn_params &rArr; Gap_UpdateConnectionParameters &rArr; MEM_BufferAllocWithId &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_UpdateConnectionParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_server_gap_evt_connected
</UL>

<P><STRONG><a name="[540]"></a>mible_gatts_event_callback</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mible_api.o(i.mible_gatts_event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mible_gatts_event_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_GattServerCallback
</UL>

<P><STRONG><a name="[546]"></a>mible_gatts_notify_or_indicate</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, qn908x_api.o(i.mible_gatts_notify_or_indicate))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = mible_gatts_notify_or_indicate &rArr; GattServer_SendInstantValueNotification &rArr; MEM_BufferAllocWithId &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_FindCccdHandleForCharValueHandle
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_CheckNotificationStatus
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattServer_SendInstantValueNotification
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattServer_SendInstantValueIndication
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_CheckIndicationStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_wait_t1_handler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_wait_login_ack_handler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_start_handler
</UL>

<P><STRONG><a name="[553]"></a>mible_gatts_register</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, mible_api.o(i.mible_gatts_register))
<BR><BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_info_init
</UL>

<P><STRONG><a name="[547]"></a>mible_gatts_service_init</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, qn908x_api.o(i.mible_gatts_service_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = mible_gatts_service_init &rArr; mible_arch_event_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemSet
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_WriteAttribute
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_FindCharValueHandleInService
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_FindServiceHandle
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_arch_event_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_miservice_init
</UL>

<P><STRONG><a name="[549]"></a>mible_gatts_value_set</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, qn908x_api.o(i.mible_gatts_value_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = mible_gatts_value_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_WriteAttribute
</UL>
<BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_bonding_handler
</UL>

<P><STRONG><a name="[54a]"></a>mible_internal_encrypt</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, mible_crypto.o(i.mible_internal_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mible_internal_encrypt &rArr; crypt
</UL>
<BR>[Calls]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypt_init
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypt
</UL>
<BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_server_encrypt
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_wait_t2_ack_handler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_wait_login_ack_handler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_wait_did_handler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_wait_cloud_ack_handler
</UL>

<P><STRONG><a name="[53e]"></a>mible_manu_data_set</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, mible_beacon.o(i.mible_manu_data_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = mible_manu_data_set &rArr; mibeacon_data_set &rArr; aes_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; aes_ecb_encrypt &rArr; mible_aes128_encrypt &rArr; AES_128_Encrypt &rArr; sw_Aes128 &rArr; AES_InverseMixColumn
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Printf
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibeacon_data_set
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibeacon_timer_handler
</UL>

<P><STRONG><a name="[54b]"></a>mible_mix_1</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, mible_crypto.o(i.mible_mix_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mible_mix_1 &rArr; crypt
</UL>
<BR>[Calls]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypt_init
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypt
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_wait_t1_handler
</UL>

<P><STRONG><a name="[54c]"></a>mible_mix_2</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, mible_crypto.o(i.mible_mix_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mible_mix_2 &rArr; crypt
</UL>
<BR>[Calls]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypt_init
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypt
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_wait_t1_handler
</UL>

<P><STRONG><a name="[536]"></a>mible_rand_num_generator</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, qn908x_api.o(i.mible_rand_num_generator))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mible_rand_num_generator &rArr; RNG_GetRandomNo &rArr; SecLib_get_random &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GetRandomNo
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_info_init
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibeacon_data_set
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_start_handler
</UL>

<P><STRONG><a name="[42a]"></a>mible_record_create</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, qn908x_api.o(i.mible_record_create))
<BR><BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_info_init
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_Init
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_bonding_handler
</UL>

<P><STRONG><a name="[54d]"></a>mible_record_read</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, qn908x_api.o(i.mible_record_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mible_record_read
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_info_init
</UL>

<P><STRONG><a name="[54e]"></a>mible_record_write</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, qn908x_api.o(i.mible_record_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mible_record_write &rArr; mible_arch_event_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put (via Veneer)
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_arch_event_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_info_init
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_bonding_handler
</UL>

<P><STRONG><a name="[41d]"></a>mible_server_info_init</STRONG> (Thumb, 350 bytes, Stack size 72 bytes, mible_server.o(i.mible_server_info_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = mible_server_info_init &rArr; Log_Hexdump &rArr; Serial_PrintHex &rArr; Serial_SyncWrite &rArr; Serial_AsyncWrite &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Printf
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Hexdump
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibeacon_init
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_record_write
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_record_read
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_record_create
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_rand_num_generator
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_gap_address_get
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_gatts_register
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_gap_register
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_arch_register
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_Config
</UL>

<P><STRONG><a name="[41e]"></a>mible_server_miservice_init</STRONG> (Thumb, 586 bytes, Stack size 680 bytes, mible_server.o(i.mible_server_miservice_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 812 + Unknown Stack Size
<LI>Call Chain = mible_server_miservice_init &rArr; Log_Printf &rArr; Serial_AsyncWrite &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Printf
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_gatts_service_init
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_server_encrypt
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_Config
</UL>

<P><STRONG><a name="[49b]"></a>mible_service_data_set</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, mible_beacon.o(i.mible_service_data_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = mible_service_data_set &rArr; mibeacon_data_set &rArr; aes_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; aes_ecb_encrypt &rArr; mible_aes128_encrypt &rArr; AES_128_Encrypt &rArr; sw_Aes128 &rArr; AES_InverseMixColumn
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Printf
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibeacon_data_set
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mibeacon_Set_AdvData
</UL>

<P><STRONG><a name="[559]"></a>mible_service_init_cmp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mijia_profile_server.o(i.mible_service_init_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = mible_service_init_cmp &rArr; Log_Printf &rArr; Serial_AsyncWrite &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_server_arch_service_init_complete
</UL>

<P><STRONG><a name="[b8]"></a>mible_std_arch_event_handler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mible_ll_callback.o(i.mible_std_arch_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = mible_std_arch_event_handler &rArr; mible_std_server_arch_service_init_complete &rArr; mible_server_init_handler &rArr; Log_Printf &rArr; Serial_AsyncWrite &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_server_record_write_cmp
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_server_arch_service_init_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mible_server.o(i.mible_server_info_init)
</UL>
<P><STRONG><a name="[b6]"></a>mible_std_gap_event_handler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mible_ll_callback.o(i.mible_std_gap_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = mible_std_gap_event_handler &rArr; mible_std_server_gap_evt_connected &rArr; mible_timer_start &rArr; TMR_StartLowPowerTimer &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_server_gap_evt_scan_report
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_server_gap_evt_disconnected
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_server_gap_evt_connected
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mible_server.o(i.mible_server_info_init)
</UL>
<P><STRONG><a name="[b7]"></a>mible_std_gatts_event_handler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, mible_ll_callback.o(i.mible_std_gatts_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = mible_std_gatts_event_handler &rArr; mible_std_server_gatts_evt_write &rArr; Log_Hexdump &rArr; Serial_PrintHex &rArr; Serial_SyncWrite &rArr; Serial_AsyncWrite &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_server_gatts_evt_write_permit_req
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_server_gatts_evt_write
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_server_gatts_evt_read_permit_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mible_server.o(i.mible_server_info_init)
</UL>
<P><STRONG><a name="[55a]"></a>mible_std_server_arch_service_init_complete</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, mible_server.o(i.mible_std_server_arch_service_init_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = mible_std_server_arch_service_init_complete &rArr; mible_server_init_handler &rArr; Log_Printf &rArr; Serial_AsyncWrite &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Printf
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_service_init_cmp
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_FSM_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_init_handler
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_arch_event_handler
</UL>

<P><STRONG><a name="[550]"></a>mible_std_server_encrypt</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, mible_server.o(i.mible_std_server_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mible_std_server_encrypt &rArr; mible_internal_encrypt &rArr; crypt
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_internal_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_miservice_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_start_handler
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_bonding_handler
</UL>

<P><STRONG><a name="[55c]"></a>mible_std_server_gap_evt_connected</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, mible_server.o(i.mible_std_server_gap_evt_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = mible_std_server_gap_evt_connected &rArr; mible_timer_start &rArr; TMR_StartLowPowerTimer &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Printf
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_connected
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_FSM_set
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_timer_start
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_gap_update_conn_params
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_gap_event_handler
</UL>

<P><STRONG><a name="[55d]"></a>mible_std_server_gap_evt_disconnected</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mible_server.o(i.mible_std_server_gap_evt_disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = mible_std_server_gap_evt_disconnected &rArr; mible_disconnected &rArr; Mibeacon_Advertise &rArr; Log_Printf &rArr; Serial_AsyncWrite &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Printf
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_disconnected
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_FSM_set
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_gap_event_handler
</UL>

<P><STRONG><a name="[55e]"></a>mible_std_server_gap_evt_scan_report</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mible_server.o(i.mible_std_server_gap_evt_scan_report))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_gap_event_handler
</UL>

<P><STRONG><a name="[560]"></a>mible_std_server_gatts_evt_read_permit_req</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mible_server.o(i.mible_std_server_gatts_evt_read_permit_req))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_gatts_event_handler
</UL>

<P><STRONG><a name="[55f]"></a>mible_std_server_gatts_evt_write</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, mible_server.o(i.mible_std_server_gatts_evt_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = mible_std_server_gatts_evt_write &rArr; Log_Hexdump &rArr; Serial_PrintHex &rArr; Serial_SyncWrite &rArr; Serial_AsyncWrite &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Printf
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Hexdump
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_FSM_transition
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_task_post
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_gatts_event_handler
</UL>

<P><STRONG><a name="[561]"></a>mible_std_server_gatts_evt_write_permit_req</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mible_server.o(i.mible_std_server_gatts_evt_write_permit_req))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_gatts_event_handler
</UL>

<P><STRONG><a name="[55b]"></a>mible_std_server_record_write_cmp</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mible_server.o(i.mible_std_server_record_write_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = mible_std_server_record_write_cmp &rArr; Log_Printf &rArr; Serial_AsyncWrite &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_arch_event_handler
</UL>

<P><STRONG><a name="[564]"></a>mible_task_post</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, qn908x_api.o(i.mible_task_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mible_task_post &rArr; App_PostCallbackMessage &rArr; MEM_BufferAllocWithId &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PostCallbackMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_server_gatts_evt_write
</UL>

<P><STRONG><a name="[53a]"></a>mible_timer_create</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, qn908x_api.o(i.mible_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mible_timer_create &rArr; TMR_AllocateTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_AllocateTimer
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_empty_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibeacon_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_init_handler
</UL>

<P><STRONG><a name="[53c]"></a>mible_timer_start</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, qn908x_api.o(i.mible_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mible_timer_start &rArr; TMR_StartLowPowerTimer &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StartLowPowerTimer
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_exist_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_server_gap_evt_connected
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibeacon_timer_handler
</UL>

<P><STRONG><a name="[53b]"></a>mible_timer_stop</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, qn908x_api.o(i.mible_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mible_timer_stop &rArr; TMR_StopTimer &rArr; StackTimer_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StopTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibeacon_timer_handler
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_login_succ_handler
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_bonding_handler
</UL>

<P><STRONG><a name="[3fc]"></a>panic</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, panic.o(i.panic))
<BR><BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Init
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleConnManager_GenericEvent
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_AdvertisingCallback
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Init
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIdle_TaskInit
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_TaskInit
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_HostTaskInit
</UL>

<P><STRONG><a name="[539]"></a>queue_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, queue.o(i.queue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = queue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibeacon_init
</UL>

<P><STRONG><a name="[538]"></a>set_beacon_key</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mible_beacon.o(i.set_beacon_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_beacon_key &rArr; mible_gap_address_get
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_gap_address_get
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibeacon_init
</UL>

<P><STRONG><a name="[518]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt_full.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[4d2]"></a>task_init</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, fsl_os_abstraction_bm.o(i.task_init))
<BR><BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_Init
</UL>

<P><STRONG><a name="[3e9]"></a>ahi_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init (via Veneer)
</UL>

<P><STRONG><a name="[3d7]"></a>co_bdaddr_compare</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_create_con (via Veneer)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_scan_en (via Veneer)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_adv_en (via Veneer)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_le_adv_report_ind (via Veneer)
</UL>

<P><STRONG><a name="[39f]"></a>co_list_extract</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_canceled (via Veneer)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule (via Veneer)
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_prog (via Veneer)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_delete_elt_handler (via Veneer)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next (via Veneer)
</UL>

<P><STRONG><a name="[3bc]"></a>co_list_find</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next (via Veneer)
</UL>

<P><STRONG><a name="[2ed]"></a>co_list_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_init (via Veneer)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_init (via Veneer)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_buf_init (via Veneer)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_init (via Veneer)
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_prog (via Veneer)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_check (via Veneer)
</UL>

<P><STRONG><a name="[3c2]"></a>co_list_merge</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_prog (via Veneer)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_check (via Veneer)
</UL>

<P><STRONG><a name="[2eb]"></a>co_list_pop_front</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_canceled (via Veneer)
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_init (via Veneer)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_test_mode_start_tx (via Veneer)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_encryption_done (via Veneer)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_end_isr (via Veneer)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_init (via Veneer)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_init (via Veneer)
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_send_packet (via Veneer)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_check (via Veneer)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_deffered_elt_handler (via Veneer)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_multiplication_event_handler (via Veneer)
</UL>

<P><STRONG><a name="[2f3]"></a>co_list_push_back</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_enc_req_handler (via Veneer)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_canceled (via Veneer)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule (via Veneer)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_insert (via Veneer)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enc_cmd_handler (via Veneer)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_le_adv_report_ind (via Veneer)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_rx_isr (via Veneer)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_end_isr (via Veneer)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_buf_init (via Veneer)
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_terminate_ind_pdu_send (via Veneer)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_start_enc_rsp_pdu_send (via Veneer)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_pause_enc_req_pdu_send (via Veneer)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_pause_enc_rsp_pdu_send (via Veneer)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_reject_ind_pdu_send (via Veneer)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_start_enc_req_pdu_send (via Veneer)
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_ping_req_pdu_send (via Veneer)
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_length_req_pdu_send (via Veneer)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_con_param_req_pdu_send (via Veneer)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_con_update_pdu_send (via Veneer)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_ch_map_update_pdu_send (via Veneer)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_phy_req_pdu_send (via Veneer)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_phy_upd_ind_pdu_send (via Veneer)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_rx_handler (via Veneer)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_restart (via Veneer)
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_prog (via Veneer)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_check (via Veneer)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_deferred_elt_push (via Veneer)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_multiplication_event_handler (via Veneer)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tl_send (via Veneer)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_con_param_rsp_pdu_send (via Veneer)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_req_handler (via Veneer)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_length_rsp_handler (via Veneer)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_ping_req_handler (via Veneer)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send (via Veneer)
</UL>

<P><STRONG><a name="[3c7]"></a>co_list_size</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_le_adv_report_ind (via Veneer)
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_prog (via Veneer)
</UL>

<P><STRONG><a name="[3e8]"></a>dbg_platform_reset_complete</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init (via Veneer)
</UL>

<P><STRONG><a name="[396]"></a>ea_elt_create</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_slave_update (via Veneer)
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_slave (via Veneer)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_update_create (via Veneer)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_scan_create (via Veneer)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_adv_create (via Veneer)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_start (via Veneer)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_update_after_param_req (via Veneer)
</UL>

<P><STRONG><a name="[3a8]"></a>ea_elt_insert</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_insert (via Veneer)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_end_isr (via Veneer)
</UL>

<P><STRONG><a name="[3a9]"></a>ea_elt_remove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_end_isr (via Veneer)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next (via Veneer)
</UL>

<P><STRONG><a name="[191]"></a>ea_finetimer_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler (via Veneer)
</UL>

<P><STRONG><a name="[3e7]"></a>ea_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_reset (via Veneer)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init (via Veneer)
</UL>

<P><STRONG><a name="[3b0]"></a>ea_interval_create</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_slave (via Veneer)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_master (via Veneer)
</UL>

<P><STRONG><a name="[391]"></a>ea_interval_duration_req</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_slave (via Veneer)
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_param_rsp (via Veneer)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_update_create (via Veneer)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_start (via Veneer)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_scan_start (via Veneer)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_param_req (via Veneer)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_update_after_param_req (via Veneer)
</UL>

<P><STRONG><a name="[3b2]"></a>ea_interval_insert</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_slave (via Veneer)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_master (via Veneer)
</UL>

<P><STRONG><a name="[3ae]"></a>ea_interval_remove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_init (via Veneer)
</UL>

<P><STRONG><a name="[392]"></a>ea_offset_req</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_slave (via Veneer)
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_param_rsp (via Veneer)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_update_create (via Veneer)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_start (via Veneer)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_scan_start (via Veneer)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_param_req (via Veneer)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_update_after_param_req (via Veneer)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_anchor_point_move (via Veneer)
</UL>

<P><STRONG><a name="[194]"></a>ea_sw_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler (via Veneer)
</UL>

<P><STRONG><a name="[399]"></a>ea_time_get_halfslot_rounded</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_master (via Veneer)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_scan_create (via Veneer)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_adv_create (via Veneer)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_start (via Veneer)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next (via Veneer)
</UL>

<P><STRONG><a name="[33e]"></a>em_buf_rx_buff_addr_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tl_send (via Veneer)
</UL>

<P><STRONG><a name="[356]"></a>em_buf_rx_free</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_data_ind_handler (via Veneer)
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_pdu_defer (via Veneer)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_rx_handler (via Veneer)
</UL>

<P><STRONG><a name="[3a3]"></a>em_buf_tx_free</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_check (via Veneer)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_deffered_elt_handler (via Veneer)
</UL>

<P><STRONG><a name="[19d]"></a>enable_ble_sleep</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init (via Veneer)
</UL>

<P><STRONG><a name="[30e]"></a>hci_acl_tx_data_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_rx_done (via Veneer)
</UL>

<P><STRONG><a name="[323]"></a>hci_cmd_reject</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_received (via Veneer)
</UL>

<P><STRONG><a name="[342]"></a>hci_fc_check_host_available_nb_acl_packets</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tl_send (via Veneer)
</UL>

<P><STRONG><a name="[112]"></a>hci_host_buf_size_cmd_handler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata.llm_hci_command_handler_tab)
</UL>
<P><STRONG><a name="[113]"></a>hci_host_nb_cmp_pkts_cmd_handler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata.llm_hci_command_handler_tab)
</UL>
<P><STRONG><a name="[3e6]"></a>hci_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init (via Veneer)
</UL>

<P><STRONG><a name="[ff]"></a>hci_le_create_con_cancel_cmd_handler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata.llm_hci_command_handler_tab)
</UL>
<P><STRONG><a name="[116]"></a>hci_le_enh_privacy_info_cmd_handler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata.llm_hci_command_handler_tab)
</UL>
<P><STRONG><a name="[118]"></a>hci_le_generate_dhkey_cmd_handler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata.llm_hci_command_handler_tab)
</UL>
<P><STRONG><a name="[104]"></a>hci_le_rand_cmd_handler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata.llm_hci_command_handler_tab)
</UL>
<P><STRONG><a name="[f8]"></a>hci_le_rd_adv_ch_tx_pw_cmd_handler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata.llm_hci_command_handler_tab)
</UL>
<P><STRONG><a name="[f4]"></a>hci_le_rd_buff_size_cmd_handler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata.llm_hci_command_handler_tab)
</UL>
<P><STRONG><a name="[117]"></a>hci_le_rd_local_p256_public_key_cmd_handler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata.llm_hci_command_handler_tab)
</UL>
<P><STRONG><a name="[f5]"></a>hci_le_rd_local_supp_feats_cmd_handler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata.llm_hci_command_handler_tab)
</UL>
<P><STRONG><a name="[108]"></a>hci_le_rd_max_data_len_cmd_handler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata.llm_hci_command_handler_tab)
</UL>
<P><STRONG><a name="[106]"></a>hci_le_rd_suggted_dft_data_len_cmd_handler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata.llm_hci_command_handler_tab)
</UL>
<P><STRONG><a name="[105]"></a>hci_le_rd_supp_states_cmd_handler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata.llm_hci_command_handler_tab)
</UL>
<P><STRONG><a name="[101]"></a>hci_le_rd_wl_size_cmd_handler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata.llm_hci_command_handler_tab)
</UL>
<P><STRONG><a name="[119]"></a>hci_le_set_dft_phy_cmd_handler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata.llm_hci_command_handler_tab)
</UL>
<P><STRONG><a name="[8b]"></a>hci_le_set_evt_mask_cmd_handler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 2]<UL><LI> llm_hci.o(.text.hci_command_handler)
<LI> llm_hci.o(.rodata.llm_hci_command_handler_tab)
</UL>
<P><STRONG><a name="[f6]"></a>hci_le_set_rand_add_cmd_handler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata.llm_hci_command_handler_tab)
</UL>
<P><STRONG><a name="[fc]"></a>hci_le_set_scan_param_cmd_handler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata.llm_hci_command_handler_tab)
</UL>
<P><STRONG><a name="[102]"></a>hci_le_wl_mngt_cmd_handler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata.llm_hci_command_handler_tab)
</UL>
<P><STRONG><a name="[107]"></a>hci_le_wr_suggted_dft_data_len_cmd_handler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata.llm_hci_command_handler_tab)
</UL>
<P><STRONG><a name="[321]"></a>hci_look_for_cmd_desc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_get_max_param_size (via Veneer)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_received (via Veneer)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tl_send (via Veneer)
</UL>

<P><STRONG><a name="[341]"></a>hci_look_for_evt_desc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tl_send (via Veneer)
</UL>

<P><STRONG><a name="[33f]"></a>hci_look_for_le_evt_desc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tl_send (via Veneer)
</UL>

<P><STRONG><a name="[10b]"></a>hci_rd_bd_addr_cmd_handler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata.llm_hci_command_handler_tab)
</UL>
<P><STRONG><a name="[114]"></a>hci_rd_buff_size_cmd_handler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata.llm_hci_command_handler_tab)
</UL>
<P><STRONG><a name="[10d]"></a>hci_rd_local_supp_cmds_cmd_handler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata.llm_hci_command_handler_tab)
</UL>
<P><STRONG><a name="[10e]"></a>hci_rd_local_supp_feats_cmd_handler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata.llm_hci_command_handler_tab)
</UL>
<P><STRONG><a name="[3eb]"></a>hci_reset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_reset (via Veneer)
</UL>

<P><STRONG><a name="[10f]"></a>hci_set_ctrl_to_host_flow_ctrl_cmd_handler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata.llm_hci_command_handler_tab)
</UL>
<P><STRONG><a name="[110]"></a>hci_set_evt_mask_cmd_handler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata.llm_hci_command_handler_tab)
</UL>
<P><STRONG><a name="[111]"></a>hci_set_evt_mask_page_2_cmd_handler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata.llm_hci_command_handler_tab)
</UL>
<P><STRONG><a name="[8e]"></a>hci_tx_done</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> hci_tl.o(.text.hci_tl_send)
</UL>
<P><STRONG><a name="[340]"></a>hci_util_pack</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tl_send (via Veneer)
</UL>

<P><STRONG><a name="[324]"></a>hci_util_unpack</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_received (via Veneer)
</UL>

<P><STRONG><a name="[2ee]"></a>ke_event_callback_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_init (via Veneer)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_init (via Veneer)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_init (via Veneer)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_init (via Veneer)
</UL>

<P><STRONG><a name="[2ef]"></a>ke_event_clear</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_encryption_done (via Veneer)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_deffered_elt_handler (via Veneer)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_delete_elt_handler (via Veneer)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_cmd_hdr_rx_evt_handler (via Veneer)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_cmd_pld_rx_evt_handler (via Veneer)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_tx_evt_handler (via Veneer)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_multiplication_event_handler (via Veneer)
</UL>

<P><STRONG><a name="[3ea]"></a>ke_flush</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_reset (via Veneer)
</UL>

<P><STRONG><a name="[2ec]"></a>ke_free</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_canceled (via Veneer)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule (via Veneer)
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_init (via Veneer)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_start (via Veneer)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_init (via Veneer)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_init (via Veneer)
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_stop (via Veneer)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_reset (via Veneer)
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_prog (via Veneer)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_check (via Veneer)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_deffered_elt_handler (via Veneer)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_delete_elt_handler (via Veneer)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_tx_data_received (via Veneer)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_cmd_pld_rx_evt_handler (via Veneer)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_multiplication_event_handler (via Veneer)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next (via Veneer)
</UL>

<P><STRONG><a name="[3e4]"></a>ke_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init (via Veneer)
</UL>

<P><STRONG><a name="[2f5]"></a>ke_malloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_canceled (via Veneer)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule (via Veneer)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_insert (via Veneer)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_test_mode_start_rx (via Veneer)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_test_mode_start_tx (via Veneer)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_scan_en (via Veneer)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_adv_en (via Veneer)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_adv_param (via Veneer)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_le_adv_report_ind (via Veneer)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_rx_isr (via Veneer)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_end_isr (via Veneer)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_buf_init (via Veneer)
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_terminate_ind_pdu_send (via Veneer)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_start_enc_rsp_pdu_send (via Veneer)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_pause_enc_req_pdu_send (via Veneer)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_pause_enc_rsp_pdu_send (via Veneer)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_reject_ind_pdu_send (via Veneer)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_start_enc_req_pdu_send (via Veneer)
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_ping_req_pdu_send (via Veneer)
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_length_req_pdu_send (via Veneer)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_con_param_req_pdu_send (via Veneer)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_con_update_pdu_send (via Veneer)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_ch_map_update_pdu_send (via Veneer)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_phy_req_pdu_send (via Veneer)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_phy_upd_ind_pdu_send (via Veneer)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_start (via Veneer)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_init (via Veneer)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_rx_handler (via Veneer)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_restart (via Veneer)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_deferred_elt_push (via Veneer)
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_winsize_change (via Veneer)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_cmd_hdr_rx_evt_handler (via Veneer)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_con_param_rsp_pdu_send (via Veneer)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_req_handler (via Veneer)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_length_rsp_handler (via Veneer)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_ping_req_handler (via Veneer)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send (via Veneer)
</UL>

<P><STRONG><a name="[2f0]"></a>ke_msg_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_slave (via Veneer)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_test_mode_mngt_cmd_handler (via Veneer)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_local_ver_info_cmd_handler (via Veneer)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_common_cmd_complete_send (via Veneer)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_le_adv_report_ind (via Veneer)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_encryption_done (via Veneer)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init (via Veneer)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_enc_mgt_ind_handler (via Veneer)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler (via Veneer)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_phy_update_finished (via Veneer)
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_phy_update_complete_send (via Veneer)
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_update_ind (via Veneer)
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_update_complete_send (via Veneer)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_rx_handler (via Veneer)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_deffered_elt_handler (via Veneer)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_tx_data_received (via Veneer)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_received (via Veneer)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_cmd_hdr_rx_evt_handler (via Veneer)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_rx_done (via Veneer)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_multiplication_event_handler (via Veneer)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_req_handler (via Veneer)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_phy_req_handler (via Veneer)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_phy_upd_ind_handler (via Veneer)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_length_rsp_handler (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_phy_rsp_handler (via Veneer)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_length_req_handler (via Veneer)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_unknown_rsp_handler (via Veneer)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_reject_ind_ext_handler (via Veneer)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enc_rsp_handler (via Veneer)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_anchor_point_move (via Veneer)
</UL>

<P><STRONG><a name="[331]"></a>ke_msg_free</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_data_cmd_handler (via Veneer)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_rsp_data_cmd_handler (via Veneer)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_le_adv_report_ind (via Veneer)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_encryption_done (via Veneer)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_init (via Veneer)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host (via Veneer)
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_stop (via Veneer)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_reset (via Veneer)
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_adv_data_update (via Veneer)
</UL>

<P><STRONG><a name="[349]"></a>ke_msg_send_basic</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_chnl_assess_timer_handler (via Veneer)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_pdu_llcp_tx_ack_defer (via Veneer)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enc_req_handler (via Veneer)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_start_enc_req_handler (via Veneer)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pause_enc_req_handler (via Veneer)
</UL>

<P><STRONG><a name="[322]"></a>ke_state_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_param_cmd_handler (via Veneer)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_data_cmd_handler (via Veneer)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_en_cmd_handler (via Veneer)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_rsp_data_cmd_handler (via Veneer)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_en_cmd_handler (via Veneer)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_create_con_cmd_handler (via Veneer)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_test_mode_mngt_cmd_handler (via Veneer)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enh_privacy_mgmt_cmd_handler (via Veneer)
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_terminate_ind_pdu_send (via Veneer)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_recv_handler (via Veneer)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_enc_mgt_ind_handler (via Veneer)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_stop_ind_handler (via Veneer)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_auth_payl_nearly_to_ind_handler (via Veneer)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_chnl_assess_timer_handler (via Veneer)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_length_req_ind_handler (via Veneer)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler (via Veneer)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_chmap_update_req_ind_handler (via Veneer)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_phy_upd_req_ind_handler (via Veneer)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_data_ind_handler (via Veneer)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_link_sup_to_ind_handler (via Veneer)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_phy_update_finished (via Veneer)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_update_finished (via Veneer)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_reset (via Veneer)
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_pdu_defer (via Veneer)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_received (via Veneer)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_pdu_llcp_tx_ack_defer (via Veneer)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_end_evt_defer (via Veneer)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_req_handler (via Veneer)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_phy_req_handler (via Veneer)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_upd_ind_handler (via Veneer)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_channel_map_ind_handler (via Veneer)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_rsp_handler (via Veneer)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_phy_upd_ind_handler (via Veneer)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_length_rsp_handler (via Veneer)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_feats_rsp_handler (via Veneer)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_reject_ind_handler (via Veneer)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pause_enc_rsp_handler (via Veneer)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_start_enc_rsp_handler (via Veneer)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_unknown_rsp_handler (via Veneer)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enc_req_handler (via Veneer)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_start_enc_req_handler (via Veneer)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pause_enc_req_handler (via Veneer)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_vers_ind_handler (via Veneer)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_reject_ind_ext_handler (via Veneer)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enc_rsp_handler (via Veneer)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_ping_rsp_handler (via Veneer)
</UL>

<P><STRONG><a name="[33b]"></a>ke_state_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_test_mode_mngt_cmd_handler (via Veneer)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_test_mode_start_rx (via Veneer)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_test_mode_start_tx (via Veneer)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_create_con (via Veneer)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_scan_en (via Veneer)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_adv_en (via Veneer)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_con_req_tx_cfm (via Veneer)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_con_req_ind (via Veneer)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_init (via Veneer)
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_terminate_ind_pdu_send (via Veneer)
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure (via Veneer)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_enc_mgt_ind_handler (via Veneer)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_auth_payl_nearly_to_ind_handler (via Veneer)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_length_req_ind_handler (via Veneer)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler (via Veneer)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_chmap_update_req_ind_handler (via Veneer)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_phy_upd_req_ind_handler (via Veneer)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_phy_update_finished (via Veneer)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_update_finished (via Veneer)
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_stop (via Veneer)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_start (via Veneer)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_reset (via Veneer)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_init (via Veneer)
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_pdu_defer (via Veneer)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_pdu_llcp_tx_ack_defer (via Veneer)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_end_evt_defer (via Veneer)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_req_handler (via Veneer)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_phy_req_handler (via Veneer)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_upd_ind_handler (via Veneer)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_channel_map_ind_handler (via Veneer)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_rsp_handler (via Veneer)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_length_rsp_handler (via Veneer)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_feats_rsp_handler (via Veneer)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_reject_ind_handler (via Veneer)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_start_enc_rsp_handler (via Veneer)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_unknown_rsp_handler (via Veneer)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enc_req_handler (via Veneer)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pause_enc_req_handler (via Veneer)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_vers_ind_handler (via Veneer)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_reject_ind_ext_handler (via Veneer)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_terminate_ind_handler (via Veneer)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_ping_rsp_handler (via Veneer)
</UL>

<P><STRONG><a name="[366]"></a>ke_task_create</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_init (via Veneer)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_init (via Veneer)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_init (via Veneer)
</UL>

<P><STRONG><a name="[343]"></a>ke_timer_active</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_auth_payl_nearly_to_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[330]"></a>ke_timer_clear</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enh_privacy_mgmt_cmd_handler (via Veneer)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_init (via Veneer)
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure (via Veneer)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_stop_ind_handler (via Veneer)
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_pdu_defer (via Veneer)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_pdu_llcp_tx_ack_defer (via Veneer)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_end_evt_defer (via Veneer)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_upd_ind_handler (via Veneer)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_rsp_handler (via Veneer)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_phy_upd_ind_handler (via Veneer)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_length_rsp_handler (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_phy_rsp_handler (via Veneer)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_feats_rsp_handler (via Veneer)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_reject_ind_handler (via Veneer)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pause_enc_rsp_handler (via Veneer)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_start_enc_rsp_handler (via Veneer)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_unknown_rsp_handler (via Veneer)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enc_req_handler (via Veneer)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pause_enc_req_handler (via Veneer)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_vers_ind_handler (via Veneer)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_reject_ind_ext_handler (via Veneer)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_terminate_ind_handler (via Veneer)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_ping_rsp_handler (via Veneer)
</UL>

<P><STRONG><a name="[32e]"></a>ke_timer_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_host_ch_class_cmd_handler (via Veneer)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enh_privacy_mgmt_cmd_handler (via Veneer)
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_terminate_ind_pdu_send (via Veneer)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_enc_req_pdu_send (via Veneer)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_pause_enc_req_pdu_send (via Veneer)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_enc_mgt_ind_handler (via Veneer)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_auth_payl_nearly_to_ind_handler (via Veneer)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_chnl_assess_timer_handler (via Veneer)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_length_req_ind_handler (via Veneer)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler (via Veneer)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_phy_upd_req_ind_handler (via Veneer)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_lsto_con_update (via Veneer)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_start (via Veneer)
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_pdu_defer (via Veneer)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_req_handler (via Veneer)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_phy_req_handler (via Veneer)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pause_enc_rsp_handler (via Veneer)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_start_enc_rsp_handler (via Veneer)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enc_rsp_handler (via Veneer)
</UL>

<P><STRONG><a name="[c8]"></a>llc_auth_payl_real_to_ind_handler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata.llc_default_state)
</UL>
<P><STRONG><a name="[346]"></a>llc_ch_assess_get_current_ch_map</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_chmap_update_req_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[372]"></a>llc_ch_assess_local</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_pdu_defer (via Veneer)
</UL>

<P><STRONG><a name="[387]"></a>llc_common_enc_change_evt_send</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_stop_ind_handler (via Veneer)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_reject_ind_handler (via Veneer)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_start_enc_rsp_handler (via Veneer)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_unknown_rsp_handler (via Veneer)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_reject_ind_ext_handler (via Veneer)
</UL>

<P><STRONG><a name="[388]"></a>llc_common_enc_key_ref_comp_evt_send</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_stop_ind_handler (via Veneer)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_start_enc_rsp_handler (via Veneer)
</UL>

<P><STRONG><a name="[c4]"></a>llc_dft_handler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata.llc_default_state)
</UL>
<P><STRONG><a name="[3d0]"></a>llc_discon_event_complete_send</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_stop_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[385]"></a>llc_feats_rd_event_send</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_stop_ind_handler (via Veneer)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_feats_rsp_handler (via Veneer)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_unknown_rsp_handler (via Veneer)
</UL>

<P><STRONG><a name="[d3]"></a>llc_hci_acl_data_tx_handler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata.llc_default_state)
</UL>
<P><STRONG><a name="[d2]"></a>llc_hci_command_handler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata.llc_default_state)
</UL>
<P><STRONG><a name="[37d]"></a>llc_le_con_cmp_evt_send</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_start (via Veneer)
</UL>

<P><STRONG><a name="[359]"></a>llc_ltk_req_send</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_enc_mgt_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[3a5]"></a>llc_map_update_finished</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_deffered_elt_handler (via Veneer)
</UL>

<P><STRONG><a name="[390]"></a>llc_map_update_ind</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_ch_map_ind (via Veneer)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_restart (via Veneer)
</UL>

<P><STRONG><a name="[3c4]"></a>llc_pdu_acl_tx_ack_defer</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_check (via Veneer)
</UL>

<P><STRONG><a name="[354]"></a>llc_util_clear_operation_ptr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_enc_mgt_ind_handler (via Veneer)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_length_req_ind_handler (via Veneer)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_phy_upd_req_ind_handler (via Veneer)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_update_finished (via Veneer)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_upd_ind_handler (via Veneer)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_rsp_handler (via Veneer)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_unknown_rsp_handler (via Veneer)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_reject_ind_ext_handler (via Veneer)
</UL>

<P><STRONG><a name="[3d2]"></a>llc_util_get_free_conhdl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_create_con (via Veneer)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_con_req_ind (via Veneer)
</UL>

<P><STRONG><a name="[362]"></a>llc_util_get_nb_active_link</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_end_evt_defer (via Veneer)
</UL>

<P><STRONG><a name="[37f]"></a>llc_util_set_auth_payl_to_margin</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_start (via Veneer)
</UL>

<P><STRONG><a name="[3d5]"></a>llc_util_update_channel_map</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_con_req_ind (via Veneer)
</UL>

<P><STRONG><a name="[389]"></a>llc_version_rd_event_send</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_stop_ind_handler (via Veneer)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_vers_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[e3]"></a>llcp_slave_feature_req_handler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata.llcp_pdu_handler)
</UL>
<P><STRONG><a name="[3dd]"></a>lld_adv_stop</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_adv_en (via Veneer)
</UL>

<P><STRONG><a name="[364]"></a>lld_con_stop</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure (via Veneer)
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_pdu_defer (via Veneer)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_pdu_llcp_tx_ack_defer (via Veneer)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_end_evt_defer (via Veneer)
</UL>

<P><STRONG><a name="[3e3]"></a>lld_core_reset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_reset (via Veneer)
</UL>

<P><STRONG><a name="[196]"></a>lld_crypt_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler (via Veneer)
</UL>

<P><STRONG><a name="[3b3]"></a>lld_evt_channel_next</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_slave (via Veneer)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_master (via Veneer)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_restart (via Veneer)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next (via Veneer)
</UL>

<P><STRONG><a name="[3a4]"></a>lld_evt_delete_elt_push</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_slave (via Veneer)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_update_create (via Veneer)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_scan_start (via Veneer)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_end_isr (via Veneer)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_restart (via Veneer)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_deffered_elt_handler (via Veneer)
</UL>

<P><STRONG><a name="[3b5]"></a>lld_evt_drift_compute</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_slave_update (via Veneer)
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_slave (via Veneer)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_restart (via Veneer)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next (via Veneer)
</UL>

<P><STRONG><a name="[3a7]"></a>lld_evt_elt_delete</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_delete_elt_handler (via Veneer)
</UL>

<P><STRONG><a name="[397]"></a>lld_evt_init_evt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_slave_update (via Veneer)
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_slave (via Veneer)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_update_create (via Veneer)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_scan_create (via Veneer)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_adv_create (via Veneer)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_start (via Veneer)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_update_after_param_req (via Veneer)
</UL>

<P><STRONG><a name="[94]"></a>lld_evt_prevent_stop</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 4]<UL><LI> lld.o(.text.lld_con_start)
<LI> lld_evt.o(.text.lld_evt_scan_create)
<LI> lld_evt.o(.text.lld_evt_move_to_slave)
<LI> lld_evt.o(.text.lld_evt_adv_create)
</UL>
<P><STRONG><a name="[195]"></a>lld_evt_timer_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler (via Veneer)
</UL>

<P><STRONG><a name="[34b]"></a>lld_get_mode</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_enc_mgt_ind_handler (via Veneer)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler (via Veneer)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_phy_upd_req_ind_handler (via Veneer)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_update_finished (via Veneer)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_end_evt_defer (via Veneer)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_req_handler (via Veneer)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_phy_req_handler (via Veneer)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_upd_ind_handler (via Veneer)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_channel_map_ind_handler (via Veneer)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_rsp_handler (via Veneer)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_phy_upd_ind_handler (via Veneer)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_reject_ind_handler (via Veneer)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_start_enc_rsp_handler (via Veneer)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_unknown_rsp_handler (via Veneer)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enc_req_handler (via Veneer)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pause_enc_req_handler (via Veneer)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_reject_ind_ext_handler (via Veneer)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_terminate_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[39a]"></a>lld_pdu_adv_pack</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_start (via Veneer)
</UL>

<P><STRONG><a name="[3c6]"></a>lld_pdu_data_tx_push</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_send_packet (via Veneer)
</UL>

<P><STRONG><a name="[3cc]"></a>lld_pdu_pack</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_prog (via Veneer)
</UL>

<P><STRONG><a name="[3c8]"></a>lld_pdu_pop_front</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_prog (via Veneer)
</UL>

<P><STRONG><a name="[3c9]"></a>lld_pdu_push_back</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_prog (via Veneer)
</UL>

<P><STRONG><a name="[3ca]"></a>lld_pdu_push_front</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_prog (via Veneer)
</UL>

<P><STRONG><a name="[3ad]"></a>lld_pdu_tx_flush</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_init (via Veneer)
</UL>

<P><STRONG><a name="[38d]"></a>lld_pdu_tx_loop</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_scan_start (via Veneer)
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_adv_start (via Veneer)
</UL>

<P><STRONG><a name="[38c]"></a>lld_pdu_tx_push</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_start (via Veneer)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_scan_start (via Veneer)
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_adv_start (via Veneer)
</UL>

<P><STRONG><a name="[3b1]"></a>lld_scan_stop</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_master (via Veneer)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_scan_en (via Veneer)
</UL>

<P><STRONG><a name="[3be]"></a>lld_sleep_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_init (via Veneer)
</UL>

<P><STRONG><a name="[3df]"></a>lld_test_mode_rx</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_test_mode_start_rx (via Veneer)
</UL>

<P><STRONG><a name="[3e0]"></a>lld_test_mode_tx</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_test_mode_start_tx (via Veneer)
</UL>

<P><STRONG><a name="[33a]"></a>lld_test_stop</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_test_mode_mngt_cmd_handler (via Veneer)
</UL>

<P><STRONG><a name="[36f]"></a>lld_util_compute_ce_max</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_move_to_master (via Veneer)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_move_to_slave (via Veneer)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_start_enc_rsp_pdu_send (via Veneer)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_update_after_param_req (via Veneer)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_restart (via Veneer)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next (via Veneer)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_length_rsp_handler (via Veneer)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_start_enc_rsp_handler (via Veneer)
</UL>

<P><STRONG><a name="[39c]"></a>lld_util_connection_param_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_update_create (via Veneer)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_start (via Veneer)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_scan_start (via Veneer)
</UL>

<P><STRONG><a name="[3bb]"></a>lld_util_dle_set_cs_fields</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule (via Veneer)
</UL>

<P><STRONG><a name="[386]"></a>lld_util_eff_tx_time_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_move_to_master (via Veneer)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_move_to_slave (via Veneer)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_length_rsp_handler (via Veneer)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_length_req_handler (via Veneer)
</UL>

<P><STRONG><a name="[3ac]"></a>lld_util_flush_list</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_init (via Veneer)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_scan_en (via Veneer)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_init (via Veneer)
</UL>

<P><STRONG><a name="[394]"></a>lld_util_get_local_offset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_param_rsp (via Veneer)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_update_after_param_req (via Veneer)
</UL>

<P><STRONG><a name="[393]"></a>lld_util_get_peer_offset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_slave (via Veneer)
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_param_rsp (via Veneer)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_param_req (via Veneer)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_update_after_param_req (via Veneer)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_anchor_point_move (via Veneer)
</UL>

<P><STRONG><a name="[376]"></a>lld_util_get_phys</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_phy_upd_req_ind_handler (via Veneer)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_phy_upd_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[374]"></a>lld_util_get_tx_pkt_cnt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_pdu_llcp_tx_ack_defer (via Veneer)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enc_req_handler (via Veneer)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pause_enc_req_handler (via Veneer)
</UL>

<P><STRONG><a name="[381]"></a>lld_util_instant_ongoing</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_upd_ind_handler (via Veneer)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_channel_map_ind_handler (via Veneer)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_phy_upd_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[3b7]"></a>lld_util_phy_update_ind</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_phy_update_req (via Veneer)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_restart (via Veneer)
</UL>

<P><STRONG><a name="[32f]"></a>lld_util_ral_force_rpa_renew</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule (via Veneer)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enh_privacy_mgmt_cmd_handler (via Veneer)
</UL>

<P><STRONG><a name="[3bf]"></a>lld_wlcoex_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_init (via Veneer)
</UL>

<P><STRONG><a name="[325]"></a>llm_common_cmd_status_send</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_create_con_cmd_handler (via Veneer)
</UL>

<P><STRONG><a name="[ee]"></a>llm_dft_handler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> llm_task.o(.rodata.llm_default_state)
</UL>
<P><STRONG><a name="[f1]"></a>llm_ecc_result_ind_handler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> llm_task.o(.rodata.llm_default_state)
</UL>
<P><STRONG><a name="[d0]"></a>llm_enc_ind_handler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata.llc_default_state)
</UL>
<P><STRONG><a name="[3a6]"></a>llm_end_evt_defer</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_deffered_elt_handler (via Veneer)
</UL>

<P><STRONG><a name="[f2]"></a>llm_le_enh_priv_addr_renew_timer_handler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> llm_task.o(.rodata.llm_default_state)
</UL>
<P><STRONG><a name="[ef]"></a>llm_le_set_host_ch_class_cmd_sto_handler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> llm_task.o(.rodata.llm_default_state)
</UL>
<P><STRONG><a name="[32a]"></a>llm_ral_clear</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enh_privacy_mgmt_cmd_handler (via Veneer)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_init (via Veneer)
</UL>

<P><STRONG><a name="[32c]"></a>llm_ral_dev_add</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enh_privacy_mgmt_cmd_handler (via Veneer)
</UL>

<P><STRONG><a name="[32b]"></a>llm_ral_dev_rm</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enh_privacy_mgmt_cmd_handler (via Veneer)
</UL>

<P><STRONG><a name="[32d]"></a>llm_ral_set_timeout</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enh_privacy_mgmt_cmd_handler (via Veneer)
</UL>

<P><STRONG><a name="[3d8]"></a>llm_ral_update</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_create_con (via Veneer)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_scan_en (via Veneer)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_adv_en (via Veneer)
</UL>

<P><STRONG><a name="[332]"></a>llm_set_adv_data</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_data_cmd_handler (via Veneer)
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_adv_data_update (via Veneer)
</UL>

<P><STRONG><a name="[337]"></a>llm_set_scan_rsp_data</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_rsp_data_cmd_handler (via Veneer)
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_adv_data_update (via Veneer)
</UL>

<P><STRONG><a name="[39b]"></a>llm_util_apply_bd_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_start (via Veneer)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_scan_en (via Veneer)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_adv_en (via Veneer)
</UL>

<P><STRONG><a name="[38f]"></a>llm_util_bd_addr_in_ral</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_privacy_mode (via Veneer)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_start (via Veneer)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_create_con (via Veneer)
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_adv_start (via Veneer)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_le_adv_report_ind (via Veneer)
</UL>

<P><STRONG><a name="[3d4]"></a>llm_util_bl_add</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_con_req_tx_cfm (via Veneer)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_con_req_ind (via Veneer)
</UL>

<P><STRONG><a name="[3d3]"></a>llm_util_bl_check</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_create_con (via Veneer)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_con_req_ind (via Veneer)
</UL>

<P><STRONG><a name="[37b]"></a>llm_util_bl_rem</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_stop (via Veneer)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_reset (via Veneer)
</UL>

<P><STRONG><a name="[3de]"></a>llm_util_check_address_validity</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_adv_param (via Veneer)
</UL>

<P><STRONG><a name="[350]"></a>llm_util_check_evt_mask</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_le_adv_report_ind (via Veneer)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_enc_mgt_ind_handler (via Veneer)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_stop_ind_handler (via Veneer)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler (via Veneer)
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_update_ind (via Veneer)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_req_handler (via Veneer)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_rsp_handler (via Veneer)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_length_rsp_handler (via Veneer)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_length_req_handler (via Veneer)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_unknown_rsp_handler (via Veneer)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_reject_ind_ext_handler (via Veneer)
</UL>

<P><STRONG><a name="[335]"></a>llm_util_check_map_validity</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_host_ch_class_cmd_handler (via Veneer)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_start (via Veneer)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_adv_param (via Veneer)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_move_to_slave (via Veneer)
</UL>

<P><STRONG><a name="[348]"></a>llm_util_get_channel_map</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_start (via Veneer)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_chnl_assess_timer_handler (via Veneer)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_start (via Veneer)
</UL>

<P><STRONG><a name="[377]"></a>llm_util_get_default_phy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_phy_upd_req_ind_handler (via Veneer)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_phy_req_handler (via Veneer)
</UL>

<P><STRONG><a name="[37e]"></a>llm_util_get_supp_features</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_start (via Veneer)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_feats_req_handler (via Veneer)
</UL>

<P><STRONG><a name="[3db]"></a>llm_wl_clr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_init (via Veneer)
</UL>

<P><STRONG><a name="[40b]"></a>nvds_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init (via Veneer)
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_GetMCUUid (via Veneer)
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_record_read (via Veneer)
</UL>

<P><STRONG><a name="[52e]"></a>nvds_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init (via Veneer)
</UL>

<P><STRONG><a name="[40d]"></a>nvds_put</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_GetMCUUid (via Veneer)
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_record_write (via Veneer)
</UL>

<P><STRONG><a name="[3e5]"></a>rf_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init (via Veneer)
</UL>

<P><STRONG><a name="[30b]"></a>rwip_prevent_sleep_clear</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_init (via Veneer)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_encryption_done (via Veneer)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_init (via Veneer)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_delete_elt_handler (via Veneer)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_cmd_hdr_rx_evt_handler (via Veneer)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_rx_done (via Veneer)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_cmd_pld_rx_evt_handler (via Veneer)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_tx_evt_handler (via Veneer)
</UL>

<P><STRONG><a name="[1a7]"></a>rwip_prevent_sleep_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_TaskHandler (via Veneer)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_encryption_start (via Veneer)
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_IRQHandler (via Veneer)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup (via Veneer)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_write (via Veneer)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_rx_done (via Veneer)
</UL>

<P><STRONG><a name="[1a5]"></a>rwip_schedule</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_TaskHandler (via Veneer)
</UL>

<P><STRONG><a name="[190]"></a>rwip_wakeup_end</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler (via Veneer)
</UL>

<P><STRONG><a name="[19b]"></a>unloaded_area_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init (via Veneer)
</UL>

<P><STRONG><a name="[9c]"></a>lld_pdu_llcp_pk_desc_tab</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 2]<UL><LI> lld_pdu.o(.text.lld_pdu_rx_handler)
<LI> lld_pdu.o(.text.lld_pdu_tx_prog)
</UL>
<P><STRONG><a name="[9e]"></a>llm_local_data_len_values</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> llm.o(.text.llm_init)
</UL>
<P><STRONG><a name="[95]"></a>LLM_AA_CT1</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> lld.o(.text.lld_con_start)
</UL>
<P><STRONG><a name="[96]"></a>LLM_AA_CT2</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> lld.o(.text.lld_con_start)
</UL>
<P><STRONG><a name="[9d]"></a>co_null_bdaddr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 3]<UL><LI> llm.o(.text.llm_set_adv_en)
<LI> llm.o(.text.llm_set_scan_en)
<LI> llm.o(.text.llm_create_con)
</UL>
<P><STRONG><a name="[bb]"></a>dbg_default_handler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> controller_config.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>llc_env</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 72]<UL><LI> llc.o(.text.llc_reset)
<LI> llc.o(.text.llc_start)
<LI> llc.o(.text.llc_stop)
<LI> llc.o(.text.llc_con_update_complete_send)
<LI> llc.o(.text.llc_con_update_ind)
<LI> llc.o(.text.llc_lsto_con_update)
<LI> llc.o(.text.llc_con_update_finished)
<LI> llc.o(.text.llc_phy_update_finished)
<LI> llc.o(.text.llc_init)
<LI> llc_task.o(.text.llc_con_upd_req_ind_handler)
<LI> llc_task.o(.text.llc_length_req_ind_handler)
<LI> llc_task.o(.text.llc_chnl_assess_timer_handler)
<LI> llc_task.o(.text.llc_auth_payl_nearly_to_ind_handler)
<LI> llc_task.o(.text.lld_stop_ind_handler)
<LI> llc_task.o(.text.llc_enc_mgt_ind_handler)
<LI> llc_task.o(.text.llc_data_ind_handler)
<LI> llc_task.o(.text.llc_phy_upd_req_ind_handler)
<LI> llc_task.o(.text.llc_chmap_update_req_ind_handler)
<LI> llc_ch_asses.o(.text.llc_ch_assess_get_local_ch_map)
<LI> llc_ch_asses.o(.text.llc_ch_assess_reass_ch)
<LI> llc_llcp.o(.text.llc_llcp_send)
<LI> llc_llcp.o(.text.llcp_ping_rsp_handler)
<LI> llc_llcp.o(.text.llcp_feats_req_handler)
<LI> llc_llcp.o(.text.llcp_enc_rsp_handler)
<LI> llc_llcp.o(.text.llcp_terminate_ind_handler)
<LI> llc_llcp.o(.text.llcp_reject_ind_ext_handler)
<LI> llc_llcp.o(.text.llcp_vers_ind_handler)
<LI> llc_llcp.o(.text.llcp_pause_enc_req_handler)
<LI> llc_llcp.o(.text.llcp_start_enc_req_handler)
<LI> llc_llcp.o(.text.llcp_enc_req_handler)
<LI> llc_llcp.o(.text.llcp_unknown_rsp_handler)
<LI> llc_llcp.o(.text.llcp_length_req_handler)
<LI> llc_llcp.o(.text.llcp_start_enc_rsp_handler)
<LI> llc_llcp.o(.text.llcp_pause_enc_rsp_handler)
<LI> llc_llcp.o(.text.llcp_reject_ind_handler)
<LI> llc_llcp.o(.text.llcp_feats_rsp_handler)
<LI> llc_llcp.o(.text.llcp_phy_rsp_handler)
<LI> llc_llcp.o(.text.llcp_ping_req_handler)
<LI> llc_llcp.o(.text.llcp_length_rsp_handler)
<LI> llc_llcp.o(.text.llc_llcp_ch_map_update_pdu_send)
<LI> llc_llcp.o(.text.llc_llcp_pause_enc_req_pdu_send)
<LI> llc_llcp.o(.text.llc_llcp_pause_enc_rsp_pdu_send)
<LI> llc_llcp.o(.text.llc_llcp_enc_req_pdu_send)
<LI> llc_llcp.o(.text.llc_llcp_enc_rsp_pdu_send)
<LI> llc_llcp.o(.text.llc_llcp_start_enc_rsp_pdu_send)
<LI> llc_llcp.o(.text.llc_llcp_reject_ind_pdu_send)
<LI> llc_llcp.o(.text.llcp_phy_upd_ind_handler)
<LI> llc_llcp.o(.text.llcp_con_param_rsp_handler)
<LI> llc_llcp.o(.text.llcp_channel_map_ind_handler)
<LI> lld.o(.text.lld_con_update_after_param_req)
<LI> lld_evt.o(.text.lld_evt_restart)
<LI> lld_evt.o(.text.lld_evt_schedule_next)
<LI> llc_llcp.o(.text.llcp_con_upd_ind_handler)
<LI> llc_llcp.o(.text.llcp_phy_req_handler)
<LI> llc_llcp.o(.text.llc_llcp_con_update_pdu_send)
<LI> llc_llcp.o(.text.llc_llcp_con_param_req_pdu_send)
<LI> llc_llcp.o(.text.llc_llcp_con_param_rsp_pdu_send)
<LI> llc_llcp.o(.text.llcp_con_param_req_handler)
<LI> llc_llcp.o(.text.llc_llcp_start_enc_req_pdu_send)
<LI> llc_llcp.o(.text.llc_llcp_terminate_ind_pdu_send)
<LI> llc_llcp.o(.text.llc_llcp_ping_req_pdu_send)
<LI> llc_llcp.o(.text.llc_llcp_length_req_pdu_send)
<LI> llc_llcp.o(.text.llc_llcp_phy_req_pdu_send)
<LI> llc_llcp.o(.text.llc_llcp_phy_upd_ind_pdu_send)
<LI> llc_llcp.o(.text.llc_llcp_recv_handler)
<LI> lld_pdu.o(.text.lld_pdu_rx_handler)
<LI> llc_util.o(.text.llc_util_dicon_procedure)
<LI> llc_util.o(.text.llc_end_evt_defer)
<LI> llc_util.o(.text.llc_pdu_llcp_tx_ack_defer)
<LI> llc_util.o(.text.llc_pdu_defer)
<LI> lld_pdu.o(.text.lld_pdu_tx_prog)
<LI> lld_evt.o(.text.lld_evt_slave_update)
</UL>
<P><STRONG><a name="[ba]"></a>llm_state</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> controller_config.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>dbg_state</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> controller_config.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>rwip_priority</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 5]<UL><LI> lld.o(.text.lld_con_start)
<LI> lld_util.o(.text.lld_util_priority_set)
<LI> lld_evt.o(.text.lld_evt_restart)
<LI> lld_evt.o(.text.lld_evt_scan_create)
<LI> lld_evt.o(.text.lld_evt_end_isr)
</UL>
<P><STRONG><a name="[91]"></a>rwip_coex_cfg</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 4]<UL><LI> lld.o(.text.lld_adv_start)
<LI> lld.o(.text.lld_scan_start)
<LI> lld.o(.text.lld_con_start)
<LI> lld_pdu.o(.text.lld_pdu_tx_prog)
</UL>
<P><STRONG><a name="[63]"></a>error</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> qnble.o(.text.BLE_Init)
</UL>
<P><STRONG><a name="[90]"></a>rwip_rf</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 8]<UL><LI> nxp.o(.text.rwip_init)
<LI> nxp.o(.text.rwip_reset)
<LI> llm.o(.text.llm_le_adv_report_ind)
<LI> lld.o(.text.lld_init)
<LI> llm.o(.text.llm_set_adv_en)
<LI> lld.o(.text.lld_con_start)
<LI> lld.o(.text.lld_move_to_slave)
<LI> llc_util.o(.text.llc_pdu_defer)
</UL>
<P><STRONG><a name="[83]"></a>em_buf_env</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 9]<UL><LI> llm.o(.text.llm_set_adv_en)
<LI> llm.o(.text.llm_set_scan_en)
<LI> llm.o(.text.llm_create_con)
<LI> llm.o(.text.llm_test_mode_start_tx)
<LI> lld_pdu.o(.text.lld_pdu_rx_handler)
<LI> lld_pdu.o(.text.lld_pdu_send_packet)
<LI> lld_pdu.o(.text.lld_pdu_tx_prog)
<LI> lld_evt.o(.text.lld_evt_end_isr)
<LI> em_buf.o(.text.em_buf_init)
</UL>
<P><STRONG><a name="[97]"></a>lld_evt_env</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 14]<UL><LI> lld.o(.text.lld_con_start)
<LI> lld_evt.o(.text.lld_evt_delete_elt_handler)
<LI> lld_evt.o(.text.lld_evt_deferred_elt_push)
<LI> lld_evt.o(.text.lld_evt_deffered_elt_handler)
<LI> lld_evt.o(.text.lld_evt_schedule)
<LI> lld_evt.o(.text.lld_evt_init)
<LI> lld_evt.o(.text.lld_evt_restart)
<LI> lld_evt.o(.text.lld_evt_elt_insert)
<LI> lld_evt.o(.text.lld_evt_canceled)
<LI> lld_evt.o(.text.lld_evt_schedule_next)
<LI> lld_pdu.o(.text.lld_pdu_rx_handler)
<LI> lld_pdu.o(.text.lld_pdu_check)
<LI> lld_evt.o(.text.lld_evt_end_isr)
<LI> lld_evt.o(.text.lld_evt_rx_isr)
</UL>
<P><STRONG><a name="[8c]"></a>llm_le_env</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 36]<UL><LI> llc.o(.text.llc_start)
<LI> llm_task.o(.text.llm_enc_req_handler)
<LI> llc_task.o(.text.llc_chnl_assess_timer_handler)
<LI> llm.o(.text.llm_init)
<LI> llm.o(.text.llm_con_req_ind)
<LI> llm.o(.text.llm_con_req_tx_cfm)
<LI> llm.o(.text.llm_le_adv_report_ind)
<LI> llm.o(.text.llm_set_adv_param)
<LI> llm_hci.o(.text.hci_le_set_scan_en_cmd_handler)
<LI> llm_hci.o(.text.hci_le_set_adv_en_cmd_handler)
<LI> llm_hci.o(.text.hci_le_set_adv_data_cmd_handler)
<LI> llc_ch_asses.o(.text.llc_ch_assess_get_local_ch_map)
<LI> llc_ch_asses.o(.text.llc_ch_assess_reass_ch)
<LI> lld.o(.text.lld_init)
<LI> lld.o(.text.lld_adv_start)
<LI> lld.o(.text.lld_scan_start)
<LI> llm.o(.text.llm_set_adv_en)
<LI> llm.o(.text.llm_set_scan_en)
<LI> llm.o(.text.llm_create_con)
<LI> llm.o(.text.llm_encryption_start)
<LI> llm.o(.text.llm_encryption_done)
<LI> llm.o(.text.llm_test_mode_start_tx)
<LI> llm.o(.text.llm_test_mode_start_rx)
<LI> llm_hci.o(.text.hci_le_enh_privacy_mgmt_cmd_handler)
<LI> llm_hci.o(.text.hci_le_test_mode_mngt_cmd_handler)
<LI> llm_hci.o(.text.hci_le_enc_cmd_handler)
<LI> llm_hci.o(.text.hci_le_set_host_ch_class_cmd_handler)
<LI> llm_hci.o(.text.hci_le_create_con_cmd_handler)
<LI> lld.o(.text.lld_con_start)
<LI> lld.o(.text.lld_move_to_master)
<LI> lld.o(.text.lld_move_to_slave)
<LI> lld_util.o(.text.lld_util_priority_set)
<LI> lld_evt.o(.text.lld_evt_schedule)
<LI> lld_evt.o(.text.lld_evt_restart)
<LI> llm_util.o(.text.llm_util_adv_data_update)
<LI> lld_evt.o(.text.lld_evt_end_isr)
</UL>
<P><STRONG><a name="[8d]"></a>hci_env</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.text.hci_send_2_host)
</UL>
<P><STRONG><a name="[8a]"></a>hci_tl_env</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 3]<UL><LI> hci_tl.o(.text.hci_tl_send)
<LI> hci_tl.o(.text.hci_cmd_received)
<LI> hci_tl.o(.text.hci_acl_tx_data_received)
</UL>
<P><STRONG><a name="[84]"></a>h4tl_env</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 6]<UL><LI> h4tl.o(.text.h4tl_tx_evt_handler)
<LI> h4tl.o(.text.h4tl_cmd_pld_rx_evt_handler)
<LI> h4tl.o(.text.h4tl_cmd_hdr_rx_evt_handler)
<LI> h4tl.o(.text.h4tl_init)
<LI> h4tl.o(.text.h4tl_write)
<LI> h4tl.o(.text.h4tl_start)
</UL>
<P><STRONG><a name="[99]"></a>nvds_env</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 4]<UL><LI> llm.o(.text.llm_init)
<LI> lld.o(.text.lld_init)
<LI> rwble.o(.text.rwble_init)
<LI> lld_evt.o(.text.lld_evt_init)
</UL>
<P><STRONG><a name="[64]"></a>rwip_env</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 3]<UL><LI> nxp.o(.text.rwip_init)
<LI> nxp.o(.text.rwip_reset)
<LI> nxp.o(.text.Controller_TaskHandler)
</UL>
<P><STRONG><a name="[62]"></a>ble_config</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fw_symbols_mdk.h(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 81]<UL><LI> controller_config.o(i.NXP_InitBleCfg)
<LI> nxp.o(.text.rwip_lpcycles_2_us)
<LI> nxp.o(.text.rwip_init)
<LI> nxp.o(.text.rwip_reset)
<LI> nxp.o(.text.rwip_wakeup)
<LI> nxp.o(.text.Controller_TaskHandler)
<LI> llc.o(.text.llc_reset)
<LI> llc.o(.text.llc_init)
<LI> eif_adapter.o(.text.EIF_RxCallback)
<LI> eif_adapter.o(.text.EIF_Read)
<LI> qnble.o(.text.BLE_Init)
<LI> llm.o(.text.llm_init)
<LI> llm.o(.text.llm_con_req_ind)
<LI> llm.o(.text.llm_con_req_tx_cfm)
<LI> llm.o(.text.llm_le_adv_report_ind)
<LI> llm.o(.text.llm_set_adv_param)
<LI> llm_hci.o(.text.hci_le_set_scan_rsp_data_cmd_handler)
<LI> llm_hci.o(.text.hci_le_set_adv_data_cmd_handler)
<LI> llc_llcp.o(.text.llc_llcp_send)
<LI> llc_llcp.o(.text.llcp_enc_rsp_handler)
<LI> llc_llcp.o(.text.llcp_pause_enc_req_handler)
<LI> lld.o(.text.lld_init)
<LI> lld.o(.text.lld_adv_start)
<LI> lld.o(.text.lld_scan_start)
<LI> rwble.o(.text.rwble_reset)
<LI> rwble.o(.text.BLE_IRQHandler)
<LI> llc_llcp.o(.text.llcp_enc_req_handler)
<LI> llc_llcp.o(.text.llcp_length_req_handler)
<LI> llc_llcp.o(.text.llcp_start_enc_rsp_handler)
<LI> llc_llcp.o(.text.llcp_pause_enc_rsp_handler)
<LI> llc_llcp.o(.text.llcp_ping_req_handler)
<LI> llc_llcp.o(.text.llcp_length_rsp_handler)
<LI> llc_llcp.o(.text.llc_llcp_ch_map_update_pdu_send)
<LI> llc_llcp.o(.text.llc_llcp_pause_enc_req_pdu_send)
<LI> llc_llcp.o(.text.llc_llcp_pause_enc_rsp_pdu_send)
<LI> llc_llcp.o(.text.llc_llcp_start_enc_rsp_pdu_send)
<LI> llc_llcp.o(.text.llc_llcp_reject_ind_pdu_send)
<LI> llm.o(.text.llm_set_adv_en)
<LI> llm.o(.text.llm_set_scan_en)
<LI> llm.o(.text.llm_create_con)
<LI> llm.o(.text.llm_encryption_start)
<LI> llm.o(.text.llm_test_mode_start_tx)
<LI> llm.o(.text.llm_test_mode_start_rx)
<LI> lld.o(.text.lld_con_start)
<LI> lld.o(.text.lld_move_to_master)
<LI> lld.o(.text.lld_move_to_slave)
<LI> lld_sleep.o(.text.lld_sleep_wakeup)
<LI> lld_evt.o(.text.lld_evt_delete_elt_handler)
<LI> lld_evt.o(.text.lld_evt_deffered_elt_handler)
<LI> lld_evt.o(.text.lld_evt_schedule)
<LI> lld_evt.o(.text.lld_evt_init)
<LI> lld_evt.o(.text.lld_evt_restart)
<LI> lld_evt.o(.text.lld_evt_elt_insert)
<LI> lld_evt.o(.text.lld_evt_schedule_next)
<LI> llc_llcp.o(.text.llc_llcp_con_update_pdu_send)
<LI> llc_llcp.o(.text.llc_llcp_con_param_req_pdu_send)
<LI> llc_llcp.o(.text.llc_llcp_con_param_rsp_pdu_send)
<LI> llc_llcp.o(.text.llcp_con_param_req_handler)
<LI> llc_llcp.o(.text.llc_llcp_start_enc_req_pdu_send)
<LI> llc_llcp.o(.text.llc_llcp_terminate_ind_pdu_send)
<LI> llc_llcp.o(.text.llc_llcp_ping_req_pdu_send)
<LI> llc_llcp.o(.text.llc_llcp_length_req_pdu_send)
<LI> llc_llcp.o(.text.llc_llcp_phy_req_pdu_send)
<LI> llc_llcp.o(.text.llc_llcp_phy_upd_ind_pdu_send)
<LI> lld_pdu.o(.text.lld_pdu_rx_handler)
<LI> llc_util.o(.text.llc_util_dicon_procedure)
<LI> llc_util.o(.text.llc_end_evt_defer)
<LI> llc_util.o(.text.llc_pdu_llcp_tx_ack_defer)
<LI> llc_util.o(.text.llc_pdu_defer)
<LI> llm_util.o(.text.llm_pdu_defer)
<LI> lld_pdu.o(.text.lld_pdu_check)
<LI> lld_pdu.o(.text.lld_pdu_tx_prog)
<LI> lld_evt.o(.text.lld_evt_scan_create)
<LI> lld_evt.o(.text.lld_evt_move_to_master)
<LI> lld_evt.o(.text.lld_evt_move_to_slave)
<LI> lld_evt.o(.text.lld_evt_adv_create)
<LI> lld_evt.o(.text.lld_evt_end_isr)
<LI> hci_tl.o(.text.hci_tl_send)
<LI> hci_tl.o(.text.hci_cmd_received)
<LI> hci_tl.o(.text.hci_acl_tx_data_received)
<LI> em_buf.o(.text.em_buf_init)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[52f]"></a>SYSCON_SetLoadCap</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, board.o(i.SYSCON_SetLoadCap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSCON_SetLoadCap
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[417]"></a>IOCON_PinMuxSet</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, pin_mux.o(i.IOCON_PinMuxSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = IOCON_PinMuxSet &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitLEDs
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitButtons
</UL>

<P><STRONG><a name="[4d4]"></a>OSA_InsertTaskBefore</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fsl_os_abstraction_bm.o(i.OSA_InsertTaskBefore))
<BR><BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_TaskCreate
</UL>

<P><STRONG><a name="[4cd]"></a>osObjectAlloc</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fsl_os_abstraction_bm.o(i.osObjectAlloc))
<BR><BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexCreate
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventCreate
</UL>

<P><STRONG><a name="[4ce]"></a>osObjectIsAllocated</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fsl_os_abstraction_bm.o(i.osObjectIsAllocated))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osObjectIsAllocated
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexUnlock
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexLock
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventWait
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
</UL>

<P><STRONG><a name="[a5]"></a>BleApp_AdvertisingCallback</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, mijia_profile_server.o(i.BleApp_AdvertisingCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = BleApp_AdvertisingCallback &rArr; LED_StopFlashingAllLeds &rArr; LED_SetLed &rArr; LED_StartBlip &rArr; LED_StartFlashWithPeriod &rArr; TMR_StartIntervalTimer &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;panic
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_StopFlashingAllLeds
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_StartFlashWithPeriod
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mibeacon_Advertise
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mijia_profile_server.o(i.BleApp_GenericCallback)
</UL>
<P><STRONG><a name="[41c]"></a>BleApp_Config</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, mijia_profile_server.o(i.BleApp_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 820 + Unknown Stack Size
<LI>Call Chain = BleApp_Config &rArr; mible_server_miservice_init &rArr; Log_Printf &rArr; Serial_AsyncWrite &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_miservice_init
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_info_init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattServer_RegisterHandlesForWriteNotifications
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RegisterGattServerCallback
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mibeacon_Set_AdvData
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_GenericCallback
</UL>

<P><STRONG><a name="[a4]"></a>BleApp_ConnectionCallback</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, mijia_profile_server.o(i.BleApp_ConnectionCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = BleApp_ConnectionCallback &rArr; LED_StopFlashingAllLeds &rArr; LED_SetLed &rArr; LED_StartBlip &rArr; LED_StartFlashWithPeriod &rArr; TMR_StartIntervalTimer &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_ConnectionCallback
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_StopFlashingAllLeds
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Operate
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleConnManager_GapPeripheralEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mijia_profile_server.o(i.BleApp_GenericCallback)
</UL>
<P><STRONG><a name="[a3]"></a>BleApp_GattServerCallback</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, mijia_profile_server.o(i.BleApp_GattServerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = BleApp_GattServerCallback &rArr; GattServer_SendAttributeWrittenStatus &rArr; MEM_BufferAllocWithId &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_GattServerCallback
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattServer_SendAttributeWrittenStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mijia_profile_server.o(i.BleApp_Config)
</UL>
<P><STRONG><a name="[419]"></a>Mibeacon_Advertise</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mijia_profile_server.o(i.Mibeacon_Advertise))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = Mibeacon_Advertise &rArr; Log_Printf &rArr; Serial_AsyncWrite &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Printf
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_gap_adv_start
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_disconnected
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_Start
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_AdvertisingCallback
</UL>

<P><STRONG><a name="[4a0]"></a>FLASH_ClearStatusFlags</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flash_adapter.o(i.FLASH_ClearStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_FlashEraseSector
</UL>

<P><STRONG><a name="[4a2]"></a>NV_FlashProgramAdaptation</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, flash_adapter.o(i.NV_FlashProgramAdaptation))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = NV_FlashProgramAdaptation &rArr; FLASH_Program &rArr; FLASH_BusyStatusCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_Flash_WaitForCSEndAndDisableInterrupts
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptEnable
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_FlashProgramUnaligned
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_FlashProgram
</UL>

<P><STRONG><a name="[49f]"></a>NV_Flash_WaitForCSEndAndDisableInterrupts</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, flash_adapter.o(i.NV_Flash_WaitForCSEndAndDisableInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NV_Flash_WaitForCSEndAndDisableInterrupts &rArr; OSA_InterruptDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_FlashVerifyErase
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_FlashEraseSector
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_FlashProgramAdaptation
</UL>

<P><STRONG><a name="[4a5]"></a>SwFlashVerifyErase</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, flash_adapter.o(i.SwFlashVerifyErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SwFlashVerifyErase
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_FlashVerifyErase
</UL>

<P><STRONG><a name="[475]"></a>GPIO_ReadPinInput</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio_adapter.o(i.GPIO_ReadPinInput))
<BR><BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioReadPinInput
</UL>

<P><STRONG><a name="[471]"></a>Gpio_InstallPortISR</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, gpio_adapter.o(i.Gpio_InstallPortISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Gpio_InstallPortISR &rArr; OSA_InstallIntHandler &rArr; InstallIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InstallIntHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInstallIsr
</UL>

<P><STRONG><a name="[476]"></a>IOCON_DriveSet</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, gpio_adapter.o(i.IOCON_DriveSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = IOCON_DriveSet &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetDriveStrength
</UL>

<P><STRONG><a name="[478]"></a>IOCON_FuncSet</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, gpio_adapter.o(i.IOCON_FuncSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = IOCON_FuncSet &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetPinMux
</UL>

<P><STRONG><a name="[479]"></a>IOCON_PullSet</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, gpio_adapter.o(i.IOCON_PullSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = IOCON_PullSet &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetPinPullMode
</UL>

<P><STRONG><a name="[470]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gpio_adapter.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInstallIsr
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_InstallPortISR
</UL>

<P><STRONG><a name="[481]"></a>KBD_KeyCheck</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, keyboard.o(i.KBD_KeyCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KBD_KeyCheck &rArr; GpioReadPinInput
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioReadPinInput
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan
</UL>

<P><STRONG><a name="[482]"></a>KBD_KeySwitchPortGet</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, keyboard.o(i.KBD_KeySwitchPortGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = KBD_KeySwitchPortGet &rArr; GpioReadPinInput
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioReadPinInput
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan
</UL>

<P><STRONG><a name="[480]"></a>KbGpioInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, keyboard.o(i.KbGpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = KbGpioInit &rArr; GpioInputPinInit &rArr; GpioSetPinPullMode &rArr; IOCON_PullSet &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInputPinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBD_Init
</UL>

<P><STRONG><a name="[ae]"></a>KeyScan</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, keyboard.o(i.KeyScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = KeyScan &rArr; KBD_KeyCheck &rArr; GpioReadPinInput
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBD_KeyCheck
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioReadPinInput
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StopTimer
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBD_KeySwitchPortGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(i.Switch_Press_ISR)
</UL>
<P><STRONG><a name="[4f9]"></a>Switch_CheckIRQ</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, keyboard.o(i.Switch_CheckIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Switch_CheckIRQ &rArr; GpioIsPinIntPending
</UL>
<BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioIsPinIntPending
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClearPinIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_Press_ISR
</UL>

<P><STRONG><a name="[483]"></a>LED_DecrementBlip</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, led.o(i.LED_DecrementBlip))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED_DecrementBlip &rArr; TMR_StopTimer &rArr; StackTimer_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StopTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_FlashTimeout
</UL>

<P><STRONG><a name="[ab]"></a>LED_FlashTimeout</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, led.o(i.LED_FlashTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LED_FlashTimeout &rArr; LED_ToggleLed &rArr; LED_Operate &rArr; LED_GpioSet &rArr; GpioTogglePinOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ToggleLed
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_DecrementBlip
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(i.LED_StartFlashWithPeriod)
</UL>
<P><STRONG><a name="[485]"></a>LED_GpioSet</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, led.o(i.LED_GpioSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LED_GpioSet &rArr; GpioTogglePinOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioTogglePinOutput
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetPinOutput
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClearPinOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Operate
</UL>

<P><STRONG><a name="[4db]"></a>RNG_Enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rng.o(i.RNG_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Init
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_HwGetRandomNo
</UL>

<P><STRONG><a name="[469]"></a>GetRandomRange</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nv_flash.o(i.GetRandomRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GetRandomRange &rArr; RNG_GetRandomNo &rArr; SecLib_get_random &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GetRandomNo
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvIdle
</UL>

<P><STRONG><a name="[468]"></a>InitNVMConfig</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, nv_flash.o(i.InitNVMConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = InitNVMConfig &rArr; UpgradeLegacyTable &rArr; NV_FlashProgram &rArr; NV_FlashProgramAdaptation &rArr; FLASH_Program &rArr; FLASH_BusyStatusCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_Init
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeLegacyTable
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvInitStorageSystem
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvGetFlashTableSize
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvModuleInit
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFlashTableVersion
</UL>

<P><STRONG><a name="[4a8]"></a>NvAddSaveRequestToQueue</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, nv_flash.o(i.NvAddSaveRequestToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = NvAddSaveRequestToQueue &rArr; NvProcessFirstSaveInQueue &rArr;  NvAddSaveRequestToQueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvPushPendingSave
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvProcessFirstSaveInQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvTimerTick
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvSyncSave
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvSaveOnIdle
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvIdle
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvAtomicSave
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvProcessFirstSaveInQueue
</UL>

<P><STRONG><a name="[4ad]"></a>NvCopyPage</STRONG> (Thumb, 1166 bytes, Stack size 80 bytes, nv_flash.o(i.NvCopyPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = NvCopyPage &rArr; NvInternalCopy &rArr; NV_FlashProgramUnaligned &rArr; NV_FlashProgramAdaptation &rArr; FLASH_Program &rArr; FLASH_BusyStatusCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptEnable
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptDisable
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvVirtualPageBlankCheck
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvUpdateSize
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvSaveRamTable
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvIsRecordCopied
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvIsNVMFlashAddress
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvInternalDefragmentedCopy
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvInternalCopy
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvGetTblEntryMetaAddrFromId
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvGetTableEntryIndexFromId
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvGetTableEntry
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvGetMetaInfo
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvGetFlashTableSize
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvEraseVirtualPage
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvIsRecordErased
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFlashTableVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvSyncSave
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvModuleInit
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvIdle
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvProcessFirstSaveInQueue
</UL>

<P><STRONG><a name="[4af]"></a>NvEraseVirtualPage</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nv_flash.o(i.NvEraseVirtualPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = NvEraseVirtualPage &rArr; NV_FlashEraseSector &rArr; FLASH_Erase &rArr; FLASH_PageErase &rArr; FLASH_BusyStatusCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_FlashEraseSector
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvVirtualPageBlankCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvSyncSave
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeLegacyTable
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvInternalFormat
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvCopyPage
</UL>

<P><STRONG><a name="[513]"></a>NvGetEntryFromDataPtr</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, nv_flash.o(i.NvGetEntryFromDataPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NvGetEntryFromDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvmMoveToRam
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvSyncSave
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvSaveOnIdle
</UL>

<P><STRONG><a name="[47e]"></a>NvGetFlashTableSize</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, nv_flash.o(i.NvGetFlashTableSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NvGetFlashTableSize
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvModuleInit
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvInternalFormat
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvCopyPage
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNVMConfig
</UL>

<P><STRONG><a name="[4b0]"></a>NvGetMetaInfo</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, nv_flash.o(i.NvGetMetaInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NvGetMetaInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvmRestoreUnmirrored
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvWriteRecord
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvInternalDefragmentedCopy
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvGetTblEntryMetaAddrFromId
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvGetPageFreeSpace
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvCopyPage
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvIsRecordErased
</UL>

<P><STRONG><a name="[4bb]"></a>NvGetPageFreeSpace</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, nv_flash.o(i.NvGetPageFreeSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NvGetPageFreeSpace &rArr; NvGetMetaInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvGetMetaInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvModuleInit
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvWriteRecord
</UL>

<P><STRONG><a name="[4c7]"></a>NvGetPendingSavesCount</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nv_flash.o(i.NvGetPendingSavesCount))
<BR><BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvmMoveToRam
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvIdle
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvAtomicSave
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvProcessFirstSaveInQueue
</UL>

<P><STRONG><a name="[4b4]"></a>NvGetTableEntry</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, nv_flash.o(i.NvGetTableEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NvGetTableEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvInternalDefragmentedCopy
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvCopyPage
</UL>

<P><STRONG><a name="[4b1]"></a>NvGetTableEntryIndexFromId</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, nv_flash.o(i.NvGetTableEntryIndexFromId))
<BR><BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvmRestoreUnmirrored
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvmMoveToRam
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvAtomicSave
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeLegacyTable
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvWriteRecord
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvCopyPage
</UL>

<P><STRONG><a name="[4b5]"></a>NvGetTblEntryMetaAddrFromId</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, nv_flash.o(i.NvGetTblEntryMetaAddrFromId))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NvGetTblEntryMetaAddrFromId &rArr; NvGetMetaInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvGetMetaInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvCopyPage
</UL>

<P><STRONG><a name="[511]"></a>NvInitPendingSavesQueue</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nv_flash.o(i.NvInitPendingSavesQueue))
<BR><BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvModuleInit
</UL>

<P><STRONG><a name="[47c]"></a>NvInitStorageSystem</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, nv_flash.o(i.NvInitStorageSystem))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = NvInitStorageSystem &rArr; NvVirtualPageBlankCheck &rArr; NV_FlashVerifyErase &rArr; SwFlashVerifyErase
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvVirtualPageBlankCheck
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNVMConfig
</UL>

<P><STRONG><a name="[4b7]"></a>NvInternalCopy</STRONG> (Thumb, 496 bytes, Stack size 136 bytes, nv_flash.o(i.NvInternalCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = NvInternalCopy &rArr; NV_FlashProgramUnaligned &rArr; NV_FlashProgramAdaptation &rArr; FLASH_Program &rArr; FLASH_BusyStatusCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_FlashProgramUnaligned
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvCopyPage
</UL>

<P><STRONG><a name="[4b9]"></a>NvInternalDefragmentedCopy</STRONG> (Thumb, 852 bytes, Stack size 104 bytes, nv_flash.o(i.NvInternalDefragmentedCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = NvInternalDefragmentedCopy &rArr; NV_FlashProgram &rArr; NV_FlashProgramAdaptation &rArr; FLASH_Program &rArr; FLASH_BusyStatusCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_FlashProgram
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvGetTableEntry
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvGetMetaInfo
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemSet
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvCopyPage
</UL>

<P><STRONG><a name="[4c0]"></a>NvInternalFormat</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, nv_flash.o(i.NvInternalFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = NvInternalFormat &rArr; NvSaveRamTable &rArr; NV_FlashProgram &rArr; NV_FlashProgramAdaptation &rArr; FLASH_Program &rArr; FLASH_BusyStatusCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvUpdateLastMetaInfoAddress
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvSaveRamTable
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvGetFlashTableSize
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvEraseVirtualPage
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvModuleInit
</UL>

<P><STRONG><a name="[4cc]"></a>NvIsMemoryAreaAvailable</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, nv_flash.o(i.NvIsMemoryAreaAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NvIsMemoryAreaAvailable
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvWriteRecord
</UL>

<P><STRONG><a name="[4b8]"></a>NvIsNVMFlashAddress</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, nv_flash.o(i.NvIsNVMFlashAddress))
<BR><BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvmRestoreUnmirrored
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvmMoveToRam
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvWriteRecord
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvCopyPage
</UL>

<P><STRONG><a name="[4c2]"></a>NvIsRamTableUpdated</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, nv_flash.o(i.NvIsRamTableUpdated))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NvIsRamTableUpdated
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvModuleInit
</UL>

<P><STRONG><a name="[4b2]"></a>NvIsRecordCopied</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, nv_flash.o(i.NvIsRecordCopied))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NvIsRecordCopied
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvCopyPage
</UL>

<P><STRONG><a name="[4ca]"></a>NvPopPendingSave</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, nv_flash.o(i.NvPopPendingSave))
<BR><BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvIdle
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvProcessFirstSaveInQueue
</UL>

<P><STRONG><a name="[4aa]"></a>NvProcessFirstSaveInQueue</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, nv_flash.o(i.NvProcessFirstSaveInQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + In Cycle
<LI>Call Chain = NvProcessFirstSaveInQueue &rArr;  NvAddSaveRequestToQueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvAtomicSave
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvWriteRecord
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvPopPendingSave
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvGetPendingSavesCount
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvCopyPage
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvAddSaveRequestToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvAddSaveRequestToQueue
</UL>

<P><STRONG><a name="[4a9]"></a>NvPushPendingSave</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, nv_flash.o(i.NvPushPendingSave))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NvPushPendingSave
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvAddSaveRequestToQueue
</UL>

<P><STRONG><a name="[4ba]"></a>NvSaveRamTable</STRONG> (Thumb, 292 bytes, Stack size 56 bytes, nv_flash.o(i.NvSaveRamTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = NvSaveRamTable &rArr; NV_FlashProgram &rArr; NV_FlashProgramAdaptation &rArr; FLASH_Program &rArr; FLASH_BusyStatusCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_FlashProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvInternalFormat
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvCopyPage
</UL>

<P><STRONG><a name="[4c1]"></a>NvUpdateLastMetaInfoAddress</STRONG> (Thumb, 308 bytes, Stack size 16 bytes, nv_flash.o(i.NvUpdateLastMetaInfoAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NvUpdateLastMetaInfoAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvModuleInit
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvInternalFormat
</UL>

<P><STRONG><a name="[4b6]"></a>NvUpdateSize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nv_flash.o(i.NvUpdateSize))
<BR><BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvWriteRecord
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvCopyPage
</UL>

<P><STRONG><a name="[4ae]"></a>NvVirtualPageBlankCheck</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nv_flash.o(i.NvVirtualPageBlankCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = NvVirtualPageBlankCheck &rArr; NV_FlashVerifyErase &rArr; SwFlashVerifyErase
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_FlashVerifyErase
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeLegacyTable
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvInitStorageSystem
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvEraseVirtualPage
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvCopyPage
</UL>

<P><STRONG><a name="[4c9]"></a>NvWriteRecord</STRONG> (Thumb, 910 bytes, Stack size 64 bytes, nv_flash.o(i.NvWriteRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = NvWriteRecord &rArr; NV_FlashProgramUnaligned &rArr; NV_FlashProgramAdaptation &rArr; FLASH_Program &rArr; FLASH_BusyStatusCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_FlashProgramUnaligned
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_FlashProgram
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvUpdateSize
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvIsNVMFlashAddress
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvIsMemoryAreaAvailable
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvGetTableEntryIndexFromId
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvGetPageFreeSpace
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvGetMetaInfo
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferFree
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvTimerTick
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvSyncSave
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvIdle
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvProcessFirstSaveInQueue
</UL>

<P><STRONG><a name="[47d]"></a>UpgradeLegacyTable</STRONG> (Thumb, 728 bytes, Stack size 88 bytes, nv_flash.o(i.UpgradeLegacyTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = UpgradeLegacyTable &rArr; NV_FlashProgram &rArr; NV_FlashProgramAdaptation &rArr; FLASH_Program &rArr; FLASH_BusyStatusCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_FlashProgram
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvVirtualPageBlankCheck
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvGetTableEntryIndexFromId
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvEraseVirtualPage
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNVMConfig
</UL>

<P><STRONG><a name="[4c8]"></a>__NvAtomicSave</STRONG> (Thumb, 348 bytes, Stack size 40 bytes, nv_flash.o(i.__NvAtomicSave))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + In Cycle
<LI>Call Chain = __NvAtomicSave &rArr;  NvAddSaveRequestToQueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvSyncSave
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvGetTableEntryIndexFromId
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvGetPendingSavesCount
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvAddSaveRequestToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvIdle
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvProcessFirstSaveInQueue
</UL>

<P><STRONG><a name="[4be]"></a>__NvIdle</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, nv_flash.o(i.__NvIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = __NvIdle &rArr; __NvTimerTick &rArr; NvAddSaveRequestToQueue &rArr; NvProcessFirstSaveInQueue &rArr;  NvAddSaveRequestToQueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_FlashVerifyErase
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_FlashEraseSector
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvTimerTick
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvAtomicSave
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvWriteRecord
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvPopPendingSave
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvGetPendingSavesCount
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvCopyPage
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvAddSaveRequestToQueue
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRandomRange
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_GetTimestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvIdle
</UL>

<P><STRONG><a name="[4c4]"></a>__NvModuleInit</STRONG> (Thumb, 354 bytes, Stack size 16 bytes, nv_flash.o(i.__NvModuleInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = __NvModuleInit &rArr; NvCopyPage &rArr; NvInternalCopy &rArr; NV_FlashProgramUnaligned &rArr; NV_FlashProgramAdaptation &rArr; FLASH_Program &rArr; FLASH_BusyStatusCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvmRestoreUnmirrored
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvUpdateLastMetaInfoAddress
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvIsRamTableUpdated
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvInternalFormat
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvInitPendingSavesQueue
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvGetPageFreeSpace
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvGetFlashTableSize
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvCopyPage
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNVMConfig
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFlashTableVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvModuleInit
</UL>

<P><STRONG><a name="[4cb]"></a>__NvSaveOnIdle</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, nv_flash.o(i.__NvSaveOnIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = __NvSaveOnIdle &rArr; NvAddSaveRequestToQueue &rArr; NvProcessFirstSaveInQueue &rArr;  NvAddSaveRequestToQueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvGetEntryFromDataPtr
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvAddSaveRequestToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvSaveOnIdle
</UL>

<P><STRONG><a name="[50e]"></a>__NvSyncSave</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, nv_flash.o(i.__NvSyncSave))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + In Cycle
<LI>Call Chain = __NvSyncSave &rArr;  NvAddSaveRequestToQueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvWriteRecord
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvGetEntryFromDataPtr
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvEraseVirtualPage
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvCopyPage
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvAddSaveRequestToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvAtomicSave
</UL>

<P><STRONG><a name="[510]"></a>__NvTimerTick</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, nv_flash.o(i.__NvTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = __NvTimerTick &rArr; NvAddSaveRequestToQueue &rArr; NvProcessFirstSaveInQueue &rArr;  NvAddSaveRequestToQueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvWriteRecord
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvAddSaveRequestToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvIdle
</UL>

<P><STRONG><a name="[4c6]"></a>__NvmMoveToRam</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, nv_flash.o(i.__NvmMoveToRam))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = __NvmMoveToRam &rArr; MEM_BufferAllocWithId &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptEnable
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptDisable
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvIsNVMFlashAddress
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvGetTableEntryIndexFromId
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvGetPendingSavesCount
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvGetEntryFromDataPtr
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvMoveToRam
</UL>

<P><STRONG><a name="[512]"></a>__NvmRestoreUnmirrored</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, nv_flash.o(i.__NvmRestoreUnmirrored))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __NvmRestoreUnmirrored &rArr; NvGetMetaInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvIsNVMFlashAddress
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvGetTableEntryIndexFromId
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvGetMetaInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NvModuleInit
</UL>

<P><STRONG><a name="[4e4]"></a>Serial_TxQueueMaintenance</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, serialmanager.o(i.Serial_TxQueueMaintenance))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Serial_TxQueueMaintenance &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptEnable
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_AsyncWrite
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManagerTask
</UL>

<P><STRONG><a name="[ac]"></a>Serial_UartRxCb</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, serialmanager.o(i.Serial_UartRxCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Serial_UartRxCb &rArr; SerialManager_RxNotify &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_RxNotify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialmanager.o(i.Serial_InitInterface)
</UL>
<P><STRONG><a name="[ad]"></a>Serial_UartTxCb</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, serialmanager.o(i.Serial_UartTxCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Serial_UartTxCb &rArr; SerialManager_TxNotify &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_TxNotify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialmanager.o(i.Serial_InitInterface)
</UL>
<P><STRONG><a name="[4e5]"></a>Serial_WriteInternal</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, serialmanager.o(i.Serial_WriteInternal))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptEnable
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InterruptDisable
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_AsyncWrite
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_TxNotify
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManagerTask
</UL>

<P><STRONG><a name="[508]"></a>USART_ClearStatusFlags</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart_adapter.o(i.USART_ClearStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ISR
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>

<P><STRONG><a name="[50b]"></a>USART_EnableInterrupts</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart_adapter.o(i.USART_EnableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Initialize
</UL>

<P><STRONG><a name="[506]"></a>USART_GetStatusFlags</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart_adapter.o(i.USART_GetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ISR
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IsTxActive
</UL>

<P><STRONG><a name="[b0]"></a>USART_ISR</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, uart_adapter.o(i.USART_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteByte
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatusFlags
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_adapter.o(i.USART_Initialize)
</UL>
<P><STRONG><a name="[507]"></a>USART_WriteByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_adapter.o(i.USART_WriteByte))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ISR
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>

<P><STRONG><a name="[4fe]"></a>TMR_GetTimerStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timersmanager.o(i.TMR_GetTimerStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_IsTimerActive
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StopTimer
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Task
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_IsTimerReady
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_EnableTimer
</UL>

<P><STRONG><a name="[4ff]"></a>TMR_GetTimerType</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timersmanager.o(i.TMR_GetTimerType))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StopTimer
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Task
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_EnableTimer
</UL>

<P><STRONG><a name="[4fc]"></a>TMR_SetTimerStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timersmanager.o(i.TMR_SetTimerStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StopTimer
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_AllocateTimer
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Task
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_EnableTimer
</UL>

<P><STRONG><a name="[504]"></a>TMR_SetTimerType</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timersmanager.o(i.TMR_SetTimerType))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StartTimer
</UL>

<P><STRONG><a name="[3f6]"></a>AES_128_CMAC_Generate_Subkey</STRONG> (Thumb, 132 bytes, Stack size 88 bytes, seclib.o(i.AES_128_CMAC_Generate_Subkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = AES_128_CMAC_Generate_Subkey &rArr; AES_128_Encrypt &rArr; sw_Aes128 &rArr; AES_InverseMixColumn
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_128_Encrypt
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecLib_Xor128
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecLib_LeftShiftOneBit
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_128_CMAC_LsbFirstInput
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_128_CMAC
</UL>

<P><STRONG><a name="[4e2]"></a>SHA256_hash_n</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, seclib.o(i.SHA256_hash_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_sha256_hash_n
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_HashUpdate
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_HashFinish
</UL>

<P><STRONG><a name="[3f9]"></a>SecLib_LeftShiftOneBit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, seclib.o(i.SecLib_LeftShiftOneBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SecLib_LeftShiftOneBit
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_128_CMAC_Generate_Subkey
</UL>

<P><STRONG><a name="[3f8]"></a>SecLib_Padding</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, seclib.o(i.SecLib_Padding))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SecLib_Padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_128_CMAC_LsbFirstInput
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_128_CMAC
</UL>

<P><STRONG><a name="[3f7]"></a>SecLib_Xor128</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, seclib.o(i.SecLib_Xor128))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SecLib_Xor128
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_128_CMAC_LsbFirstInput
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_128_CMAC
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_128_CMAC_Generate_Subkey
</UL>

<P><STRONG><a name="[12b]"></a>Host_Task</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ble_host_tasks.o(i.Host_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = Host_Task &rArr; Host_TaskHandler &rArr; Host_MsgHandler &rArr; InternalGap_HandleSmCheckResult &rArr; gap_cm_signatureVerificationComplete &rArr; handleVerifiedSignedWriteCommand &rArr; DevDb_SetPeerSignCounter &rArr; App_NvmWrite &rArr; NvSaveOnIdle &rArr; __NvSaveOnIdle &rArr; NvAddSaveRequestToQueue &rArr; NvProcessFirstSaveInQueue &rArr;  NvAddSaveRequestToQueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_TaskHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_host_tasks.o(.data)
</UL>
<P><STRONG><a name="[42e]"></a>BleConnManager_GapCommonConfig</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ble_conn_manager.o(i.BleConnManager_GapCommonConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = BleConnManager_GapCommonConfig &rArr; Gap_ReadPublicDeviceAddress &rArr; MEM_BufferAllocWithId &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_ReadPublicDeviceAddress
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_LeSetPhy
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleConnManager_GapPeripheralConfig
</UL>

<P><STRONG><a name="[430]"></a>BleConnManager_MCUInfoToSmpKeys</STRONG> (Thumb, 250 bytes, Stack size 56 bytes, ble_conn_manager.o(i.BleConnManager_MCUInfoToSmpKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = BleConnManager_MCUInfoToSmpKeys &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Hash
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_GetMCUUid
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleConnManager_GenericEvent
</UL>

<P><STRONG><a name="[12c]"></a>ControllerTask</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ble_controller_task.o(i.ControllerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = ControllerTask &rArr; Controller_TaskHandler &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_TaskHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_controller_task.o(.data)
</UL>
<P><STRONG><a name="[3fa]"></a>AppIdle_TaskInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, applmain.o(i.AppIdle_TaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AppIdle_TaskInit &rArr; OSA_TaskCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;panic
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_TaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[a2]"></a>App_AdvertisingCallback</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, applmain.o(i.App_AdvertisingCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = App_AdvertisingCallback &rArr; MEM_BufferAllocWithId &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddTailMsg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> applmain.o(i.App_StartAdvertising)
</UL>
<P><STRONG><a name="[a1]"></a>App_ConnectionCallback</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, applmain.o(i.App_ConnectionCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = App_ConnectionCallback &rArr; MEM_BufferAllocWithId &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddTailMsg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> applmain.o(i.App_StartAdvertising)
</UL>
<P><STRONG><a name="[a0]"></a>App_GattServerCallback</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, applmain.o(i.App_GattServerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = App_GattServerCallback &rArr; MEM_BufferAllocWithId &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddTailMsg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> applmain.o(i.App_RegisterGattServerCallback)
</UL>
<P><STRONG><a name="[b4]"></a>App_GenericCallback</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, applmain.o(i.App_GenericCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = App_GenericCallback &rArr; MEM_BufferAllocWithId &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddTailMsg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> applmain.o(i.main_task)
</UL>
<P><STRONG><a name="[3fd]"></a>App_HandleHostMessageInput</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, applmain.o(i.App_HandleHostMessageInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 844 + Unknown Stack Size
<LI>Call Chain = App_HandleHostMessageInput &rArr; BleApp_GenericCallback &rArr; BleApp_Config &rArr; mible_server_miservice_init &rArr; Log_Printf &rArr; Serial_AsyncWrite &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_GenericCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Thread
</UL>

<P><STRONG><a name="[12d]"></a>App_Idle_Task</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, applmain.o(i.App_Idle_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = App_Idle_Task &rArr; NvIdle &rArr; __NvIdle &rArr; __NvTimerTick &rArr; NvAddSaveRequestToQueue &rArr; NvProcessFirstSaveInQueue &rArr;  NvAddSaveRequestToQueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvIdle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> applmain.o(.data)
</UL>
<P><STRONG><a name="[b2]"></a>App_KeyboardCallBack</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, applmain.o(i.App_KeyboardCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = App_KeyboardCallBack &rArr; BleApp_HandleKeys &rArr; BleApp_Start &rArr; Log_Hexdump &rArr; Serial_PrintHex &rArr; Serial_SyncWrite &rArr; Serial_AsyncWrite &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_HandleKeys
</UL>
<BR>[Address Reference Count : 1]<UL><LI> applmain.o(i.main_task)
</UL>
<P><STRONG><a name="[406]"></a>App_Thread</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, applmain.o(i.App_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 868 + Unknown Stack Size
<LI>Call Chain = App_Thread &rArr; App_HandleHostMessageInput &rArr; BleApp_GenericCallback &rArr; BleApp_Config &rArr; mible_server_miservice_init &rArr; Log_Printf &rArr; Serial_AsyncWrite &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventWait
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListRemoveHeadMsg
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferFree
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_HandleHostMessageInput
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[b3]"></a>BLE_SignalFromISRCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, applmain.o(i.BLE_SignalFromISRCallback))
<BR>[Address Reference Count : 1]<UL><LI> applmain.o(i.main_task)
</UL>
<P><STRONG><a name="[45b]"></a>FLASH_BusyStatusCheck</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fsl_flash.o(i.FLASH_BusyStatusCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_BusyStatusCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBusyStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
</UL>

<P><STRONG><a name="[45c]"></a>FLASH_GetBusyStatusFlags</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_flash.o(i.FLASH_GetBusyStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BusyStatusCheck
</UL>

<P><STRONG><a name="[461]"></a>FLASH_StatusCheck</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, fsl_flash.o(i.FLASH_StatusCheck))
<BR><BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
</UL>

<P><STRONG><a name="[44f]"></a>CTIMER_ClearStatusFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_ctimer.o(i.CTIMER_ClearStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>

<P><STRONG><a name="[44c]"></a>CLOCK_Get32KFreq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_Get32KFreq))
<BR><BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetWdtFreq
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>

<P><STRONG><a name="[447]"></a>CLOCK_GetAhbClkFreq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetAhbClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_GetAhbClkFreq &rArr; CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetApbClkFreq
</UL>

<P><STRONG><a name="[449]"></a>CLOCK_GetApbClkFreq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetApbClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLOCK_GetApbClkFreq &rArr; CLOCK_GetAhbClkFreq &rArr; CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAhbClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetWdtFreq
</UL>

<P><STRONG><a name="[448]"></a>CLOCK_GetCoreSysClkFreq</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetCoreSysClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetXinFreq
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetRco32MFreq
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_Get32KFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAhbClkFreq
</UL>

<P><STRONG><a name="[44a]"></a>CLOCK_GetRco32MFreq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetRco32MFreq))
<BR><BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>

<P><STRONG><a name="[44d]"></a>CLOCK_GetWdtFreq</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetWdtFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLOCK_GetWdtFreq &rArr; CLOCK_GetApbClkFreq &rArr; CLOCK_GetAhbClkFreq &rArr; CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetApbClkFreq
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_Get32KFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[44b]"></a>CLOCK_GetXinFreq</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetXinFreq))
<BR><BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>

<P><STRONG><a name="[440]"></a>Clk32KConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_clock.o(i.Clk32KConfig))
<BR><BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
</UL>

<P><STRONG><a name="[443]"></a>ClkBleConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_clock.o(i.ClkBleConfig))
<BR><BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
</UL>

<P><STRONG><a name="[441]"></a>ClkSysConfig</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fsl_clock.o(i.ClkSysConfig))
<BR><BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
</UL>

<P><STRONG><a name="[442]"></a>ClkWdtConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_clock.o(i.ClkWdtConfig))
<BR><BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
</UL>

<P><STRONG><a name="[444]"></a>ClkXTALConfig</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, fsl_clock.o(i.ClkXTALConfig))
<BR><BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
</UL>

<P><STRONG><a name="[445]"></a>DisableGlobalIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_clock.o(i.DisableGlobalIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[446]"></a>EnableGlobalIRQ</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_clock.o(i.EnableGlobalIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[438]"></a>CALIB_CalibOSC32M</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fsl_calibration.o(i.CALIB_CalibOSC32M))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CALIB_CalibOSC32M &rArr; POWER_WritePmuCtrl1
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_WritePmuCtrl1
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIB_SystemCalib
</UL>

<P><STRONG><a name="[43d]"></a>CALIB_CalibRC</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, fsl_calibration.o(i.CALIB_CalibRC))
<BR><BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIB_SystemCalib
</UL>

<P><STRONG><a name="[43a]"></a>CALIB_CalibRCO32K</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, fsl_calibration.o(i.CALIB_CalibRCO32K))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CALIB_CalibRCO32K &rArr; POWER_WritePmuCtrl1
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_WritePmuCtrl1
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIB_SystemCalib
</UL>

<P><STRONG><a name="[43b]"></a>CALIB_CalibXTAL</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, fsl_calibration.o(i.CALIB_CalibXTAL))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CALIB_CalibXTAL &rArr; POWER_WritePmuCtrl1
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_WritePmuCtrl1
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIB_SystemCalib
</UL>

<P><STRONG><a name="[43e]"></a>CALIB_PowerOn</STRONG> (Thumb, 204 bytes, Stack size 0 bytes, fsl_calibration.o(i.CALIB_PowerOn))
<BR><BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIB_SystemCalib
</UL>

<P><STRONG><a name="[466]"></a>FLEXCOMM_PeripheralIsPresent</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, fsl_flexcomm.o(i.FLEXCOMM_PeripheralIsPresent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLEXCOMM_PeripheralIsPresent
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_SetPeriph
</UL>

<P><STRONG><a name="[4d6]"></a>DisableGlobalIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_power.o(i.DisableGlobalIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_EnablePD
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_DisablePD
</UL>

<P><STRONG><a name="[4d7]"></a>EnableGlobalIRQ</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_power.o(i.EnableGlobalIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_EnablePD
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_DisablePD
</UL>

<P><STRONG><a name="[3ee]"></a>ADC_Enable</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fsl_adc.o(i.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetChannelConversionResult
</UL>

<P><STRONG><a name="[3ed]"></a>ADC_GetChannelConversionResult</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, fsl_adc.o(i.ADC_GetChannelConversionResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADC_GetChannelConversionResult &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetVinnCalibrationResult
</UL>

<P><STRONG><a name="[3f5]"></a>ADC_GetClockIndex</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_adc.o(i.ADC_GetClockIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_GetClockIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetSdConfig
</UL>

<P><STRONG><a name="[3ef]"></a>ADC_GetInstance</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fsl_adc.o(i.ADC_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = ADC_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[450]"></a>DbgConsole_ConvertFloatRadixNumToString</STRONG> (Thumb, 570 bytes, Stack size 144 bytes, fsl_debug_console.o(i.DbgConsole_ConvertFloatRadixNumToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_modf
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
</UL>

<P><STRONG><a name="[456]"></a>DbgConsole_ConvertRadixNumToString</STRONG> (Thumb, 332 bytes, Stack size 88 bytes, fsl_debug_console.o(i.DbgConsole_ConvertRadixNumToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = DbgConsole_ConvertRadixNumToString &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
</UL>

<P><STRONG><a name="[458]"></a>DbgConsole_PrintfFormattedData</STRONG> (Thumb, 1580 bytes, Stack size 160 bytes, fsl_debug_console.o(i.DbgConsole_PrintfFormattedData))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfPaddingCharacter
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertRadixNumToString
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>

<P><STRONG><a name="[459]"></a>DbgConsole_PrintfPaddingCharacter</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, fsl_debug_console.o(i.DbgConsole_PrintfPaddingCharacter))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DbgConsole_PrintfPaddingCharacter
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
</UL>

<P><STRONG><a name="[525]"></a>aes_ecb_encrypt</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ccm.o(i.aes_ecb_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = aes_ecb_encrypt &rArr; mible_aes128_encrypt &rArr; AES_128_Encrypt &rArr; sw_Aes128 &rArr; AES_InverseMixColumn
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_aes128_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
</UL>

<P><STRONG><a name="[524]"></a>ccm_auth_crypt</STRONG> (Thumb, 814 bytes, Stack size 112 bytes, ccm.o(i.ccm_auth_crypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = ccm_auth_crypt &rArr; aes_ecb_encrypt &rArr; mible_aes128_encrypt &rArr; AES_128_Encrypt &rArr; sw_Aes128 &rArr; AES_InverseMixColumn
</UL>
<BR>[Calls]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ecb_encrypt
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_encrypt_and_tag
</UL>

<P><STRONG><a name="[535]"></a>calc_objs_bytes</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mible_beacon.o(i.calc_objs_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = calc_objs_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibeacon_data_set
</UL>

<P><STRONG><a name="[52b]"></a>event_encode</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mible_beacon.o(i.event_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = event_encode &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibeacon_data_set
</UL>

<P><STRONG><a name="[b5]"></a>mibeacon_timer_handler</STRONG> (Thumb, 160 bytes, Stack size 88 bytes, mible_beacon.o(i.mibeacon_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = mibeacon_timer_handler &rArr; mible_manu_data_set &rArr; mibeacon_data_set &rArr; aes_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; aes_ecb_encrypt &rArr; mible_aes128_encrypt &rArr; AES_128_Encrypt &rArr; sw_Aes128 &rArr; AES_InverseMixColumn
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Printf
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Hexdump
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dequeue
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_manu_data_set
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_timer_stop
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_timer_start
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_gap_adv_data_set
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mible_beacon.o(i.mibeacon_init)
</UL>
<P><STRONG><a name="[527]"></a>crypt</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, mible_crypto.o(i.crypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = crypt
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_mix_2
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_mix_1
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_internal_encrypt
</UL>

<P><STRONG><a name="[529]"></a>crypt_init</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, mible_crypto.o(i.crypt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = crypt_init
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_mix_2
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_mix_1
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_internal_encrypt
</UL>

<P><STRONG><a name="[528]"></a>swap_bytes</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mible_crypto.o(i.swap_bytes))
<BR><BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypt_init
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypt
</UL>

<P><STRONG><a name="[54f]"></a>mible_server_bonding_handler</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, mible_server.o(i.mible_server_bonding_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = mible_server_bonding_handler &rArr; Log_Hexdump &rArr; Serial_PrintHex &rArr; Serial_SyncWrite &rArr; Serial_AsyncWrite &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Printf
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Hexdump
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_bonding_evt_callback
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_FSM_set
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_timer_stop
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_record_write
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_record_create
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_gatts_value_set
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_server_encrypt
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_wait_t2_ack_handler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_wait_did_handler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_wait_cloud_ack_handler
</UL>

<P><STRONG><a name="[bd]"></a>mible_server_init_handler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mible_server.o(i.mible_server_init_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = mible_server_init_handler &rArr; Log_Printf &rArr; Serial_AsyncWrite &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Printf
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_FSM_set
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_server_arch_service_init_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mible_server.o(.constdata)
</UL>
<P><STRONG><a name="[558]"></a>mible_server_isValid_did</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, mible_server.o(i.mible_server_isValid_did))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_wait_t2_ack_handler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_wait_did_handler
</UL>

<P><STRONG><a name="[555]"></a>mible_server_login_succ_handler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mible_server.o(i.mible_server_login_succ_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = mible_server_login_succ_handler &rArr; mible_bonding_evt_callback &rArr; Log_Printf &rArr; Serial_AsyncWrite &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Printf
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_bonding_evt_callback
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_FSM_set
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_wait_login_ack_handler
</UL>

<P><STRONG><a name="[be]"></a>mible_server_start_handler</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, mible_server.o(i.mible_server_start_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = mible_server_start_handler &rArr; Log_Printf &rArr; Serial_AsyncWrite &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Printf
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_FSM_set
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_rand_num_generator
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_gatts_notify_or_indicate
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_std_server_encrypt
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mible_server.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>mible_server_timeout_handler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, mible_server.o(i.mible_server_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = mible_server_timeout_handler &rArr; mible_bonding_evt_callback &rArr; Log_Printf &rArr; Serial_AsyncWrite &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Printf
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_bonding_evt_callback
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_FSM_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mible_server.o(i.mible_server_init_handler)
</UL>
<P><STRONG><a name="[c3]"></a>mible_server_wait_cloud_ack_handler</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, mible_server.o(i.mible_server_wait_cloud_ack_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = mible_server_wait_cloud_ack_handler &rArr; mible_server_bonding_handler &rArr; Log_Hexdump &rArr; Serial_PrintHex &rArr; Serial_SyncWrite &rArr; Serial_AsyncWrite &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Printf
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_FSM_set
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_internal_encrypt
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_bonding_handler
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mible_server.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>mible_server_wait_did_handler</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, mible_server.o(i.mible_server_wait_did_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = mible_server_wait_did_handler &rArr; mible_server_bonding_handler &rArr; Log_Hexdump &rArr; Serial_PrintHex &rArr; Serial_SyncWrite &rArr; Serial_AsyncWrite &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Printf
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_FSM_set
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_internal_encrypt
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_isValid_did
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_bonding_handler
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mible_server.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>mible_server_wait_login_ack_handler</STRONG> (Thumb, 334 bytes, Stack size 48 bytes, mible_server.o(i.mible_server_wait_login_ack_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = mible_server_wait_login_ack_handler &rArr; mible_server_login_succ_handler &rArr; mible_bonding_evt_callback &rArr; Log_Printf &rArr; Serial_AsyncWrite &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Printf
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_FSM_set
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_internal_encrypt
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_gatts_notify_or_indicate
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_login_succ_handler
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mible_server.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>mible_server_wait_t1_handler</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, mible_server.o(i.mible_server_wait_t1_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = mible_server_wait_t1_handler &rArr; Log_Printf &rArr; Serial_AsyncWrite &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Printf
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_FSM_set
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_mix_2
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_mix_1
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_gatts_notify_or_indicate
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mible_server.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>mible_server_wait_t2_ack_handler</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, mible_server.o(i.mible_server_wait_t2_ack_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = mible_server_wait_t2_ack_handler &rArr; mible_server_bonding_handler &rArr; Log_Hexdump &rArr; Serial_PrintHex &rArr; Serial_SyncWrite &rArr; Serial_AsyncWrite &rArr; Serial_WriteInternal &rArr; USART_SendData &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Printf
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_FSM_set
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_internal_encrypt
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_isValid_did
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mible_server_bonding_handler
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mible_server.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>L2caRm_LinkConnectionTimerCallback</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, l2ca_resource_manager.o(.text.L2caRm_LinkConnectionTimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = L2caRm_LinkConnectionTimerCallback &rArr; L2caRm_DisconnectChannel &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2caRm_DisconnectChannel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2ca_resource_manager.o(.text.L2caRm_ConnectLePsm)
</UL>
<P><STRONG><a name="[19e]"></a>Hci_RecvFragmentOfPacket</STRONG> (Thumb, 232 bytes, Stack size unknown bytes, hci_commands.o(.text.Hci_RecvFragmentOfPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = Hci_RecvFragmentOfPacket &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferFree
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_HciRecv
</UL>

<P><STRONG><a name="[1f0]"></a>gattDb_getCharacteristicEndIndex</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, gatt_db_app.o(.text.gattDb_getCharacteristicEndIndex))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_FindCccdHandleForCharValueHandle
</UL>

<P><STRONG><a name="[f0]"></a>llm_enc_req_handler</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, llm_task.o(.text.llm_enc_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llm_enc_req_handler &rArr; llm_encryption_start &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_encryption_start
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_task.o(.rodata.llm_default_state)
</UL>
<P><STRONG><a name="[c9]"></a>llc_llcp_rsp_to_ind_handler</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, llc_task.o(.text.llc_llcp_rsp_to_ind_handler))
<BR><BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata.llc_default_state)
</UL>
<P><STRONG><a name="[c6]"></a>llc_link_sup_to_ind_handler</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, llc_task.o(.text.llc_link_sup_to_ind_handler))
<BR><BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata.llc_default_state)
</UL>
<P><STRONG><a name="[d4]"></a>llc_data_ind_handler</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, llc_task.o(.text.llc_data_ind_handler))
<BR><BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_buf_rx_free (via Veneer)
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata.llc_default_state)
</UL>
<P><STRONG><a name="[d1]"></a>llc_llcp_recv_ind_handler</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, llc_task.o(.text.llc_llcp_recv_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llc_llcp_recv_ind_handler &rArr; llc_llcp_recv_handler &rArr; llc_llcp_send &rArr; lld_evt_schedule_next &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_recv_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata.llc_default_state)
</UL>
<P><STRONG><a name="[cf]"></a>llc_phy_upd_req_ind_handler</STRONG> (Thumb, 856 bytes, Stack size unknown bytes, llc_task.o(.text.llc_phy_upd_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llc_phy_upd_req_ind_handler &rArr; llc_llcp_phy_req_pdu_send &rArr; lld_evt_schedule_next &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_get_default_phy (via Veneer)
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_get_phys (via Veneer)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode (via Veneer)
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_clear_operation_ptr (via Veneer)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_phy_req_pdu_send
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_phy_upd_ind_pdu_send
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_phy_update_req
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_instant_get
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_phy_update_finished
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata.llc_default_state)
</UL>
<P><STRONG><a name="[ce]"></a>llc_chmap_update_req_ind_handler</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, llc_task.o(.text.llc_chmap_update_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llc_chmap_update_req_ind_handler &rArr; llc_llcp_ch_map_update_pdu_send &rArr; lld_evt_schedule_next &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_ch_assess_get_current_ch_map (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_ch_map_update_pdu_send
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata.llc_default_state)
</UL>
<P><STRONG><a name="[cd]"></a>llc_con_upd_req_ind_handler</STRONG> (Thumb, 536 bytes, Stack size unknown bytes, llc_task.o(.text.llc_con_upd_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llc_con_upd_req_ind_handler &rArr; llc_llcp_con_param_req_pdu_send &rArr; lld_evt_schedule_next &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_check_evt_mask (via Veneer)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode (via Veneer)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_update_req
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_con_param_req_pdu_send
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_param_req
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_con_update_pdu_send
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_update_after_param_req
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata.llc_default_state)
</UL>
<P><STRONG><a name="[cc]"></a>llc_length_req_ind_handler</STRONG> (Thumb, 136 bytes, Stack size unknown bytes, llc_task.o(.text.llc_length_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llc_length_req_ind_handler &rArr; llc_llcp_length_req_pdu_send &rArr; lld_evt_schedule_next &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_clear_operation_ptr (via Veneer)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_length_req_pdu_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata.llc_default_state)
</UL>
<P><STRONG><a name="[ca]"></a>llc_chnl_assess_timer_handler</STRONG> (Thumb, 140 bytes, Stack size unknown bytes, llc_task.o(.text.llc_chnl_assess_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = llc_chnl_assess_timer_handler &rArr; llc_ch_assess_get_local_ch_map &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_get_channel_map (via Veneer)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send_basic (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_ch_assess_reass_ch
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_ch_assess_get_local_ch_map
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata.llc_default_state)
</UL>
<P><STRONG><a name="[c7]"></a>llc_auth_payl_nearly_to_ind_handler</STRONG> (Thumb, 136 bytes, Stack size unknown bytes, llc_task.o(.text.llc_auth_payl_nearly_to_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llc_auth_payl_nearly_to_ind_handler &rArr; llc_llcp_ping_req_pdu_send &rArr; lld_evt_schedule_next &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set (via Veneer)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_active (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_ping_req_pdu_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata.llc_default_state)
</UL>
<P><STRONG><a name="[c5]"></a>lld_stop_ind_handler</STRONG> (Thumb, 372 bytes, Stack size unknown bytes, llc_task.o(.text.lld_stop_ind_handler))
<BR><BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_check_evt_mask (via Veneer)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_version_rd_event_send (via Veneer)
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_feats_rd_event_send (via Veneer)
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_discon_event_complete_send (via Veneer)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_enc_key_ref_comp_evt_send (via Veneer)
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_enc_change_evt_send (via Veneer)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_phy_update_complete_send
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_update_complete_send
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata.llc_default_state)
</UL>
<P><STRONG><a name="[cb]"></a>llc_enc_mgt_ind_handler</STRONG> (Thumb, 824 bytes, Stack size unknown bytes, llc_task.o(.text.llc_enc_mgt_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llc_enc_mgt_ind_handler &rArr; llc_llcp_terminate_ind_pdu_send &rArr; lld_evt_schedule_next &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_check_evt_mask (via Veneer)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode (via Veneer)
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_clear_operation_ptr (via Veneer)
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_ltk_req_send (via Veneer)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_terminate_ind_pdu_send
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_enc_req_pdu_send
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_start_enc_rsp_pdu_send
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_pause_enc_req_pdu_send
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_pause_enc_rsp_pdu_send
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_reject_ind_pdu_send
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_start_enc_req_pdu_send
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_enc_rsp_pdu_send
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata.llc_default_state)
</UL>
<P><STRONG><a name="[13d]"></a>AES_AddKeyByteSubShiftKeyExpand</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, SW_AES128.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AES_AddKeyByteSubShiftKeyExpand &rArr; AES_ExpandKey
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_ExpandKey
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_Aes128
</UL>

<P><STRONG><a name="[13e]"></a>AES_ExpandKey</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, SW_AES128.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AES_ExpandKey
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_Aes128
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_AddKeyByteSubShiftKeyExpand
</UL>

<P><STRONG><a name="[145]"></a>AES_InverseMixColumn</STRONG> (Thumb, 312 bytes, Stack size 44 bytes, SW_AES128.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = AES_InverseMixColumn
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_Aes128
</UL>

<P><STRONG><a name="[144]"></a>AES_InverseShiftSubBytes</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, SW_AES128.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_Aes128
</UL>

<P><STRONG><a name="[143]"></a>AES_MixColumn</STRONG> (Thumb, 336 bytes, Stack size 16 bytes, SW_AES128.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AES_MixColumn
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_Aes128
</UL>

<P><STRONG><a name="[2de]"></a>Sm_ConnHandleToDeviceHandle</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, sm_core.o(.text.Sm_ConnHandleToDeviceHandle))
<BR><BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_GetDeviceId
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_HciCbEventHandler
</UL>

<P><STRONG><a name="[313]"></a>isControlPointHandle</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, gatt_server.o(.text.isControlPointHandle))
<BR><BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleVerifiedSignedWriteCommand
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientWriteCommand
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientWriteRequest
</UL>

<P><STRONG><a name="[78]"></a>handleUnsupportedOpcode</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, gatt_server.o(.text.handleUnsupportedOpcode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = handleUnsupportedOpcode &rArr; AttServer_SendErrorResponse &rArr; att_SendData &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttServer_SendErrorResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.text.InternalGattServer_Init)
</UL>
<P><STRONG><a name="[312]"></a>validateAttWriteParams</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, gatt_server.o(.text.validateAttWriteParams))
<BR><BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_GetIndexOfHandle
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAttributeAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientWriteCommand
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientWriteRequest
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleClientSignedWriteCommand
</UL>

<P><STRONG><a name="[76]"></a>handleClientSignedWriteCommand</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, gatt_server.o(.text.handleClientSignedWriteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = handleClientSignedWriteCommand &rArr; gap_cm_handleSignedWriteCommand &rArr; gap_cm_checkNextCsrk &rArr; verifySignature &rArr; Sm_SendCmd &rArr; SmStates_RunStateMachine &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_handleSignedWriteCommand
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateAttWriteParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.text.InternalGattServer_Init)
</UL>
<P><STRONG><a name="[74]"></a>handleClientWriteRequest</STRONG> (Thumb, 252 bytes, Stack size unknown bytes, gatt_server.o(.text.handleClientWriteRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = handleClientWriteRequest &rArr; DevDb_SaveCccd &rArr; App_NvmWrite &rArr; NvSaveOnIdle &rArr; __NvSaveOnIdle &rArr; NvAddSaveRequestToQueue &rArr; NvProcessFirstSaveInQueue &rArr;  NvAddSaveRequestToQueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_GetIndexOfHandle
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttServer_SendWriteResponse
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_SaveCccd
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttWrite
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttServer_SendErrorResponse
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateAttWriteParams
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isControlPointHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.text.InternalGattServer_Init)
</UL>
<P><STRONG><a name="[73]"></a>handleClientReadByGroupTypeRequest</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, gatt_server.o(.text.handleClientReadByGroupTypeRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = handleClientReadByGroupTypeRequest &rArr; AttServer_SendReadByGroupTypeResponse &rArr; att_SendData &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferFree
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttServer_SendReadByGroupTypeResponse
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttReadByGroupType
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttServer_SendErrorResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.text.InternalGattServer_Init)
</UL>
<P><STRONG><a name="[72]"></a>handleClientReadMultipleRequest</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, gatt_server.o(.text.handleClientReadMultipleRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = handleClientReadMultipleRequest &rArr; AttServer_SendReadMultipleResponse &rArr; att_SendData &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferFree
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttServer_SendReadMultipleResponse
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttReadMultiple
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttServer_SendErrorResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.text.InternalGattServer_Init)
</UL>
<P><STRONG><a name="[71]"></a>handleClientReadBlobRequest</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, gatt_server.o(.text.handleClientReadBlobRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = handleClientReadBlobRequest &rArr; AttServer_SendReadBlobResponse &rArr; att_SendData &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferFree
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttServer_SendReadBlobResponse
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttReadBlob
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttServer_SendErrorResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.text.InternalGattServer_Init)
</UL>
<P><STRONG><a name="[70]"></a>handleClientReadRequest</STRONG> (Thumb, 148 bytes, Stack size unknown bytes, gatt_server.o(.text.handleClientReadRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = handleClientReadRequest &rArr; AttServer_SendReadResponse &rArr; att_SendData &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferFree
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttServer_SendReadResponse
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttRead
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttServer_SendErrorResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.text.InternalGattServer_Init)
</UL>
<P><STRONG><a name="[6f]"></a>handleClientReadByTypeRequest</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, gatt_server.o(.text.handleClientReadByTypeRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = handleClientReadByTypeRequest &rArr; AttServer_SendReadByTypeResponse &rArr; att_SendData &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferFree
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttServer_SendReadByTypeResponse
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttReadByType
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttServer_SendErrorResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.text.InternalGattServer_Init)
</UL>
<P><STRONG><a name="[6e]"></a>handleClientFindByTypeValueRequest</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, gatt_server.o(.text.handleClientFindByTypeValueRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = handleClientFindByTypeValueRequest &rArr; AttServer_SendFindByTypeValueResponse &rArr; att_SendData &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferFree
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttServer_SendFindByTypeValueResponse
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttFindByTypeValue
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttServer_SendErrorResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.text.InternalGattServer_Init)
</UL>
<P><STRONG><a name="[6d]"></a>handleClientFindInformationRequest</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, gatt_server.o(.text.handleClientFindInformationRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = handleClientFindInformationRequest &rArr; AttServer_SendFindInformationResponse &rArr; att_SendData &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferFree
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttServer_SendFindInformationResponse
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttFindInformation
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttServer_SendErrorResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.text.InternalGattServer_Init)
</UL>
<P><STRONG><a name="[6c]"></a>handleClientExchangeMtuRequest</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, gatt_server.o(.text.handleClientExchangeMtuRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = handleClientExchangeMtuRequest &rArr; AttServer_SendExchangeMtuResponse &rArr; att_SendData &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_SetMtu
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttServer_SendExchangeMtuResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.text.InternalGattServer_Init)
</UL>
<P><STRONG><a name="[277]"></a>handleSendNotificationIndication</STRONG> (Thumb, 228 bytes, Stack size unknown bytes, gatt_server.o(.text.handleSendNotificationIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = handleSendNotificationIndication &rArr; AttServer_SendHandleValueIndication &rArr; att_SendData &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferFree
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_FindCccdHandleForCharValueHandle
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_CheckIndicationStatus
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_CheckNotificationStatus
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttServer_SendHandleValueIndication
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttServer_SendHandleValueNotification
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttPrepareNotificationIndication
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGattServer_SendIndication
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGattServer_SendNotification
</UL>

<P><STRONG><a name="[77]"></a>handleClientHandleValueConfirmation</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, gatt_server.o(.text.handleClientHandleValueConfirmation))
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.text.InternalGattServer_Init)
</UL>
<P><STRONG><a name="[75]"></a>handleClientWriteCommand</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, gatt_server.o(.text.handleClientWriteCommand))
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttWriteCommand
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateAttWriteParams
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isControlPointHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.text.InternalGattServer_Init)
</UL>
<P><STRONG><a name="[278]"></a>handleSendInstantNotificationIndication</STRONG> (Thumb, 152 bytes, Stack size unknown bytes, gatt_server.o(.text.handleSendInstantNotificationIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = handleSendInstantNotificationIndication &rArr; AttServer_SendHandleValueIndication &rArr; att_SendData &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferFree
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttServer_SendHandleValueIndication
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttServer_SendHandleValueNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGattServer_SendInstantIndication
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGattServer_SendInstantNotification
</UL>

<P><STRONG><a name="[306]"></a>findFlagsAdValue</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, gap.o(.text.findFlagsAdValue))
<BR><BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_discoveryFilterMatch
</UL>

<P><STRONG><a name="[65]"></a>privacyTimeout</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, gap.o(.text.privacyTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = privacyTimeout &rArr; MEM_BufferAllocWithId &rArr; ListRemoveHead &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddTailMsg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAllocWithId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap.o(.text.EnableHostPrivacyTimer)
</UL>
<P><STRONG><a name="[2fa]"></a>gap_autoConnectCheckNextIrk</STRONG> (Thumb, 140 bytes, Stack size unknown bytes, gap.o(.text.gap_autoConnectCheckNextIrk))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = gap_autoConnectCheckNextIrk &rArr; Sm_SendCmd &rArr; SmStates_RunStateMachine &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_GetBondedDeviceIrk
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_autoConnectIrkCheckComplete
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_checkForAutoConnect
</UL>

<P><STRONG><a name="[24e]"></a>deriveSmPairingParamsFromGapParams.isra.1</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, gap.o(.text.deriveSmPairingParamsFromGapParams.isra.1))
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_AcceptPairingRequest
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_DefaultPair
</UL>

<P><STRONG><a name="[267]"></a>terminatePairing</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, gap.o(.text.terminatePairing))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = terminatePairing &rArr; Sm_SendCmd &rArr; SmStates_RunStateMachine &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerGenericCallback
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_RejectKeyExchangeRequest
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_RejectPairingRequest
</UL>

<P><STRONG><a name="[6b]"></a>ldmTimeout</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, gap.o(.text.ldmTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ldmTimeout &rArr; TMR_FreeTimer &rArr; TMR_StopTimer &rArr; StackTimer_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_FreeTimer
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeSetAdvertisingDisable
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerAdvertisingCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap.o(.text.InternalGap_StartAdvertising)
</UL>
<P><STRONG><a name="[1c0]"></a>EnableHostPrivacyTimer</STRONG> (Thumb, 120 bytes, Stack size unknown bytes, gap.o(.text.EnableHostPrivacyTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = EnableHostPrivacyTimer &rArr;  InternalGap_PrivacyCallbackHandler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_IsTimerActive
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StopTimer
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_FreeTimer
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_AllocateTimer
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StartLowPowerTimer
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_IsTimerReady
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_PrivacyCallbackHandler
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerGenericCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_EnableHostPrivacy
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_StopAdvertising
</UL>

<P><STRONG><a name="[2e7]"></a>getGapKeyFlags</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, gap_sm_cb.o(.text.getGapKeyFlags))
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertPairingParamsSm2Gap
</UL>

<P><STRONG><a name="[2e6]"></a>convertPairingParamsSm2Gap</STRONG> (Thumb, 114 bytes, Stack size unknown bytes, gap_sm_cb.o(.text.convertPairingParamsSm2Gap))
<BR><BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGapKeyFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smCallback
</UL>

<P><STRONG><a name="[1ad]"></a>nvmIsEntryOccupied</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, device_db.o(.text.nvmIsEntryOccupied))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_CheckIfBondedDeviceIsActive
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_GetBondedDeviceSignCounter
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_GetBondedDeviceCsrk
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_LoadBondingInformation
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_SignalDevicePairedAndBonded
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_CheckIfBondedDeviceHasDistributedIrk
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_GetBondedDeviceAddress
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_CheckIfBondedDeviceAddressIsStatic
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_Init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_GetBondedDeviceIrk
</UL>

<P><STRONG><a name="[187]"></a>att_indexForDeviceId</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, att.o(.text.att_indexForDeviceId))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_GetMtu
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_ResponseReceived
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_SendData
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_NotifyDisconnection
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_SetMtu
</UL>

<P><STRONG><a name="[17a]"></a>att_SendData</STRONG> (Thumb, 808 bytes, Stack size unknown bytes, att.o(.text.att_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = att_SendData &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StartTimer
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2ca_SendAttData
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_indexForDeviceId
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttServer_SendHandleValueIndication
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttServer_SendHandleValueNotification
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttServer_SendExchangeMtuResponse
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttServer_SendFindInformationResponse
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttServer_SendFindByTypeValueResponse
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttServer_SendReadByTypeResponse
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttServer_SendReadResponse
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttServer_SendReadBlobResponse
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttServer_SendReadMultipleResponse
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttServer_SendReadByGroupTypeResponse
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttServer_SendWriteResponse
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttServer_SendErrorResponse
</UL>

<P><STRONG><a name="[115]"></a>hci_le_enh_privacy_mgmt_cmd_handler</STRONG> (Thumb, 244 bytes, Stack size unknown bytes, llm_hci.o(.text.hci_le_enh_privacy_mgmt_cmd_handler))
<BR><BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_ral_set_timeout (via Veneer)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_ral_dev_rm (via Veneer)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_ral_dev_add (via Veneer)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_ral_clear (via Veneer)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_ral_force_rpa_renew (via Veneer)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set (via Veneer)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_privacy_mode
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_common_cmd_complete_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata.llm_hci_command_handler_tab)
</UL>
<P><STRONG><a name="[10c]"></a>hci_rd_local_ver_info_cmd_handler</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, llm_hci.o(.text.hci_rd_local_ver_info_cmd_handler))
<BR><BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata.llm_hci_command_handler_tab)
</UL>
<P><STRONG><a name="[10a]"></a>hci_reset_cmd_handler</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, llm_hci.o(.text.hci_reset_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = hci_reset_cmd_handler &rArr; rwip_reset &rArr; rwble_reset &rArr; llm_init &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_common_cmd_complete_send
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata.llm_hci_command_handler_tab)
</UL>
<P><STRONG><a name="[109]"></a>hci_le_test_mode_mngt_cmd_handler</STRONG> (Thumb, 180 bytes, Stack size unknown bytes, llm_hci.o(.text.hci_le_test_mode_mngt_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = hci_le_test_mode_mngt_cmd_handler &rArr; llm_test_mode_start_rx &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_test_stop (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_test_mode_start_rx
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_test_mode_start_tx
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_common_cmd_complete_send
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata.llm_hci_command_handler_tab)
</UL>
<P><STRONG><a name="[103]"></a>hci_le_enc_cmd_handler</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, llm_hci.o(.text.hci_le_enc_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = hci_le_enc_cmd_handler &rArr; llm_encryption_start &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_encryption_start
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata.llm_hci_command_handler_tab)
</UL>
<P><STRONG><a name="[100]"></a>hci_le_set_host_ch_class_cmd_handler</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, llm_hci.o(.text.hci_le_set_host_ch_class_cmd_handler))
<BR><BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_check_map_validity (via Veneer)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set (via Veneer)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_common_cmd_complete_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata.llm_hci_command_handler_tab)
</UL>
<P><STRONG><a name="[fe]"></a>hci_le_create_con_cmd_handler</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, llm_hci.o(.text.hci_le_create_con_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = hci_le_create_con_cmd_handler &rArr; llm_create_con &rArr; lld_con_start &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_common_cmd_status_send (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_create_con
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata.llm_hci_command_handler_tab)
</UL>
<P><STRONG><a name="[fd]"></a>hci_le_set_scan_en_cmd_handler</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, llm_hci.o(.text.hci_le_set_scan_en_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = hci_le_set_scan_en_cmd_handler &rArr; llm_set_scan_en &rArr; lld_scan_start &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_scan_en
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_common_cmd_complete_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata.llm_hci_command_handler_tab)
</UL>
<P><STRONG><a name="[fb]"></a>hci_le_set_scan_rsp_data_cmd_handler</STRONG> (Thumb, 168 bytes, Stack size unknown bytes, llm_hci.o(.text.hci_le_set_scan_rsp_data_cmd_handler))
<BR><BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_scan_rsp_data (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free (via Veneer)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_common_cmd_complete_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata.llm_hci_command_handler_tab)
</UL>
<P><STRONG><a name="[fa]"></a>hci_le_set_adv_en_cmd_handler</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, llm_hci.o(.text.hci_le_set_adv_en_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = hci_le_set_adv_en_cmd_handler &rArr; llm_set_adv_en &rArr; lld_adv_start &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_adv_en
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_common_cmd_complete_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata.llm_hci_command_handler_tab)
</UL>
<P><STRONG><a name="[f9]"></a>hci_le_set_adv_data_cmd_handler</STRONG> (Thumb, 160 bytes, Stack size unknown bytes, llm_hci.o(.text.hci_le_set_adv_data_cmd_handler))
<BR><BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_adv_data (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free (via Veneer)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_common_cmd_complete_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata.llm_hci_command_handler_tab)
</UL>
<P><STRONG><a name="[f7]"></a>hci_le_set_adv_param_cmd_handler</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, llm_hci.o(.text.hci_le_set_adv_param_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = hci_le_set_adv_param_cmd_handler &rArr; llm_set_adv_param &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_adv_param
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_common_cmd_complete_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata.llm_hci_command_handler_tab)
</UL>
<P><STRONG><a name="[36b]"></a>llc_llcp_send</STRONG> (Thumb, 160 bytes, Stack size unknown bytes, llc_llcp.o(.text.llc_llcp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llc_llcp_send &rArr; lld_evt_schedule_next &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_enc_req_pdu_send
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_reject_ind_pdu_send
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_enc_rsp_pdu_send
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_recv_handler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_phy_req_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_length_rsp_handler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_phy_rsp_handler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_feats_rsp_handler
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pause_enc_rsp_handler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_start_enc_rsp_handler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_length_req_handler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_vers_ind_handler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_feats_req_handler
</UL>

<P><STRONG><a name="[e8]"></a>llcp_ping_rsp_handler</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, llc_llcp.o(.text.llcp_ping_rsp_handler))
<BR><BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata.llcp_pdu_handler)
</UL>
<P><STRONG><a name="[dd]"></a>llcp_feats_req_handler</STRONG> (Thumb, 260 bytes, Stack size unknown bytes, llc_llcp.o(.text.llcp_feats_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llcp_feats_req_handler &rArr; llc_llcp_send &rArr; lld_evt_schedule_next &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_get_supp_features (via Veneer)
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata.llcp_pdu_handler)
</UL>
<P><STRONG><a name="[d9]"></a>llcp_enc_rsp_handler</STRONG> (Thumb, 268 bytes, Stack size unknown bytes, llc_llcp.o(.text.llcp_enc_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llcp_enc_rsp_handler &rArr; ke_msg_send &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata.llcp_pdu_handler)
</UL>
<P><STRONG><a name="[d7]"></a>llcp_terminate_ind_handler</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, llc_llcp.o(.text.llcp_terminate_ind_handler))
<BR><BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode (via Veneer)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata.llcp_pdu_handler)
</UL>
<P><STRONG><a name="[e6]"></a>llcp_reject_ind_ext_handler</STRONG> (Thumb, 588 bytes, Stack size unknown bytes, llc_llcp.o(.text.llcp_reject_ind_ext_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llcp_reject_ind_ext_handler &rArr; ke_msg_send &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_check_evt_mask (via Veneer)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode (via Veneer)
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_clear_operation_ptr (via Veneer)
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_enc_change_evt_send (via Veneer)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_update_complete_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata.llcp_pdu_handler)
</UL>
<P><STRONG><a name="[e1]"></a>llcp_vers_ind_handler</STRONG> (Thumb, 200 bytes, Stack size unknown bytes, llc_llcp.o(.text.llcp_vers_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llcp_vers_ind_handler &rArr; llc_llcp_send &rArr; lld_evt_schedule_next &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_version_rd_event_send (via Veneer)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata.llcp_pdu_handler)
</UL>
<P><STRONG><a name="[df]"></a>llcp_pause_enc_req_handler</STRONG> (Thumb, 252 bytes, Stack size unknown bytes, llc_llcp.o(.text.llcp_pause_enc_req_handler))
<BR><BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_get_tx_pkt_cnt (via Veneer)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode (via Veneer)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send_basic (via Veneer)
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata.llcp_pdu_handler)
</UL>
<P><STRONG><a name="[da]"></a>llcp_start_enc_req_handler</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, llc_llcp.o(.text.llcp_start_enc_req_handler))
<BR><BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send_basic (via Veneer)
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata.llcp_pdu_handler)
</UL>
<P><STRONG><a name="[d8]"></a>llcp_enc_req_handler</STRONG> (Thumb, 268 bytes, Stack size unknown bytes, llc_llcp.o(.text.llcp_enc_req_handler))
<BR><BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_get_tx_pkt_cnt (via Veneer)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode (via Veneer)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send_basic (via Veneer)
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata.llcp_pdu_handler)
</UL>
<P><STRONG><a name="[dc]"></a>llcp_unknown_rsp_handler</STRONG> (Thumb, 592 bytes, Stack size unknown bytes, llc_llcp.o(.text.llcp_unknown_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llcp_unknown_rsp_handler &rArr; ke_msg_send &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_check_evt_mask (via Veneer)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode (via Veneer)
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_clear_operation_ptr (via Veneer)
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_feats_rd_event_send (via Veneer)
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_enc_change_evt_send (via Veneer)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_update_complete_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata.llcp_pdu_handler)
</UL>
<P><STRONG><a name="[e9]"></a>llcp_length_req_handler</STRONG> (Thumb, 392 bytes, Stack size unknown bytes, llc_llcp.o(.text.llcp_length_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llcp_length_req_handler &rArr; llc_llcp_send &rArr; lld_evt_schedule_next &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_check_evt_mask (via Veneer)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_eff_tx_time_set (via Veneer)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata.llcp_pdu_handler)
</UL>
<P><STRONG><a name="[db]"></a>llcp_start_enc_rsp_handler</STRONG> (Thumb, 480 bytes, Stack size unknown bytes, llc_llcp.o(.text.llcp_start_enc_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llcp_start_enc_rsp_handler &rArr; llc_llcp_send &rArr; lld_evt_schedule_next &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_compute_ce_max (via Veneer)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode (via Veneer)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_enc_key_ref_comp_evt_send (via Veneer)
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_enc_change_evt_send (via Veneer)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set (via Veneer)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata.llcp_pdu_handler)
</UL>
<P><STRONG><a name="[e0]"></a>llcp_pause_enc_rsp_handler</STRONG> (Thumb, 328 bytes, Stack size unknown bytes, llc_llcp.o(.text.llcp_pause_enc_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llcp_pause_enc_rsp_handler &rArr; llc_llcp_send &rArr; lld_evt_schedule_next &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set (via Veneer)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata.llcp_pdu_handler)
</UL>
<P><STRONG><a name="[e2]"></a>llcp_reject_ind_handler</STRONG> (Thumb, 324 bytes, Stack size unknown bytes, llc_llcp.o(.text.llcp_reject_ind_handler))
<BR><BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode (via Veneer)
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_enc_change_evt_send (via Veneer)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata.llcp_pdu_handler)
</UL>
<P><STRONG><a name="[de]"></a>llcp_feats_rsp_handler</STRONG> (Thumb, 396 bytes, Stack size unknown bytes, llc_llcp.o(.text.llcp_feats_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llcp_feats_rsp_handler &rArr; llc_llcp_send &rArr; lld_evt_schedule_next &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_feats_rd_event_send (via Veneer)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata.llcp_pdu_handler)
</UL>
<P><STRONG><a name="[ec]"></a>llcp_phy_rsp_handler</STRONG> (Thumb, 136 bytes, Stack size unknown bytes, llc_llcp.o(.text.llcp_phy_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llcp_phy_rsp_handler &rArr; ke_msg_send &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata.llcp_pdu_handler)
</UL>
<P><STRONG><a name="[e7]"></a>llcp_ping_req_handler</STRONG> (Thumb, 204 bytes, Stack size unknown bytes, llc_llcp.o(.text.llcp_ping_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llcp_ping_req_handler &rArr; lld_evt_schedule_next &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata.llcp_pdu_handler)
</UL>
<P><STRONG><a name="[ea]"></a>llcp_length_rsp_handler</STRONG> (Thumb, 640 bytes, Stack size unknown bytes, llc_llcp.o(.text.llcp_length_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llcp_length_rsp_handler &rArr; lld_evt_schedule_next &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_check_evt_mask (via Veneer)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_eff_tx_time_set (via Veneer)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_compute_ce_max (via Veneer)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata.llcp_pdu_handler)
</UL>
<P><STRONG><a name="[ed]"></a>llcp_phy_upd_ind_handler</STRONG> (Thumb, 628 bytes, Stack size unknown bytes, llc_llcp.o(.text.llcp_phy_upd_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llcp_phy_upd_ind_handler &rArr; ke_msg_send &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_instant_ongoing (via Veneer)
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_get_phys (via Veneer)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode (via Veneer)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_reject_ind_pdu_send
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_phy_update_req
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata.llcp_pdu_handler)
</UL>
<P><STRONG><a name="[e5]"></a>llcp_con_param_rsp_handler</STRONG> (Thumb, 264 bytes, Stack size unknown bytes, llc_llcp.o(.text.llcp_con_param_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llcp_con_param_rsp_handler &rArr; ke_msg_send &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_check_evt_mask (via Veneer)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode (via Veneer)
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_clear_operation_ptr (via Veneer)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_reject_ind_pdu_send
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_update_complete_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata.llcp_pdu_handler)
</UL>
<P><STRONG><a name="[d6]"></a>llcp_channel_map_ind_handler</STRONG> (Thumb, 368 bytes, Stack size unknown bytes, llc_llcp.o(.text.llcp_channel_map_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llcp_channel_map_ind_handler &rArr; llc_llcp_reject_ind_pdu_send &rArr; lld_evt_schedule_next &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_instant_ongoing (via Veneer)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_ch_map_ind
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_reject_ind_pdu_send
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata.llcp_pdu_handler)
</UL>
<P><STRONG><a name="[d5]"></a>llcp_con_upd_ind_handler</STRONG> (Thumb, 452 bytes, Stack size unknown bytes, llc_llcp.o(.text.llcp_con_upd_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llcp_con_upd_ind_handler &rArr; llc_llcp_reject_ind_pdu_send &rArr; lld_evt_schedule_next &rArr; lld_evt_elt_insert &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_instant_ongoing (via Veneer)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode (via Veneer)
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_clear_operation_ptr (via Veneer)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_update_ind
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_reject_ind_pdu_send
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata.llcp_pdu_handler)
</UL>
<P><STRONG><a name="[eb]"></a>llcp_phy_req_handler</STRONG> (Thumb, 368 bytes, Stack size unknown bytes, llc_llcp.o(.text.llcp_phy_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llcp_phy_req_handler &rArr; ke_msg_send &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_get_default_phy (via Veneer)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode (via Veneer)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_reject_ind_pdu_send
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata.llcp_pdu_handler)
</UL>
<P><STRONG><a name="[e4]"></a>llcp_con_param_req_handler</STRONG> (Thumb, 744 bytes, Stack size unknown bytes, llc_llcp.o(.text.llcp_con_param_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = llcp_con_param_req_handler &rArr; ke_msg_send &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_check_evt_mask (via Veneer)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode (via Veneer)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_param_rsp
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_reject_ind_pdu_send
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_con_param_rsp_pdu_send
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata.llcp_pdu_handler)
</UL>
<P><STRONG><a name="[82]"></a>ecc_multiplication_event_handler</STRONG> (Thumb, 704 bytes, Stack size unknown bytes, ecc_p256.o(.text.ecc_multiplication_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ecc_multiplication_event_handler &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_clear (via Veneer)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigHexInversion256
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GF_Jacobian_Point_Addition256
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GF_Jacobian_Point_Double256
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiplyBigHexModP256
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecc_p256.o(.text.ecc_init)
</UL>
<P><STRONG><a name="[89]"></a>h4tl_tx_done</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, h4tl.o(.text.h4tl_tx_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = h4tl_tx_done &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> h4tl.o(.text.h4tl_write)
</UL>
<P><STRONG><a name="[86]"></a>h4tl_tx_evt_handler</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, h4tl.o(.text.h4tl_tx_evt_handler))
<BR><BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_clear (via Veneer)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_clear (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> h4tl.o(.text.h4tl_init)
</UL>
<P><STRONG><a name="[88]"></a>h4tl_cmd_pld_rx_evt_handler</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, h4tl.o(.text.h4tl_cmd_pld_rx_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = h4tl_cmd_pld_rx_evt_handler &rArr; hci_cmd_received &rArr; ke_msg_send &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_clear (via Veneer)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_clear (via Veneer)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_received
</UL>
<BR>[Address Reference Count : 1]<UL><LI> h4tl.o(.text.h4tl_init)
</UL>
<P><STRONG><a name="[85]"></a>h4tl_rx_done</STRONG> (Thumb, 500 bytes, Stack size unknown bytes, h4tl.o(.text.h4tl_rx_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = h4tl_rx_done &rArr; ke_event_set &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_set (via Veneer)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_clear (via Veneer)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_tx_data_alloc (via Veneer)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_tx_data_received
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_received
</UL>
<BR>[Address Reference Count : 4]<UL><LI> h4tl.o(.text.h4tl_cmd_pld_rx_evt_handler)
<LI> h4tl.o(.text.h4tl_cmd_hdr_rx_evt_handler)
<LI> h4tl.o(.text.h4tl_rx_done)
<LI> h4tl.o(.text.h4tl_init)
</UL>
<P><STRONG><a name="[87]"></a>h4tl_cmd_hdr_rx_evt_handler</STRONG> (Thumb, 180 bytes, Stack size unknown bytes, h4tl.o(.text.h4tl_cmd_hdr_rx_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = h4tl_cmd_hdr_rx_evt_handler &rArr; hci_cmd_received &rArr; ke_msg_send &rArr; BLE_Semaphore_Give &rArr; OSA_EventSet &rArr; osObjectIsAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_clear (via Veneer)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_clear (via Veneer)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_get_max_param_size
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_received
</UL>
<BR>[Address Reference Count : 1]<UL><LI> h4tl.o(.text.h4tl_init)
</UL>
<P><STRONG><a name="[15f]"></a>ec_JacobiAdd</STRONG> (Thumb, 808 bytes, Stack size 56 bytes, ec_p_256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ec_JacobiAdd &rArr; EcP256_FieldModP &rArr; Bi_Add
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_Sub
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_IsZero
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_Add
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_FieldMult
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_FieldModP
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_SetZero
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_Copy
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_PointMult
</UL>

<P><STRONG><a name="[15e]"></a>ec_JacobiDouble</STRONG> (Thumb, 1876 bytes, Stack size 56 bytes, ec_p_256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ec_JacobiDouble &rArr; EcP256_FieldModP &rArr; Bi_Add
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_Sub
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_IsZero
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_Add
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_FieldModP
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bi_SetZero
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcP256_PointMult
</UL>

<P><STRONG><a name="[2be]"></a>SmStates_CheckIfLinkEncryptionHciEvent</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, sm_states.o(.text.SmStates_CheckIfLinkEncryptionHciEvent))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForPairingResponseParams
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForTKeyAndMconfirm
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForMrand
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_ResponderWaitForUlKeysetResponse
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForInitiatorKeysDist
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForInitiatorPublicKey
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScJwInitiatorNonce
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScPkEPasskeyAndInitiatorCri
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScPkEInitiatorNoncei
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScOobDataAndInitiatorNonce
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScKeyConfirmAndInitiatorDhKeyCheck
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_Idle
</UL>

<P><STRONG><a name="[2bf]"></a>Sm_KeyDistDeteminePacketList</STRONG> (Thumb, 78 bytes, Stack size unknown bytes, sm_states.o(.text.Sm_KeyDistDeteminePacketList))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForMasterStkEncryption
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_ResponderWaitForUlKeysetResponse
</UL>

<P><STRONG><a name="[121]"></a>SmState_Unexpected</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, sm_states.o(.text.SmState_Unexpected))
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_states.o(.rodata.smStateTable)
</UL>
<P><STRONG><a name="[2c0]"></a>SmStates_BuildAndSendPairingCompleteEvent</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, sm_states.o(.text.SmStates_BuildAndSendPairingCompleteEvent))
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemSet
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendEventToUpperLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForMasterStkEncryption
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_ResponderWaitForUlKeysetResponse
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForInitiatorKeysDist
</UL>

<P><STRONG><a name="[2ca]"></a>Sm_GeneratePasskey</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, sm_states.o(.text.unlikely.Sm_GeneratePasskey))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = Sm_GeneratePasskey &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GetPseudoRandomNo
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForPairingResponseParams
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForInitiatorPublicKey
</UL>

<P><STRONG><a name="[2b8]"></a>SmStates_GeneratePairingFailedPacketAndEvent</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, sm_states.o(.text.SmStates_GeneratePairingFailedPacketAndEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = SmStates_GeneratePairingFailedPacketAndEvent &rArr; Sm_SendPacketToL2cap &rArr; L2ca_SendSmpData &rArr; L2caRm_HandleSendData &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemSet
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendPacketToL2cap
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendEventToUpperLayer
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpPairingFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForPairingResponseParams
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForTKeyAndMconfirm
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForMrand
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForMasterStkEncryption
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_ResponderWaitForUlKeysetResponse
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForInitiatorKeysDist
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForInitiatorPublicKey
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScJwInitiatorNonce
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScPkEPasskeyAndInitiatorCri
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScPkEInitiatorNoncei
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScOobDataAndInitiatorNonce
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScKeyConfirmAndInitiatorDhKeyCheck
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleUnexpectedPacket.isra.4
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_Idle
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleInvalidUnknownPacket
</UL>

<P><STRONG><a name="[2bc]"></a>SmStates_HandleInvalidUnknownPacket</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, sm_states.o(.text.SmStates_HandleInvalidUnknownPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = SmStates_HandleInvalidUnknownPacket &rArr; SmStates_GeneratePairingFailedPacketAndEvent &rArr; Sm_SendPacketToL2cap &rArr; L2ca_SendSmpData &rArr; L2caRm_HandleSendData &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_GeneratePairingFailedPacketAndEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForTKeyAndMconfirm
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForMrand
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForInitiatorKeysDist
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForInitiatorPublicKey
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScJwInitiatorNonce
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScPkEPasskeyAndInitiatorCri
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScPkEInitiatorNoncei
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScOobDataAndInitiatorNonce
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScKeyConfirmAndInitiatorDhKeyCheck
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleUnexpectedPacket.isra.4
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_Idle
</UL>

<P><STRONG><a name="[2c1]"></a>SmStates_HandleRemotePairingFailure</STRONG> (Thumb, 78 bytes, Stack size unknown bytes, sm_states.o(.text.SmStates_HandleRemotePairingFailure))
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendEventToUpperLayer
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpPairingFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForPairingResponseParams
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForTKeyAndMconfirm
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForMrand
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForMasterStkEncryption
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_ResponderWaitForUlKeysetResponse
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForInitiatorKeysDist
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForInitiatorPublicKey
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScJwInitiatorNonce
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScPkEPasskeyAndInitiatorCri
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScPkEInitiatorNoncei
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScOobDataAndInitiatorNonce
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScKeyConfirmAndInitiatorDhKeyCheck
</UL>

<P><STRONG><a name="[2ba]"></a>SmStates_CheckIfPairingReqCanSatisfyAuthRequirements</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, sm_states.o(.text.SmStates_CheckIfPairingReqCanSatisfyAuthRequirements))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_Idle
</UL>

<P><STRONG><a name="[11a]"></a>SmState_Idle</STRONG> (Thumb, 496 bytes, Stack size unknown bytes, sm_states.o(.text.SmState_Idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = SmState_Idle &rArr; TMR_StartTimer &rArr; TmrTicksFromMilliseconds &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_IsTimerActive
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StopTimer
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StartTimer
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendPacketToL2cap
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendEventToUpperLayer
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpSecurityRequest
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpPairingRequestResponse
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpSecurityRequest
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_CheckIfPairingReqCanSatisfyAuthRequirements
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleInvalidUnknownPacket
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_GeneratePairingFailedPacketAndEvent
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_CheckIfLinkEncryptionHciEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_states.o(.rodata.smStateTable)
</UL>
<P><STRONG><a name="[2cd]"></a>SmStates_GenerateLeScPkERi</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, sm_states.o(.text.SmStates_GenerateLeScPkERi))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScPkEPasskeyAndInitiatorCri
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScPkEInitiatorNoncei
</UL>

<P><STRONG><a name="[2d0]"></a>SmStates_GenerateEcdhKeyPairAndOobRAndOobCr</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, sm_states.o(.text.SmStates_GenerateEcdhKeyPairAndOobRAndOobCr))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GetPseudoRandomNo
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDH_P256_GenerateKeys
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_SmpF4
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_RunStateMachine
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForPairingResponseParams
</UL>

<P><STRONG><a name="[2c2]"></a>SmStates_HandleUnexpectedPacket.isra.4</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, sm_states.o(.text.SmStates_HandleUnexpectedPacket.isra.4))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = SmStates_HandleUnexpectedPacket.isra.4 &rArr; SmStates_HandleInvalidUnknownPacket &rArr; SmStates_GeneratePairingFailedPacketAndEvent &rArr; Sm_SendPacketToL2cap &rArr; L2ca_SendSmpData &rArr; L2caRm_HandleSendData &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleInvalidUnknownPacket
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_GeneratePairingFailedPacketAndEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForPairingResponseParams
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForTKeyAndMconfirm
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForMrand
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForMasterStkEncryption
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_ResponderWaitForUlKeysetResponse
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForInitiatorKeysDist
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForInitiatorPublicKey
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScJwInitiatorNonce
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScPkEPasskeyAndInitiatorCri
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScPkEInitiatorNoncei
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScOobDataAndInitiatorNonce
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmState_WaitForLeScKeyConfirmAndInitiatorDhKeyCheck
</UL>

<P><STRONG><a name="[127]"></a>SmState_WaitForLeScKeyConfirmAndInitiatorDhKeyCheck</STRONG> (Thumb, 658 bytes, Stack size unknown bytes, sm_states.o(.text.SmState_WaitForLeScKeyConfirmAndInitiatorDhKeyCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = SmState_WaitForLeScKeyConfirmAndInitiatorDhKeyCheck &rArr; SmCrypto_SmpF5 &rArr; AES_128_CMAC_LsbFirstInput &rArr; AES_128_CMAC_Generate_Subkey &rArr; AES_128_Encrypt &rArr; sw_Aes128 &rArr; AES_InverseMixColumn
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCmp
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendPacketToL2cap
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpPairingDHKeyCheck
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpPairingDHKeyCheck
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_SmpF6
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_SmpF5
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleUnexpectedPacket.isra.4
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleRemotePairingFailure
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleInvalidUnknownPacket
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_GeneratePairingFailedPacketAndEvent
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_CheckIfLinkEncryptionHciEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_states.o(.rodata.smStateTable)
</UL>
<P><STRONG><a name="[126]"></a>SmState_WaitForLeScOobDataAndInitiatorNonce</STRONG> (Thumb, 482 bytes, Stack size unknown bytes, sm_states.o(.text.SmState_WaitForLeScOobDataAndInitiatorNonce))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = SmState_WaitForLeScOobDataAndInitiatorNonce &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GetPseudoRandomNo
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCmp
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendPacketToL2cap
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpPairingRandom
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpPairingRandom
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_SmpF4
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleUnexpectedPacket.isra.4
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleRemotePairingFailure
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleInvalidUnknownPacket
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_GeneratePairingFailedPacketAndEvent
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_CheckIfLinkEncryptionHciEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_states.o(.rodata.smStateTable)
</UL>
<P><STRONG><a name="[125]"></a>SmState_WaitForLeScPkEInitiatorNoncei</STRONG> (Thumb, 372 bytes, Stack size unknown bytes, sm_states.o(.text.SmState_WaitForLeScPkEInitiatorNoncei))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = SmState_WaitForLeScPkEInitiatorNoncei &rArr; SmCrypto_SmpF4 &rArr; AES_128_CMAC &rArr; AES_128_CMAC_Generate_Subkey &rArr; AES_128_Encrypt &rArr; sw_Aes128 &rArr; AES_InverseMixColumn
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCmp
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendPacketToL2cap
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpPairingRandom
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpPairingRandom
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_SmpF4
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleUnexpectedPacket.isra.4
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_GenerateLeScPkERi
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleRemotePairingFailure
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleInvalidUnknownPacket
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_GeneratePairingFailedPacketAndEvent
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_CheckIfLinkEncryptionHciEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_states.o(.rodata.smStateTable)
</UL>
<P><STRONG><a name="[124]"></a>SmState_WaitForLeScPkEPasskeyAndInitiatorCri</STRONG> (Thumb, 596 bytes, Stack size unknown bytes, sm_states.o(.text.SmState_WaitForLeScPkEPasskeyAndInitiatorCri))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = SmState_WaitForLeScPkEPasskeyAndInitiatorCri &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GetPseudoRandomNo
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendPacketToL2cap
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendEventToUpperLayer
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpPairingConfirm
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpKeypressNotification
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpPairingConfirm
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_SmpF4
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleUnexpectedPacket.isra.4
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_GenerateLeScPkERi
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleRemotePairingFailure
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleInvalidUnknownPacket
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_GeneratePairingFailedPacketAndEvent
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_CheckIfLinkEncryptionHciEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_states.o(.rodata.smStateTable)
</UL>
<P><STRONG><a name="[123]"></a>SmState_WaitForLeScJwInitiatorNonce</STRONG> (Thumb, 340 bytes, Stack size unknown bytes, sm_states.o(.text.SmState_WaitForLeScJwInitiatorNonce))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = SmState_WaitForLeScJwInitiatorNonce &rArr; SmCrypto_SmpG2 &rArr; AES_128_CMAC &rArr; AES_128_CMAC_Generate_Subkey &rArr; AES_128_Encrypt &rArr; sw_Aes128 &rArr; AES_InverseMixColumn
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendPacketToL2cap
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendEventToUpperLayer
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_SmpG2
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpPairingRandom
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpPairingRandom
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleUnexpectedPacket.isra.4
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleRemotePairingFailure
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleInvalidUnknownPacket
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_GeneratePairingFailedPacketAndEvent
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_CheckIfLinkEncryptionHciEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_states.o(.rodata.smStateTable)
</UL>
<P><STRONG><a name="[122]"></a>SmState_WaitForInitiatorPublicKey</STRONG> (Thumb, 720 bytes, Stack size unknown bytes, sm_states.o(.text.SmState_WaitForInitiatorPublicKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = SmState_WaitForInitiatorPublicKey &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GetPseudoRandomNo
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemSet
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDH_P256_ComputeDhKey
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendPacketToL2cap
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendEventToUpperLayer
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpPairingPublicKey
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpPairingPublicKey
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpPairingConfirm
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_SmpF4
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleUnexpectedPacket.isra.4
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleRemotePairingFailure
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleInvalidUnknownPacket
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_GeneratePairingFailedPacketAndEvent
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_GeneratePasskey
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_CheckIfLinkEncryptionHciEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_states.o(.rodata.smStateTable)
</UL>
<P><STRONG><a name="[120]"></a>SmState_WaitForInitiatorKeysDist</STRONG> (Thumb, 520 bytes, Stack size unknown bytes, sm_states.o(.text.SmState_WaitForInitiatorKeysDist))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = SmState_WaitForInitiatorKeysDist &rArr; SmStates_HandleUnexpectedPacket.isra.4 &rArr; SmStates_HandleInvalidUnknownPacket &rArr; SmStates_GeneratePairingFailedPacketAndEvent &rArr; Sm_SendPacketToL2cap &rArr; L2ca_SendSmpData &rArr; L2caRm_HandleSendData &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendEventToUpperLayer
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpKeyDistSigningInformation
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpKeyDistIdentityAddressInformation
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpKeyDistIdentityInformation
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpKeyDistMasterIdentification
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpKeyDistEncryptionInformation
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleUnexpectedPacket.isra.4
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleRemotePairingFailure
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleInvalidUnknownPacket
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_GeneratePairingFailedPacketAndEvent
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_BuildAndSendPairingCompleteEvent
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_CheckIfLinkEncryptionHciEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_states.o(.rodata.smStateTable)
</UL>
<P><STRONG><a name="[11f]"></a>SmState_ResponderWaitForUlKeysetResponse</STRONG> (Thumb, 546 bytes, Stack size unknown bytes, sm_states.o(.text.SmState_ResponderWaitForUlKeysetResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = SmState_ResponderWaitForUlKeysetResponse &rArr; Sm_SendPacketToL2cap &rArr; L2ca_SendSmpData &rArr; L2caRm_HandleSendData &rArr; MEM_BufferFree &rArr; ListAddTail &rArr; OSA_InterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendPacketToL2cap
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendEventToUpperLayer
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpKeyDistEncryptionInformation
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpKeyDistSigningInformation
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpKeyDistIdentityAddressInformation
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpKeyDistIdentityInformation
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpKeyDistMasterIdentification
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleUnexpectedPacket.isra.4
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleRemotePairingFailure
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_GeneratePairingFailedPacketAndEvent
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_BuildAndSendPairingCompleteEvent
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_KeyDistDeteminePacketList
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_CheckIfLinkEncryptionHciEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_states.o(.rodata.smStateTable)
</UL>
<P><STRONG><a name="[11e]"></a>SmState_WaitForMasterStkEncryption</STRONG> (Thumb, 644 bytes, Stack size unknown bytes, sm_states.o(.text.SmState_WaitForMasterStkEncryption))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = SmState_WaitForMasterStkEncryption &rArr; SmCrypto_SmpS1 &rArr; AES_128_Encrypt &rArr; sw_Aes128 &rArr; AES_InverseMixColumn
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemSet
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hci_LeLongTermKeyRequestReply
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendEventToUpperLayer
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_SmpS1
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleUnexpectedPacket.isra.4
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleRemotePairingFailure
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_GeneratePairingFailedPacketAndEvent
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_BuildAndSendPairingCompleteEvent
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_KeyDistDeteminePacketList
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_states.o(.rodata.smStateTable)
</UL>
<P><STRONG><a name="[11d]"></a>SmState_WaitForMrand</STRONG> (Thumb, 322 bytes, Stack size unknown bytes, sm_states.o(.text.SmState_WaitForMrand))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = SmState_WaitForMrand &rArr; SmCrypto_SmpC1 &rArr; AES_128_Encrypt &rArr; sw_Aes128 &rArr; AES_InverseMixColumn
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCmp
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendPacketToL2cap
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_SmpC1
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpPairingRandom
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpPairingRandom
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleUnexpectedPacket.isra.4
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleRemotePairingFailure
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleInvalidUnknownPacket
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_GeneratePairingFailedPacketAndEvent
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_CheckIfLinkEncryptionHciEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_states.o(.rodata.smStateTable)
</UL>
<P><STRONG><a name="[11c]"></a>SmState_WaitForTKeyAndMconfirm</STRONG> (Thumb, 608 bytes, Stack size unknown bytes, sm_states.o(.text.SmState_WaitForTKeyAndMconfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = SmState_WaitForTKeyAndMconfirm &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GetPseudoRandomNo
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendPacketToL2cap
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendEventToUpperLayer
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmCrypto_SmpC1
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpPairingConfirm
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpKeypressNotification
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpPairingConfirm
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleUnexpectedPacket.isra.4
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleRemotePairingFailure
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleInvalidUnknownPacket
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_GeneratePairingFailedPacketAndEvent
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_CheckIfLinkEncryptionHciEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_states.o(.rodata.smStateTable)
</UL>
<P><STRONG><a name="[11b]"></a>SmState_WaitForPairingResponseParams</STRONG> (Thumb, 1176 bytes, Stack size unknown bytes, sm_states.o(.text.SmState_WaitForPairingResponseParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = SmState_WaitForPairingResponseParams &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemSet
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendPacketToL2cap
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendEventToUpperLayer
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBuildPacket_SmpPairingRequestRespose
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleUnexpectedPacket.isra.4
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_GenerateEcdhKeyPairAndOobRAndOobCr
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleRemotePairingFailure
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_GeneratePairingFailedPacketAndEvent
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_GeneratePasskey
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_CheckIfLinkEncryptionHciEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_states.o(.rodata.smStateTable)
</UL>
<P><STRONG><a name="[2d6]"></a>SmStates_SmpIdleStateCleanup</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, sm_states.o(.text.SmStates_SmpIdleStateCleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = SmStates_SmpIdleStateCleanup &rArr; TMR_StopTimer &rArr; StackTimer_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_IsTimerActive
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StopTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_HandleSmDeviceGlobalMessages.isra.8
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_CallSmpStateMachine
</UL>

<P><STRONG><a name="[2d5]"></a>SmStates_CallSmpStateMachine</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, sm_states.o(.text.SmStates_CallSmpStateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = SmStates_CallSmpStateMachine &rArr; SmStates_SmpIdleStateCleanup &rArr; TMR_StopTimer &rArr; StackTimer_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_SmpIdleStateCleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_RunStateMachine
</UL>

<P><STRONG><a name="[2db]"></a>SmStates_HandleSmDeviceGlobalMessages.isra.8</STRONG> (Thumb, 278 bytes, Stack size unknown bytes, sm_states.o(.text.SmStates_HandleSmDeviceGlobalMessages.isra.8))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = SmStates_HandleSmDeviceGlobalMessages.isra.8 &rArr; TMR_FreeTimer &rArr; TMR_StopTimer &rArr; StackTimer_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_IsTimerActive
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_StopTimer
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_FreeTimer
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_AllocateTimer
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmDebug_LogFnc
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendEventToUpperLayer
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_SmpIdleStateCleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmStates_RunStateMachine
</UL>

<P><STRONG><a name="[1dd]"></a>findNextDbIndexFor16BitUuidAndValue</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, gatt_db_att.o(.text.findNextDbIndexFor16BitUuidAndValue))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttFindByTypeValue
</UL>

<P><STRONG><a name="[1ec]"></a>writeAttribute</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, gatt_db_att.o(.text.writeAttribute))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttSignedWriteCommand
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttWriteCommand
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttWrite
</UL>

<P><STRONG><a name="[1e3]"></a>readPartAttributeValue</STRONG> (Thumb, 120 bytes, Stack size unknown bytes, gatt_db_att.o(.text.readPartAttributeValue))
<BR><BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_GetCccd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttPrepareNotificationIndication
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttReadByType
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttRead
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttReadBlob
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttReadMultiple
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttReadByGroupType
</UL>

<P><STRONG><a name="[1e7]"></a>findNextDbIndexForReadByGroupTypeUuid</STRONG> (Thumb, 196 bytes, Stack size unknown bytes, gatt_db_att.o(.text.findNextDbIndexForReadByGroupTypeUuid))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttReadByGroupType
</UL>

<P><STRONG><a name="[1e9]"></a>findNextDbIndexForReadByTypeUuid</STRONG> (Thumb, 196 bytes, Stack size unknown bytes, gatt_db_att.o(.text.findNextDbIndexForReadByGroupTypeUuid))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDb_AttReadByType
</UL>

<P><STRONG><a name="[301]"></a>gap_cm_checkNextIrk</STRONG> (Thumb, 176 bytes, Stack size unknown bytes, gap_cm.o(.text.gap_cm_checkNextIrk))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = gap_cm_checkNextIrk &rArr; Sm_SendCmd &rArr; SmStates_RunStateMachine &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_PostSmCheckResult
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerGenericCallback
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_CheckIfBondedDeviceHasDistributedIrk
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_GetBondedDeviceIrk
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerConnectionCallback
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_irkCheckComplete
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_notifyConnectedDevice
</UL>

<P><STRONG><a name="[300]"></a>verifySignature</STRONG> (Thumb, 160 bytes, Stack size unknown bytes, gap_cm.o(.text.verifySignature))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = verifySignature &rArr; Sm_SendCmd &rArr; SmStates_RunStateMachine &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalGap_PostSmCheckResult
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_triggerGenericCallback
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sm_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_handleSignedWriteCommand
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_checkNextCsrk
</UL>

<P><STRONG><a name="[2ff]"></a>gap_cm_checkNextCsrk</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, gap_cm.o(.text.gap_cm_checkNextCsrk))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = gap_cm_checkNextCsrk &rArr; verifySignature &rArr; Sm_SendCmd &rArr; SmStates_RunStateMachine &rArr; SmStates_GenerateEcdhKeyPairAndOobRAndOobCr &rArr; ECDH_P256_GenerateKeys &rArr; Ecdh_GenerateNewKeys &rArr; RNG_GetPseudoRandomNo &rArr; SHA256_Hash &rArr; SHA256_HashUpdate &rArr; SHA256_hash_n &rArr; sw_sha256_hash_n
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_GetBondedDeviceSignCounter
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDb_GetBondedDeviceCsrk
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifySignature
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_signatureVerificationComplete
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cm_handleSignedWriteCommand
</UL>

<P><STRONG><a name="[9b]"></a>lld_evt_delete_elt_handler</STRONG> (Thumb, 244 bytes, Stack size unknown bytes, lld_evt.o(.text.lld_evt_delete_elt_handler))
<BR><BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_clear (via Veneer)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_delete (via Veneer)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_clear (via Veneer)
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_extract (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lld_evt.o(.text.lld_evt_init)
</UL>
<P><STRONG><a name="[3b6]"></a>lld_evt_winsize_change</STRONG> (Thumb, 260 bytes, Stack size unknown bytes, lld_evt.o(.text.lld_evt_winsize_change))
<BR><BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_slave
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_restart
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next
</UL>

<P><STRONG><a name="[3a1]"></a>lld_evt_deferred_elt_push</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, lld_evt.o(.text.lld_evt_deferred_elt_push))
<BR><BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_restart
</UL>

<P><STRONG><a name="[2dd]"></a>Sm_ValidateSmpPacketTypeAndLength.isra.0</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, sm_packet_op.o(.text.Sm_ValidateSmpPacketTypeAndLength.isra.0))
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpKeyDistSigningInformation
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpKeyDistIdentityAddressInformation
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpKeyDistIdentityInformation
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpKeyDistMasterIdentification
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpKeyDistEncryptionInformation
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpPairingPublicKey
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpPairingConfirm
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpPairingRandom
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpPairingDHKeyCheck
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpSecurityRequest
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpPairingRequestResponse
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmUnpack_SmpPairingFailed
</UL>

<P><STRONG><a name="[51f]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[50d]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
</UL>

<P><STRONG><a name="[521]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[520]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b1]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
